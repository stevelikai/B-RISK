Option Strict Off
Option Explicit On

Imports System
Imports System.IO
Imports System.Xml
Imports System.Xml.Linq
Imports System.Xml.Serialization
Imports System.Windows.Forms
Imports System.String
Imports System.Math
Imports System.Collections.Generic
Imports VB = Microsoft.VisualBasic
Imports CenterSpace.NMath.Core
Imports CenterSpace.NMath.Stats
Imports System.Windows.Forms.DataVisualization.Charting
Imports BRISK.Branzfire.System.Windows.Forms.DataVisualization.Charting.Utilities
Imports Microsoft.Office.Interop
Imports System.Globalization
Imports System.Security.Permissions
Imports System.Threading

'<Assembly: SecurityPermission(SecurityAction.RequestMinimum, ControlThread:=True)> 

Public Class frmInputs
   
    Inherits System.Windows.Forms.Form
    Public histogramHelper As New HistogramChartHelper()
    Public DistType As String 'name of the distribution type
    ' Public NumberIterations As Integer
    ' Public OutputInterval As Integer
    Dim var As Integer = 3 'upper layer temp
    Dim room As Integer = 1 'room id
    Dim counter As Integer = 1
    Dim xtitle As String
    Dim ytitle As String

    Dim oDistributions As List(Of oDistribution)

    Public out_data(,,) As Double
    Public tempdata(,,) As Double
    Public tempdata_SPR(,) As Double
    Public cdftempdata(,,) As Double
    Public cdftempdata2(,,) As Double
    Public tempdatain() As Double
    Public mc_SprReliability() As Double
    Public mc_SDReliability() As Double
    Public mc_FanReliability() As Double
    'Public mc_HOReliability() As Double
    Public mc_SprSuppressProb() As Double
    Public mc_SprCooling() As Double
    Public mc_NumOperatingSpr() As Integer
    Public mc_InteriorTemp() As Double
    Public mc_ExteriorTemp() As Double
    Public mc_RelativeHumidity() As Double
    Public mc_FLED() As Double
    Public mc_FLED_actual() As Double
    Public mc_PeakHRR() As Double
    Public mc_AlphaT() As Double

    Public mc_HoC_fuel() As Double 'global setting, not individual object
    Public mc_presoot() As Double 'global setting, not individual object
    Public mc_preCO() As Double 'global setting, not individual object
    'Public mc_LHOG() As Double
    Public mc_RLF() As Double

    Public mc_Time(,,) As Double
    'Public mc_ULTemp(,,) As Double -->global
    Public mc_HRR(,,) As Double
    Public mc_LLTemp(,,) As Double
    'Public mc_LayerHeight(,,) As Double  -->global
    ' Public mc_FEDgas(,,) As Double -->global
    'Public mc_FEDheat(,,) As Double -->global
    'Public mc_visi(,,) As Double -->global
    Public mc_sat(,) As Double 'store sprinkler activation time
    Public mc_sprnum(,,) As Integer
    Public mc_sdat(,) As Double 'store smoke detector activation time

    Public Sub Save_BaseFile_xml(ByVal filename As String)

        ' Changes the CurrentCulture of the current thread to en-US.
        Thread.CurrentThread.CurrentCulture = New CultureInfo("en-US", False)

        Dim room As Short
        Dim HCNcalc As Boolean
        Dim plume As Short
        Dim SuppressCeiling As Boolean
        Dim post As Boolean
        Dim tempvar1 As String = ""
        Dim tempvar2 As String = ""
        Dim stemp As String = ""

        Try

            If chkSaveVentFlow.Checked = True Then
                ventlog = True
            Else
                ventlog = False
            End If

            If ChkAutosavePdf.Checked = True Then
                autosavepdf = True
            Else
                autosavepdf = False
            End If

            If chkAutosaveXL.Checked = True Then
                autosaveXL = True
            Else
                autosaveXL = False
            End If

            If frmOptions1.optFEDCO.Checked = True Then
                FEDCO = True
            Else
                FEDCO = False
            End If

            If frmOptions1.optPostFlashover.Checked = True Then
                post = True
            Else
                post = False
            End If

            If frmOptions1.optStrongPlume.Checked = True Then
                plume = 1 'general
            Else
                plume = 2 'mccaffrey
            End If

            If frmOptions1.optEnhanceOn.Checked = True Then
                Enhance = True
            Else
                Enhance = False
            End If

            If frmOptions1.optKarlsson.Checked = True Then
                corner = 1
            ElseIf frmOptions1.optQuintiere.Checked = True Then
                corner = 2
            Else
                corner = 0
            End If

            If frmOptions1.optIlluminatedSign.Checked = True Then
                illumination = True
            Else
                illumination = False
            End If

            If frmQuintiere.chkSpreadAdjacentRoom.CheckState = System.Windows.Forms.CheckState.Checked Then
                IgniteNextRoom = True
            Else
                IgniteNextRoom = False
            End If

            ventlog = chkSaveVentFlow.CheckState

            If frmOptions1.chkWallFlowDisable.CheckState = 1 Then
                nowallflow = True
            Else
                nowallflow = False
            End If

            HCNcalc = frmOptions1.chkHCNcalc.CheckState
            FOFluxCriteria = frmOptions1.optFOflux.Checked

            Dim myXMLsettings As New XmlWriterSettings
            myXMLsettings.Indent = True
            myXMLsettings.NewLineOnAttributes = True

            Dim newp As String = System.IO.Path.GetDirectoryName(filename)
            If Not My.Computer.FileSystem.DirectoryExists(newp) Then
                My.Computer.FileSystem.CreateDirectory(newp)

                'if this is a new folder we need the other files
                'save as
                If My.Computer.FileSystem.FileExists(DataFolder & "rooms.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "rooms.xml", newp & "\rooms.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "items.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "items.xml", newp & "\items.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "vents.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "vents.xml", newp & "\vents.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "cvents.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "cvents.xml", newp & "\cvents.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "fans.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "fans.xml", newp & "\fans.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "smokedets.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "smokedets.xml", newp & "\smokedets.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "sprinklers.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "sprinklers.xml", newp & "\sprinklers.xml", True)
                End If
                If My.Computer.FileSystem.FileExists(DataFolder & "distributions.xml") = True Then
                    My.Computer.FileSystem.CopyFile(DataFolder & "distributions.xml", newp & "\distributions.xml", True)
                End If

            End If


            Using DFW As XmlWriter = XmlWriter.Create(filename, myXMLsettings)
                DFW.WriteComment("Created by B-RISK Version " & Version)
                DFW.WriteComment("Input File " & Convert.ToString(MDIFrmMain.Text))
                DFW.WriteStartElement("simulation")

                DFW.WriteStartElement("general_settings")
                DFW.WriteElementString("version", Version)
                DFW.WriteElementString("user_mode", VM2)
                DFW.WriteElementString("evacnz", TalkToEVACNZ)
                DFW.WriteElementString("file_type", "montecarlo")
                DFW.WriteElementString("description", Description)
                DFW.WriteElementString("number_iterations", Me.txtNumberIterations.Text)
                DFW.WriteElementString("output_interval", Me.txtOutputInterval.Text)
                DFW.WriteElementString("vent_clearance", ventclearance)
                DFW.WriteElementString("grid_size", gridsize)
                DFW.WriteElementString("dfg_fixitem1", fixitem1)
                DFW.WriteElementString("dfg_windspeed", ISD_windspeed)
                DFW.WriteElementString("dfg_winddir", ISD_winddir)

                stemp = Me.txtBaseName.Text
                stemp = stemp.Replace(" ", "_")

                DFW.WriteElementString("base_name", "basemodel_" & stemp)

                DFW.WriteStartElement("spr_num_prob")
                DFW.WriteAttributeString("sprnum1", sprnum_prob(0))
                DFW.WriteAttributeString("sprnum2", sprnum_prob(1))
                DFW.WriteAttributeString("sprnum3", sprnum_prob(2))
                DFW.WriteAttributeString("sprnum4", sprnum_prob(3))
                DFW.WriteEndElement()

                DFW.WriteElementString("simulation_duration", SimTime)
                DFW.WriteElementString("display_interval", DisplayInterval)
                DFW.WriteElementString("ceiling_nodes", Ceilingnodes)
                DFW.WriteElementString("wall_nodes", Wallnodes)
                DFW.WriteElementString("floor_nodes", Floornodes)
                DFW.WriteElementString("enhance_burning", Enhance)
                DFW.WriteElementString("job_number", JobNumber)
                DFW.WriteElementString("excel_interval", ExcelInterval)
                DFW.WriteElementString("time_step", Timestep)
                DFW.WriteElementString("error_control", Error_Control)
                DFW.WriteElementString("error_control_ventflows", Error_Control_ventflow)
                DFW.WriteElementString("fire_dbase", System.IO.Path.GetFileName(FireDatabaseName))
                DFW.WriteElementString("mat_dbase", System.IO.Path.GetFileName(MaterialsDatabaseName))
                DFW.WriteElementString("ceiling_jet", cjModel)
                DFW.WriteElementString("vent_logfile", ventlog)
                DFW.WriteElementString("LE_Solver", LEsolver)
                DFW.WriteElementString("no_wall_flow", nowallflow)
                DFW.WriteElementString("sprink_mode", sprink_mode)
                DFW.WriteElementString("auto_populate", autopopulate)
                DFW.WriteElementString("calc_sprdist", calc_sprdist)
                DFW.WriteElementString("calc_sddist", calc_sddist)
                DFW.WriteElementString("ignite_secitems", ignitetargets)
                DFW.WriteElementString("firstitem", firstitem)
                DFW.WriteElementString("storage_height", StoreHeight)
                DFW.WriteElementString("powerlaw_T2fire", useT2fire)
                DFW.WriteElementString("powerlaw_designfire", usepowerlawdesignfire)
                DFW.WriteElementString("compartment_effects", FuelResponseEffects)
                DFW.WriteElementString("autosavepdf", autosavepdf)
                DFW.WriteElementString("autosaveXL", autosaveXL)

                DFW.WriteEndElement()

                DFW.WriteStartElement("rooms")
                DFW.WriteAttributeString("number_rooms", NumberRooms)
                DFW.WriteAttributeString("fire_room", fireroom)
                For room = 1 To NumberRooms
                    DFW.WriteStartElement("room")
                    DFW.WriteAttributeString("id", room)
                    DFW.WriteAttributeString("ceilingslope", CeilingSlope(room))
                    DFW.WriteElementString("width", RoomWidth(room))
                    DFW.WriteElementString("length", RoomLength(room))
                    DFW.WriteElementString("max_height", RoomHeight(room))
                    DFW.WriteElementString("description", RoomDescription(room))
                    DFW.WriteElementString("min_height", MinStudHeight(room))
                    DFW.WriteElementString("floor_elevation", FloorElevation(room))
                    DFW.WriteElementString("abs_X", RoomAbsX(room))
                    DFW.WriteElementString("abs_Y", RoomAbsY(room))

                    DFW.WriteElementString("two_zones", TwoZones(room))

                    DFW.WriteStartElement("wall_lining")
                    DFW.WriteElementString("description", WallSurface(room))
                    DFW.WriteElementString("thickness", WallThickness(room))
                    DFW.WriteElementString("conductivity", WallConductivity(room))
                    DFW.WriteElementString("specific_heat", WallSpecificHeat(room))
                    DFW.WriteElementString("density", WallDensity(room))
                    DFW.WriteElementString("emissivity", Surface_Emissivity(2, room))
                    DFW.WriteElementString("cone_file", WallConeDataFile(room))
                    DFW.WriteElementString("min_temp_spread", WallTSMin(room))
                    DFW.WriteElementString("flame_spread_parameter", WallFlameSpreadParameter(room))
                    DFW.WriteElementString("eff_heat_of_combustion", WallEffectiveHeatofCombustion(room))
                    DFW.WriteElementString("soot_yield", WallSootYield(room))
                    DFW.WriteElementString("CO2_yield", WallCO2Yield(room))
                    DFW.WriteElementString("H20_yield", WallH2OYield(room))
                    DFW.WriteElementString("HCN_yield", WallHCNYield(room))
                    DFW.WriteEndElement()

                    DFW.WriteStartElement("wall_substrate")
                    DFW.WriteAttributeString("present", HaveWallSubstrate(room))
                    If HaveWallSubstrate(room) = True Then
                        DFW.WriteElementString("description", WallSubstrate(room))
                        DFW.WriteElementString("thickness", WallSubThickness(room))
                        DFW.WriteElementString("conductivity", WallSubConductivity(room))
                        DFW.WriteElementString("specific_heat", WallSubSpecificHeat(room))
                        DFW.WriteElementString("density", WallSubDensity(room))
                    End If
                    DFW.WriteEndElement()

                    DFW.WriteStartElement("ceiling_lining")
                    DFW.WriteElementString("description", CeilingSurface(room))
                    DFW.WriteElementString("thickness", CeilingThickness(room))
                    DFW.WriteElementString("conductivity", CeilingConductivity(room))
                    DFW.WriteElementString("specific_heat", CeilingSpecificHeat(room))
                    DFW.WriteElementString("density", CeilingDensity(room))
                    DFW.WriteElementString("emissivity", Surface_Emissivity(1, room))
                    DFW.WriteElementString("ceiling_cone_file", CeilingConeDataFile(room))
                    DFW.WriteElementString("eff_heat_of_combustion", CeilingEffectiveHeatofCombustion(room))
                    DFW.WriteElementString("soot_yield", CeilingSootYield(room))
                    DFW.WriteElementString("CO2_yield", CeilingCO2Yield(room))
                    DFW.WriteElementString("H20_yield", CeilingH2OYield(room))
                    DFW.WriteElementString("HCN_yield", CeilingHCNYield(room))
                    DFW.WriteEndElement()

                    DFW.WriteStartElement("ceiling_substrate")
                    DFW.WriteAttributeString("present", HaveCeilingSubstrate(room))
                    If HaveCeilingSubstrate(room) = True Then
                        DFW.WriteElementString("description", CeilingSubstrate(room))
                        DFW.WriteElementString("thickness", CeilingSubThickness(room))
                        DFW.WriteElementString("conductivity", CeilingSubConductivity(room))
                        DFW.WriteElementString("specific_heat", CeilingSubSpecificHeat(room))
                        DFW.WriteElementString("density", CeilingSubDensity(room))
                    End If
                    DFW.WriteEndElement()

                    DFW.WriteStartElement("floor_lining")
                    DFW.WriteElementString("description", FloorSurface(room))
                    DFW.WriteElementString("thickness", FloorThickness(room))
                    DFW.WriteElementString("conductivity", FloorConductivity(room))
                    DFW.WriteElementString("specific_heat", FloorSpecificHeat(room))
                    DFW.WriteElementString("density", FloorDensity(room))
                    DFW.WriteElementString("emissivity", Surface_Emissivity(4, room))
                    DFW.WriteElementString("floor_cone_file", FloorConeDataFile(room))
                    DFW.WriteElementString("min_temp_spread", FloorTSMin(room))
                    DFW.WriteElementString("flame_spread_parameter", FloorFlameSpreadParameter(room))
                    DFW.WriteElementString("eff_heat_of_combustion", FloorEffectiveHeatofCombustion(room))
                    DFW.WriteElementString("soot_yield", FloorSootYield(room))
                    DFW.WriteElementString("CO2_yield", FloorCO2Yield(room))
                    DFW.WriteElementString("H20_yield", FloorH2OYield(room))
                    DFW.WriteElementString("HCN_yield", FloorHCNYield(room))

                    DFW.WriteEndElement()

                    DFW.WriteStartElement("floor_substrate")
                    DFW.WriteAttributeString("present", HaveFloorSubstrate(room))
                    If HaveFloorSubstrate(room) = True Then
                        DFW.WriteElementString("description", FloorSubstrate(room))
                        DFW.WriteElementString("thickness", FloorSubThickness(room))
                        DFW.WriteElementString("conductivity", FloorSubConductivity(room))
                        DFW.WriteElementString("specific_heat", FloorSubSpecificHeat(room))
                        DFW.WriteElementString("density", FloorSubDensity(room))
                    End If
                    DFW.WriteEndElement()

                    DFW.WriteEndElement()
                Next

                DFW.WriteEndElement()

                DFW.WriteStartElement("flamespread")
                DFW.WriteAttributeString("algorithm", corner)

                If corner > 0 Then
                    'corner = 2 is the quintiere flame spread model
                    DFW.WriteElementString("suppress_ceiling_hrr", SuppressCeiling)
                    DFW.WriteElementString("flame_area_constant", FlameAreaConstant)
                    DFW.WriteElementString("flame_length_power", FlameLengthPower)
                    DFW.WriteElementString("burner_width", BurnerWidth)
                    DFW.WriteElementString("wall_heat_flux", WallHeatFlux)
                    DFW.WriteElementString("ceiling_heat_flux", CeilingHeatFlux)
                    DFW.WriteElementString("ignite_next_room", IgniteNextRoom)
                    DFW.WriteElementString("one_cone_curve", UseOneCurve)
                    DFW.WriteElementString("ign_correlation", IgnCorrelation)
                    DFW.WriteElementString("pessimise_comb_wall", PessimiseCombWall)
                    DFW.WriteElementString("wall_percent", wallpercent)
                    DFW.WriteElementString("ceiling_percent", ceilingpercent)
                    DFW.WriteElementString("HFS_limit", wallHFSlimit)
                    DFW.WriteElementString("VFS_limit", wallVFSlimit)

                End If
                DFW.WriteEndElement()

                DFW.WriteStartElement("tenability")
                DFW.WriteElementString("FEDCO_toxicity_model", FEDCO)
                DFW.WriteElementString("monitor_height", MonitorHeight)
                DFW.WriteElementString("activity_level", Activity)
                DFW.WriteElementString("endpoint_radiation", TargetEndPoint)
                DFW.WriteElementString("endpoint_temp", TempEndPoint)
                DFW.WriteElementString("endpoint_visibility", VisibilityEndPoint)
                DFW.WriteElementString("endpoint_FED", FEDEndPoint)
                DFW.WriteElementString("endpoint_convect", ConvectEndPoint)
                DFW.WriteElementString("illumination", illumination)
                DFW.WriteElementString("FEDpath_1_starttime", FEDPath(0, 0))
                DFW.WriteElementString("FEDpath_1_endtime", FEDPath(1, 0))
                DFW.WriteElementString("FEDpath_1_room", FEDPath(2, 0))
                DFW.WriteElementString("FEDpath_2_starttime", FEDPath(0, 1))
                DFW.WriteElementString("FEDpath_2_endtime", FEDPath(1, 1))
                DFW.WriteElementString("FEDpath_2_room", FEDPath(2, 1))
                DFW.WriteElementString("FEDpath_3_starttime", FEDPath(0, 2))
                DFW.WriteElementString("FEDpath_3_endtime", FEDPath(1, 2))
                DFW.WriteElementString("FEDpath_3_room", FEDPath(2, 2))
                DFW.WriteEndElement()

                DFW.WriteStartElement("postflashover")
                DFW.WriteAttributeString("post", post)
                DFW.WriteAttributeString("fluxcriteria", FOFluxCriteria)
                DFW.WriteAttributeString("calcFRR", calcFRR)
                DFW.WriteAttributeString("modGER", modGER)
                DFW.WriteElementString("fuel_thickness", Fuel_Thickness)
                DFW.WriteElementString("stick_spacing", Stick_Spacing)
                DFW.WriteElementString("crib_height", Cribheight)
                DFW.WriteElementString("excess_fuel_factor", ExcessFuelFactor)

                DFW.WriteElementString("CLT_model", useCLTmodel)
                DFW.WriteElementString("CLT_ceil_percent", CLTceilingpercent)
                DFW.WriteElementString("CLT_wall_percent", CLTwallpercent)
                DFW.WriteElementString("CLT_chartemp", chartemp)
                DFW.WriteElementString("integral_model", IntegralModel)
                DFW.WriteElementString("Lamella_depth", Lamella)
                DFW.WriteElementString("CLT_Qcrit", CLTQcrit)
                DFW.WriteElementString("CLT_flameflux", CLTflameflux)
                DFW.WriteElementString("CLT_latentheatofgasification", CLTLoG)
                DFW.WriteElementString("CLT_ignitiontemp", CLTigtemp)
                DFW.WriteElementString("CLT_calibration", CLTcalibrationfactor)
                DFW.WriteElementString("CLT_debondtemp", DebondTemp)
                DFW.WriteElementString("kinetic_model", KineticModel)
                DFW.WriteElementString("kinetic_hemi_Ei", E_array(2))
                DFW.WriteElementString("kinetic_hemi_Ai", A_array(2))
                DFW.WriteElementString("kinetic_hemi_ni", n_array(2))
                DFW.WriteElementString("kinetic_hemi_mf", mf_compinit(2))
                DFW.WriteElementString("kinetic_cell_Ei", E_array(1))
                DFW.WriteElementString("kinetic_cell_Ai", A_array(1))
                DFW.WriteElementString("kinetic_cell_ni", n_array(1))
                DFW.WriteElementString("kinetic_cell_mf", mf_compinit(1))
                DFW.WriteElementString("kinetic_lig_Ei", E_array(3))
                DFW.WriteElementString("kinetic_lig_Ai", A_array(3))
                DFW.WriteElementString("kinetic_lig_ni", n_array(3))
                DFW.WriteElementString("kinetic_lig_mf", mf_compinit(3))
                DFW.WriteElementString("kinetic_wat_Ei", E_array(0))
                DFW.WriteElementString("kinetic_wat_Ai", A_array(0))
                DFW.WriteElementString("kinetic_wat_ni", n_array(0))
                DFW.WriteElementString("kinetic_wat_mf", mf_compinit(0))
                DFW.WriteElementString("kinetic_cell_charyield", char_yield(1))
                DFW.WriteElementString("kinetic_hemi_charyield", char_yield(2))
                DFW.WriteElementString("kinetic_lig_charyield", char_yield(3))
                DFW.WriteElementString("CLT_moisturecontent", init_moisturecontent)

                DFW.WriteEndElement()

                DFW.WriteStartElement("chemistry")
                DFW.WriteElementString("nC", nC)
                DFW.WriteElementString("nH", nH)
                DFW.WriteElementString("nO", nO)
                DFW.WriteElementString("nN", nN)
                DFW.WriteElementString("fueltype", fueltype)
                DFW.WriteElementString("hcn_calc", HCNcalc)
                DFW.WriteElementString("soot_alpha", SootAlpha)
                DFW.WriteElementString("soot_epsilon", SootEpsilon)
                DFW.WriteElementString("emission_coefficient", EmissionCoefficient)
                DFW.WriteElementString("stoichiometric_air_fuel_ratio", StoichAFratio)
                DFW.WriteElementString("post_CO", postCO)
                DFW.WriteElementString("post_soot", postSoot)
                DFW.WriteElementString("CO_mode", comode)
                DFW.WriteElementString("soot_mode", sootmode)
                DFW.WriteEndElement()

                DFW.WriteStartElement("fires")

                DFW.WriteEndElement()

                'needs to know number of vents in each wall segment
                ' Resize_Vents()

                'Resize_CVents()
                'DFW.WriteStartElement("vvents")
                'For room = 1 To NumberRooms
                '    For i = 2 To NumberRooms + 1
                '        If room < i Then
                '            If NumberCVents(i, room) > 0 Then
                '                For k = 1 To NumberCVents(i, room)
                '                    DFW.WriteStartElement("vvent")
                '                    DFW.WriteElementString("room_upper", i)
                '                    DFW.WriteElementString("room_lower", room)
                '                    DFW.WriteElementString("id", k)
                '                    DFW.WriteElementString("Auto", CVentAuto(i, room, k))
                '                    DFW.WriteElementString("area", CVentArea(i, room, k))
                '                    DFW.WriteElementString("time_open", CVentOpenTime(i, room, k))
                '                    DFW.WriteElementString("time_close", CVentCloseTime(i, room, k))
                '                    DFW.WriteEndElement()
                '                Next k
                '            End If
                '        End If
                '    Next i
                'Next room
                'DFW.WriteEndElement()

                'this needs to come out
                'DFW.WriteStartElement("smoke_detectors")
                'For room = 1 To NumberRooms
                '    If HaveSD(room) = True Then
                '        DFW.WriteStartElement("smoke_detector")
                '        DFW.WriteElementString("room", room)
                '        'DFW.WriteElementString("present", HaveSD(room))
                '        DFW.WriteElementString("alarm_OD", SmokeOD(room))
                '        DFW.WriteElementString("SD_delay", SDdelay(room))
                '        DFW.WriteElementString("sensitivity", DetSensitivity(room))
                '        DFW.WriteElementString("radial_distance", SDRadialDist(room))
                '        DFW.WriteElementString("SD_depth", SDdepth(room))
                '        DFW.WriteElementString("SD_inside", SDinside(room))
                '        DFW.WriteElementString("specify_alarm_OD", SpecifyOD(room))
                '        DFW.WriteEndElement()
                '    End If
                'Next room
                'DFW.WriteEndElement()

                DFW.WriteEndElement()
                DFW.Close()
            End Using
            'save console log

            ContextMenuStrip2.Items(1).PerformClick()

            If mc_go = False Then
                If batch = False Then MsgBox(filename & " Successfully Saved", MB_ICONINFORMATION, ProgramTitle)
            End If

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.Exclamation, "Exception in Save_BaseFile_xml")
        End Try

    End Sub

    Private Sub OpenBaseModelToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenBaseModelToolStripMenuItem.Click

        Try
            OpenFileDialog2.CheckPathExists = True
            OpenFileDialog2.InitialDirectory = RiskDataDirectory

            OpenFileDialog2.Title = "Open Base File"
            OpenFileDialog2.Filter = "All Files (*.*)|*.*|Base Files (base*.xml)|base*.xml"
            OpenFileDialog2.FilterIndex = 2
            OpenFileDialog2.FileName = ""
            OpenFileDialog2.RestoreDirectory = True

            If Me.OpenFileDialog2.ShowDialog() = Windows.Forms.DialogResult.OK Then
                basefile = OpenFileDialog2.FileName
            ElseIf Me.OpenFileDialog2.ShowDialog() = Windows.Forms.DialogResult.Cancel Then
                Exit Sub
            End If

            Me.rtb_log.Clear() 'clear previous content in log screen

            'Dim stemp As String = ""
            'stemp = Me.txtBaseName.Text
            'stemp = stemp.Replace(" ", "_")
            'RiskDataDirectory = UserAppDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_" & Convert.ToString(stemp) & "\"
            RiskDataDirectory = Path.GetDirectoryName(basefile) & "\"
            Call Read_BaseFile_xml(basefile, False)

            'read inputs with distributions, not included in basemodel file
            Call DistributionClass.Read_Distributions()

            'check to see if input files exist in data folder

            If My.Computer.FileSystem.DirectoryExists(RiskDataDirectory) = True Then
                If My.Computer.FileSystem.FileExists(RiskDataDirectory & "sampledata.dat") = True Then
                    'read data

                    Call Read_OutputFile_xml(basefile)
                    Call Read_InputFile_dat()
                End If
            End If

            ProjectDirectory = RiskDataDirectory

            ToolStripStatusLabel1.Text = OpenFileDialog2.SafeFileName & " loaded"


            'DataDirectory = VB.Left(basefile, Len(basefile) - Len(Dir(basefile)))
            ChDir((My.Application.Info.DirectoryPath))
            'MessageBox.Show("File read - " & DataFile)
        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.Exclamation, "Exception in OpenBaseModelToolStripMenuItem_Click")
        End Try
    End Sub
    Public Sub Read_InputFile_dat()
        Dim i, j As Integer
        Dim numfiles As Integer

        Dim oSprinklers As New List(Of oSprinkler)
        oSprinklers = SprinklerDB.GetSprinklers2
        NumSprinklers = oSprinklers.Count

        Dim oSmokeDets As New List(Of oSmokeDet)
        oSmokeDets = SmokeDetDB.GetSmokDets
        NumSmokeDetectors = oSmokeDets.Count

        Dim oFans As New List(Of oFan)
        oFans = FanDB.GetFans
        NumFans = oFans.Count

        Dim ovents As New List(Of oVent)
        ovents = VentDB.GetVents
        number_vents = ovents.Count

        Dim ocvents As New List(Of oCVent)
        ocvents = VentDB.GetCVents
        number_cvents = ocvents.Count

        Dim oitems As New List(Of oItem)
        oitems = ItemDB.GetItemsv2
        NumItems = oitems.Count

        Try

            'count how many input files we have 
            numfiles = My.Computer.FileSystem.GetFiles(RiskDataDirectory, VB.FileIO.SearchOption.SearchTopLevelOnly, "input*.xml").Count
            IterationsCompleted = numfiles
            If numfiles = 0 Then Exit Sub

            Call Number_TimeSteps()
            Dim binaryin As New BinaryReader(New FileStream(RiskDataDirectory & "sampledata.dat", FileMode.Open, FileAccess.Read))

            '3d array holding variable, timestep, iteration
            ReDim mc_InteriorTemp(0 To numfiles - 1)
            ReDim mc_ExteriorTemp(0 To numfiles - 1)
            ReDim mc_RelativeHumidity(0 To numfiles - 1)
            ReDim mc_FLED(0 To numfiles - 1)
            ReDim mc_FLED_actual(0 To numfiles - 1)
            ReDim mc_SDReliability(0 To numfiles - 1)
            ReDim mc_FanReliability(0 To numfiles - 1)
            ReDim mc_SprReliability(0 To numfiles - 1)
            ReDim mc_SprSuppressProb(0 To numfiles - 1)
            ReDim mc_SprCooling(0 To numfiles - 1)
            ReDim mc_PeakHRR(0 To numfiles - 1)
            ReDim mc_AlphaT(0 To numfiles - 1)
            ReDim mc_HoC_fuel(0 To numfiles - 1)
            ReDim mc_presoot(0 To numfiles - 1)
            ReDim mc_preCO(0 To numfiles - 1)

            Dim ver As Double = binaryin.ReadDouble
            NumSprinklers = CInt(binaryin.ReadDouble)

            If ver > CDbl(2012.15) Then
                number_vents = CInt(binaryin.ReadDouble)
                If number_vents > 0 Then
                    ReDim mc_vent_height(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_vent_width(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_ventprob(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_HOreliability(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_integrity(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_maxopening(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_maxopeningtime(0 To number_vents - 1, 0 To numfiles - 1)
                    ReDim mc_gastemp(0 To number_vents - 1, 0 To numfiles - 1)
                Else
                    ReDim mc_vent_height(0, 0 To numfiles - 1)
                    ReDim mc_vent_width(0, 0 To numfiles - 1)
                    ReDim mc_ventprob(0, 0 To numfiles - 1)
                    ReDim mc_HOreliability(0, 0 To numfiles - 1)
                    ReDim mc_integrity(0, 0 To numfiles - 1)
                    ReDim mc_maxopening(0, 0 To numfiles - 1)
                    ReDim mc_maxopeningtime(0, 0 To numfiles - 1)
                    ReDim mc_gastemp(0, 0 To numfiles - 1)
                End If
            End If

            If ver > CDbl(2013.21) Then
                number_cvents = CInt(binaryin.ReadDouble)
                If number_cvents > 0 Then
                    ReDim mc_vent_area(0 To number_cvents - 1, 0 To numfiles - 1)
                    ReDim mc_integrity2(0 To number_cvents - 1, 0 To numfiles - 1)
                    ReDim mc_maxopening2(0 To number_cvents - 1, 0 To numfiles - 1)
                    ReDim mc_maxopeningtime2(0 To number_cvents - 1, 0 To numfiles - 1)
                    ReDim mc_gastemp2(0 To number_cvents - 1, 0 To numfiles - 1)
                Else
                    ReDim mc_vent_area(0, 0 To numfiles - 1)
                    ReDim mc_integrity2(0, 0 To numfiles - 1)
                    ReDim mc_maxopening2(0, 0 To numfiles - 1)
                    ReDim mc_maxopeningtime2(0, 0 To numfiles - 1)
                    ReDim mc_gastemp2(0, 0 To numfiles - 1)
                End If
            End If

            If ver > CDbl(2016.02) Then
                NumItems = CInt(binaryin.ReadDouble)
                If NumItems > 0 Then
                    ReDim mc_item_co2(0 To NumItems - 1, 0 To numfiles - 1)
                    ReDim mc_item_hoc(0 To NumItems - 1, 0 To numfiles - 1)
                    ReDim mc_item_hrrua(0 To NumItems - 1, 0 To numfiles - 1)
                    ReDim mc_item_lhog(0 To NumItems - 1, 0 To numfiles - 1)
                    ReDim mc_item_RLF(0 To NumItems - 1, 0 To numfiles - 1)
                    ReDim mc_item_soot(0 To NumItems - 1, 0 To numfiles - 1)
                Else
                    ReDim mc_item_co2(0, 0 To numfiles - 1)
                    ReDim mc_item_hoc(0, 0 To numfiles - 1)
                    ReDim mc_item_hrrua(0, 0 To numfiles - 1)
                    ReDim mc_item_lhog(0, 0 To numfiles - 1)
                    ReDim mc_item_RLF(0, 0 To numfiles - 1)
                    ReDim mc_item_soot(0, 0 To numfiles - 1)
                End If
            End If

            If NumberRooms > 0 Then
                ReDim mc_room_length(0 To NumberRooms - 1, 0 To numfiles - 1)
                ReDim mc_room_width(0 To NumberRooms - 1, 0 To numfiles - 1)
            End If

            If NumSprinklers > 0 Then
                ReDim mc_RadialDist(0 To NumSprinklers - 1, 0 To numfiles - 1)
                ReDim mc_RTI(0 To NumSprinklers - 1, 0 To numfiles - 1)
                ReDim mc_cfactor(0 To NumSprinklers - 1, 0 To numfiles - 1)
                ReDim mc_acttemp(0 To NumSprinklers - 1, 0 To numfiles - 1)
                ReDim mc_dist(0 To NumSprinklers - 1, 0 To numfiles - 1)
                ReDim mc_waterdensity(0 To NumSprinklers - 1, 0 To numfiles - 1)
            Else
                ReDim mc_RadialDist(0, 0 To numfiles - 1)
                ReDim mc_RTI(0, 0 To numfiles - 1)
                ReDim mc_cfactor(0, 0 To numfiles - 1)
                ReDim mc_acttemp(0, 0 To numfiles - 1)
                ReDim mc_dist(0, 0 To numfiles - 1)
                ReDim mc_waterdensity(0, 0 To numfiles - 1)
            End If

            If ver > CDbl(2012.38) Then
                If NumSmokeDetectors > 0 Then
                    ReDim mc_SDRadialDist(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                    ReDim mc_SDOD(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                    ReDim mc_SDZ(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                    ReDim mc_SDcharlength(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                Else
                    ReDim mc_SDRadialDist(0, 0 To numfiles - 1)
                    ReDim mc_SDOD(0, 0 To numfiles - 1)
                    ReDim mc_SDZ(0, 0 To numfiles - 1)
                    ReDim mc_SDcharlength(0, 0 To numfiles - 1)
                End If
            End If

            If NumFans > 0 Then
                ReDim mc_fanflowrate(0 To NumFans - 1, 0 To numfiles - 1)
                ReDim mc_fanstarttime(0 To NumFans - 1, 0 To numfiles - 1)
                ReDim mc_fanpressurelimit(0 To NumFans - 1, 0 To numfiles - 1)
                ReDim mc_fanIDreliability(0 To NumFans - 1, 0 To numfiles - 1)

            Else
                ReDim mc_fanflowrate(0, 0 To numfiles - 1)
                ReDim mc_fanstarttime(0, 0 To numfiles - 1)
                ReDim mc_fanpressurelimit(0, 0 To numfiles - 1)
                ReDim mc_fanIDreliability(0, 0 To numfiles - 1)
            End If

            For i = 1 To numfiles
                mc_InteriorTemp(i - 1) = binaryin.ReadDouble
                mc_ExteriorTemp(i - 1) = binaryin.ReadDouble
                mc_RelativeHumidity(i - 1) = binaryin.ReadDouble
                mc_FLED(i - 1) = binaryin.ReadDouble
                If ver > CDbl(2012.01) Then
                    mc_FLED_actual(i - 1) = binaryin.ReadDouble
                End If
                mc_HoC_fuel(i - 1) = binaryin.ReadDouble
                'mc_energyyield(0, i - 1) = binaryin.ReadDouble
                mc_presoot(i - 1) = binaryin.ReadDouble
                mc_preCO(i - 1) = binaryin.ReadDouble
                If ver > CDbl(2012.02) And ver < CDbl(2012.28) Then
                    'mc_LHOG(i - 1) = binaryin.
                    binaryin.Read()
                End If

                If ver > CDbl(2012.38) Then
                    mc_SDReliability(i - 1) = binaryin.ReadDouble
                End If
                If ver > CDbl(2012.43) Then
                    mc_FanReliability(i - 1) = binaryin.ReadDouble
                End If
                mc_SprReliability(i - 1) = binaryin.ReadDouble

                If ver > CDbl(2011.28) Then
                    mc_SprSuppressProb(i - 1) = binaryin.ReadDouble
                    mc_SprCooling(i - 1) = binaryin.ReadDouble
                End If

                If ver > CDbl(2012.09) Then
                    mc_PeakHRR(i - 1) = binaryin.ReadDouble
                    mc_AlphaT(i - 1) = binaryin.ReadDouble
                End If

                If NumSprinklers > 0 Then
                    For j = 1 To NumSprinklers
                        mc_RadialDist(j - 1, i - 1) = binaryin.ReadDouble
                        mc_RTI(j - 1, i - 1) = binaryin.ReadDouble
                        mc_cfactor(j - 1, i - 1) = binaryin.ReadDouble
                        mc_acttemp(j - 1, i - 1) = binaryin.ReadDouble
                        mc_dist(j - 1, i - 1) = binaryin.ReadDouble
                        mc_waterdensity(j - 1, i - 1) = binaryin.ReadDouble
                    Next
                End If

                If ver > CDbl(2012.38) Then
                    For j = 1 To NumSmokeDetectors
                        mc_SDRadialDist(j - 1, i - 1) = binaryin.ReadDouble
                        mc_SDOD(j - 1, i - 1) = binaryin.ReadDouble
                        mc_SDZ(j - 1, i - 1) = binaryin.ReadDouble
                        If ver > CDbl(2012.39) Then mc_SDcharlength(j - 1, i - 1) = binaryin.ReadDouble
                    Next
                End If

                If ver > CDbl(2012.43) Then
                    For j = 1 To NumFans
                        mc_fanflowrate(j - 1, i - 1) = binaryin.ReadDouble
                        mc_fanstarttime(j - 1, i - 1) = binaryin.ReadDouble
                        mc_fanpressurelimit(j - 1, i - 1) = binaryin.ReadDouble
                        mc_fanIDreliability(j - 1, i - 1) = binaryin.ReadDouble
                    Next
                End If

                If ver > CDbl(2012.15) Then
                    If number_vents > 0 Then
                        For j = 1 To number_vents
                            mc_vent_height(j - 1, i - 1) = binaryin.ReadDouble
                            mc_vent_width(j - 1, i - 1) = binaryin.ReadDouble
                        Next
                    End If
                End If
                If ver > CDbl(2012.16) Then
                    If number_vents > 0 Then
                        For j = 1 To number_vents
                            mc_ventprob(j - 1, i - 1) = binaryin.ReadDouble
                        Next
                    End If
                End If
                If ver > CDbl(2012.38) Then
                    If number_vents > 0 Then
                        For j = 1 To number_vents
                            mc_HOreliability(j - 1, i - 1) = binaryin.ReadDouble
                        Next
                    End If
                End If
                If ver > CDbl(2013.08) Then
                    If number_vents > 0 Then
                        For j = 1 To number_vents
                            mc_integrity(j - 1, i - 1) = binaryin.ReadDouble
                            mc_maxopening(j - 1, i - 1) = binaryin.ReadDouble
                            mc_maxopeningtime(j - 1, i - 1) = binaryin.ReadDouble
                        Next
                    End If
                End If
                If ver > CDbl(2013.21) Then
                    If number_vents > 0 Then
                        For j = 1 To number_vents
                            mc_gastemp(j - 1, i - 1) = binaryin.ReadDouble
                        Next
                    End If
                End If
                If ver > CDbl(2013.11) Then
                    For j = 1 To NumberRooms
                        mc_room_length(j - 1, i - 1) = binaryin.ReadDouble
                        mc_room_width(j - 1, i - 1) = binaryin.ReadDouble
                    Next
                End If
                If ver > CDbl(2016.02) Then
                    For j = 1 To NumItems
                        mc_item_co2(j - 1, i - 1) = binaryin.ReadDouble
                        mc_item_hoc(j - 1, i - 1) = binaryin.ReadDouble
                        mc_item_hrrua(j - 1, i - 1) = binaryin.ReadDouble
                        mc_item_lhog(j - 1, i - 1) = binaryin.ReadDouble
                        mc_item_RLF(j - 1, i - 1) = binaryin.ReadDouble
                        mc_item_soot(j - 1, i - 1) = binaryin.ReadDouble
                    Next
                End If
            Next
            binaryin.Close()
        Catch ex As Exception
            MsgBox(Err.Description & " Line " & Err.Erl, MsgBoxStyle.Exclamation, "Exception in Read_InputFile_dat ")
        End Try
    End Sub

    Public Sub Read_InputFile_xml(ByRef opendatafile As String)

        'read one input file
        Dim myfile, dummy As String
        Dim i As Integer, id As Integer

        Try

            If opendatafile <> "" Then
                'returns filename without path if it exists
                myfile = Dir(opendatafile)
                If myfile <> "" Then
                    Dim myXmlSettings As New XmlReaderSettings()
                    myXmlSettings.IgnoreComments = True
                    myXmlSettings.IgnoreWhitespace = True
                    'myXmlSettings.LineNumberOffset = 100

                    Using DFR As XmlReader = XmlReader.Create(opendatafile, myXmlSettings)
                        DFR.ReadToDescendant("general_settings")
                        Dim Ver As Single = DFR.ReadElementString()

                        DFR.MoveToContent()
                        DFR.ReadToDescendant("fires")
                        DFR.ReadToFollowing("number_objects")
                        n_max = DFR.ReadElementString()

                        ReDim Preserve item_location(0 To 8, 0 To n_max) 'array defined in Global.vb
                        ReDim ObjLabel(0 To n_max)
                        ReDim ObjectDescription(0 To n_max)
                        ReDim ObjectItemID(0 To n_max)

                        id = DFR.Item("id")

                        ObjectItemID(1) = id
                        If Ver > 2012.04 Then
                            ObjectDescription(1) = DFR.Item("description")
                            ObjLabel(1) = DFR.Item("userlabel")
                        End If
                        DFR.ReadStartElement("fire")

                        For i = 1 To n_max

                            DFR.ReadToFollowing("obj_length")
                            Dim length As Single = DFR.ReadElementString() 'length
                            Dim width As Single = DFR.ReadElementString() 'width
                            dummy = DFR.ReadElementString() 'height
                            Dim x As Single = DFR.ReadElementString() 'x
                            item_location(1, i) = x + length / 2
                            Dim y As Single = DFR.ReadElementString() 'y
                            item_location(2, i) = y + width / 2

                            dummy = DFR.ReadElementString()
                            dummy = DFR.ReadElementString()
                            If Ver > 2011.01 Then dummy = DFR.ReadElementString() 'rlf 
                            If Ver > 2011.26 Then dummy = DFR.ReadElementString() 'windeffect 

                            If Ver > 2012.05 Then
                                dummy = DFR.ReadElementString() 'const A 
                                dummy = DFR.ReadElementString() 'const B
                                If Ver > 2011.23 Then dummy = DFR.ReadElementString() 'hrrua 
                                dummy = DFR.ReadElementString() 'lhog
                            End If

                            If Ver > 2011.04 Then
                                item_location(3, i) = DFR.ReadElementString() 'x1
                                item_location(4, i) = DFR.ReadElementString() 'x2
                                item_location(5, i) = DFR.ReadElementString() 'y1
                                item_location(6, i) = DFR.ReadElementString() 'y2
                                item_location(8, i) = i
                            End If

                            DFR.ReadToFollowing("HRR")
                            dummy = DFR.ReadElementString()

                            If Ver > 2012.27 Then
                                dummy = DFR.ReadElementString()
                                dummy = DFR.ReadElementString()
                            End If

                            DFR.ReadEndElement()

                            If i < n_max Then
                                id = DFR.Item("id")
                                ObjectItemID(i + 1) = id
                                If Ver > 2012.04 Then
                                    ObjectDescription(i + 1) = DFR.Item("description")
                                    ObjLabel(i + 1) = DFR.Item("userlabel")
                                    ' DFR.ReadToNextSibling("fire")
                                    DFR.ReadStartElement("fire")
                                End If
                            End If

                        Next

                    End Using
                End If
            End If
            'k = k + 1
            'End While

            NumberObjects = n_max

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description & " Line " & Err.Erl, MsgBoxStyle.Exclamation, "Exception in Read_InputFile_xml ")
        End Try
    End Sub
    Public Sub Retrieve_ign_times(ByVal opendatafile As String, ByVal itime() As Single, ByVal ignmode() As String)
        'read item ignition times from output file

        Dim myfile, dummy As String
        Dim i As Integer

        Try

            If opendatafile <> "" Then
                'returns filename without path if it exists
                myfile = Dir(opendatafile)
                If myfile <> "" Then
                    Dim myXmlSettings As New XmlReaderSettings()
                    myXmlSettings.IgnoreComments = True
                    myXmlSettings.IgnoreWhitespace = True

                    Using DFR As XmlReader = XmlReader.Create(opendatafile, myXmlSettings)
                        DFR.MoveToContent()
                        DFR.ReadToDescendant("items")
                        DFR.ReadToDescendant("secondary_item_ignition_time")

                        For i = 2 To n_max

                            dummy = DFR.Item("id")
                            itime(i) = DFR.Item("value")
                            dummy = DFR.Item("units")
                            ignmode(i) = DFR.Item("ignmode")
                            DFR.ReadStartElement("secondary_item_ignition_time")

                            'If i < n_max Then DFR.ReadToNextSibling("secondary_item_ignition_time")
                        Next

                    End Using
                End If
            End If

        Catch ex As Exception
            MsgBox(Err.Description & " Line " & Err.Erl, MsgBoxStyle.Exclamation, "Exception in Retrieve_ign_times ")
        End Try
    End Sub

    Public Sub Read_OutputFile_xml(ByRef basefile As String)
        Dim myfile, dummy, dummy1, dummy2 As String
        Dim id As String
        Dim ver As String = ""
        Dim runtime As Double
        Dim i, j, k, room, counter As Integer
        Dim opendatafile As String = "output.xml"

        Try
            'extract the output interval from the base file
            If basefile <> "" Then
                Dim myXmlSettings As New XmlReaderSettings()
                myXmlSettings.IgnoreComments = True
                myXmlSettings.IgnoreWhitespace = True

                Using DFR As XmlReader = XmlReader.Create(basefile, myXmlSettings)
                    DFR.Read()
                    DFR.ReadStartElement("simulation")

                    DFR.ReadStartElement("general_settings")
                    ver = DFR.ReadElementString()
                    VM2 = DFR.ReadElementContentAsString
                    TalkToEVACNZ = DFR.ReadElementContentAsString
                    dummy = DFR.ReadElementString()
                    'If dummy <> "montecarlo" Then
                    '    VM2 = dummy
                    '    dummy = DFR.ReadElementString()
                    'End If

                    Description = DFR.ReadElementString()
                    NumberIterations = DFR.ReadElementString()
                    OutputInterval = DFR.ReadElementString()
                End Using
            End If

            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Ceiling((SimTime / OutputInterval))

            Dim numfiles As Integer
            numfiles = My.Computer.FileSystem.GetFiles(RiskDataDirectory, VB.FileIO.SearchOption.SearchTopLevelOnly, "output*.xml").Count

            '3d array holding variable, timestep, iteration
            ReDim tempdatain(0 To numfiles - 1)
            ReDim out_data(0 To 7, 0 To counter + 1, 0 To numfiles - 1)
            ReDim tempdata(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim cdftempdata(0 To NumberRooms, 0 To counter, 0 To numfiles - 1)
            ReDim cdftempdata2(0 To NumberRooms, 0 To counter, 0 To 100)
            ReDim mc_ULTemp(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_HRR(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_Time(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_LLTemp(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_LayerHeight(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_FEDgas(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_FEDheat(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_visi(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_FLED(0 To numfiles - 1)
            ReDim mc_FLED_actual(0 To numfiles - 1)
            ReDim alphaTfitted(0 To 4, 0 To numfiles - 1)
            ReDim timeequiv(0 To 4, 0 To numfiles - 1)
            'ReDim tempdata_SPR(0 To 4, 0 To counter + 1, 0 To numfiles - 1)
            ReDim mc_sprnum(0 To NumberRooms, 0 To counter + 1, 0 To numfiles - 1)

            Dim modnames(0 To numfiles) As String

            k = 0
            Dim tmp As String

            For Each foundFile As String In My.Computer.FileSystem.GetFiles(RiskDataDirectory, VB.FileIO.SearchOption.SearchTopLevelOnly, "output*.xml")

                tmp = My.Computer.FileSystem.GetName(foundFile)
                tmp = tmp.Replace(".xml", "")
                tmp = tmp.Replace("output", "")
                modnames(CInt(tmp) - 1) = foundFile
                k = k + 1
            Next

            'modnames(k) = Dir(RiskDataDirectory & "output*.xml")
            'For k = 1 To NumberIterations - 1
            'modnames(k) = Dir()
            'Next
            k = 0

            While modnames(k) <> Nothing
                opendatafile = modnames(k)

                If opendatafile <> "" Then
                    'returns filename without path if it exists
                    myfile = Dir(opendatafile)
                    If myfile <> "" Then
                        Dim myXmlSettings As New XmlReaderSettings()
                        myXmlSettings.IgnoreComments = True
                        myXmlSettings.IgnoreWhitespace = True

                        Using DFR As XmlReader = XmlReader.Create(opendatafile, myXmlSettings)
                            DFR.Read()
                            DFR.ReadStartElement("output")
                            id = DFR.Item("id")

                            runtime = DFR.Item("runtime")


                            dummy = DFR.Item("sprinkler_activation_time")

                            dummy = DFR.Item("num_sprinklers_activated")

                            If CSng(ver) > 2012.01 Then
                                mc_FLED(k) = DFR.Item("sampled_FLED")
                                mc_FLED_actual(k) = DFR.Item("actual_FLED")
                            End If
                            If CSng(ver) > 2014.15 Then
                                timeequiv(0, k) = DFR.Item("time_equiv_vm") 'ceiling based on NHL
                                timeequiv(1, k) = DFR.Item("time_equiv_c") 'ceiling based on NHL
                                timeequiv(2, k) = DFR.Item("time_equiv_uw") 'u wall based on NHL
                                'timeequiv(3, k) = DFR.Item("time_equiv_lw") 'l wall based on NHL
                                timeequiv(4, k) = DFR.Item("time_equiv_f") 'floor based on NHL
                            End If
                            If CSng(ver) > 2012.12 Then
                                alphaTfitted(0, k) = DFR.Item("fitted_alpha")
                            End If
                            If CSng(ver) > 2012.13 Then
                                alphaTfitted(1, k) = DFR.Item("HRR_at_FO")
                                alphaTfitted(2, k) = DFR.Item("time_at_FO")
                                alphaTfitted(3, k) = DFR.Item("HRR_at_VL")
                                alphaTfitted(4, k) = DFR.Item("time_at_VL")
                            End If
                            If CSng(ver) > 2012.51 Then
                                dummy = DFR.Item("heat_detector_activation_time")
                            End If
                            DFR.ReadStartElement("run")

                            NumSprinklers = DFR.Item("number")
                            DFR.ReadStartElement("responsetime")
                            Dim sprtemp(0 To NumSprinklers - 1) As Single
                            ReDim tempdata_SPR(0 To NumSprinklers - 1, 0 To numfiles - 1)

                            If mc_sat IsNot Nothing Then
                                If mc_sat.Length = NumSprinklers * numfiles Then
                                    ReDim Preserve mc_sat(0 To NumSprinklers - 1, 0 To numfiles - 1) 'using first dimension for #operating sprinklers
                                Else
                                    ReDim mc_sat(0 To NumSprinklers - 1, 0 To numfiles - 1) 'using first dimension for #operating sprinklers
                                End If
                            Else
                                ReDim mc_sat(0 To NumSprinklers - 1, 0 To numfiles - 1) 'using first dimension for #operating sprinklers
                            End If


                            For i = 1 To NumSprinklers
                                dummy = DFR.Item("id")
                                sprtemp(i - 1) = DFR.Item("value") 'this is the operating time of each individual sprinkler

                                dummy = DFR.Item("units")
                                DFR.ReadStartElement("sprinkler")
                            Next
                            If NumSprinklers > 0 Then DFR.ReadEndElement()

                            Array.Sort(sprtemp) 'sorts ascending

                            For m = 1 To NumSprinklers
                                If sprtemp(m - 1) = 0 Then
                                    mc_sat(m - 1, k) = SimTime 'sprinkler did not operate
                                Else
                                    mc_sat(m - 1, k) = sprtemp(m - 1) 'time of operating sprinkler
                                End If

                            Next

                            If mc_sdat IsNot Nothing Then
                                If mc_sdat.Length = NumSmokeDetectors * numfiles Then
                                    ReDim Preserve mc_sdat(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                                Else
                                    ReDim mc_sdat(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                                End If
                            Else
                                ReDim mc_sdat(0 To NumSmokeDetectors - 1, 0 To numfiles - 1)
                            End If

                            If DFR.Name = "smoke_detectors" Then
                                DFR.ReadStartElement("smoke_detectors")
                                If DFR.Name = "smoke_detector" Then
                                    While DFR.Name = "smoke_detector"
                                        dummy1 = DFR.Item("id")
                                        dummy = DFR.Item("units")
                                        dummy2 = DFR.Item("responsetime")
                                        DFR.ReadStartElement("smoke_detector")

                                        mc_sdat(CInt(dummy1) - 1, k) = CDbl(dummy2)

                                    End While
                                    DFR.ReadEndElement()
                                End If
                            End If

                            If DFR.Name = "fans" Then
                                DFR.ReadStartElement("fans")
                                If DFR.Name = "fan" Then
                                    While DFR.Name = "fan"
                                        dummy = DFR.Item("id")
                                        dummy = DFR.Item("units")
                                        dummy = DFR.Item("responsetime")
                                        DFR.ReadStartElement("fan")
                                    End While
                                    DFR.ReadEndElement()
                                End If
                            End If

                            ' NumSmokeDetectors = DFR.Item("value")
                            'DFR.ReadStartElement("smoke_detectors")
                            'For i = 1 To NumSmokeDetectors
                            '    dummy = DFR.Item("id")
                            '    dummy = DFR.Item("units")
                            '    dummy = DFR.Item("responsetime")
                            '    DFR.ReadStartElement("smoke_detector")
                            'Next
                            'If NumSmokeDetectors > 0 Then DFR.ReadEndElement()

                            '' NumFans = DFR.Item("value")
                            'DFR.ReadStartElement("fans")
                            'For i = 1 To NumFans
                            '    dummy = DFR.Item("id")
                            '    dummy = DFR.Item("units")
                            '    dummy = DFR.Item("responsetime")
                            '    DFR.ReadStartElement("fan")
                            'Next
                            'If NumFans > 0 Then DFR.ReadEndElement()

                            NumberObjects = DFR.Item("value")
                            DFR.ReadStartElement("items")
                            For i = 2 To NumberObjects

                                dummy = DFR.Item("id")
                                If DFR.AttributeCount = 4 Then dummy = DFR.Item("description")
                                dummy = DFR.Item("value")
                                dummy = DFR.Item("units")
                                dummy = DFR.Item("ignmode")
                                DFR.ReadStartElement("secondary_item_ignition_time")
                            Next
                            If NumberObjects > 1 Then DFR.ReadEndElement()


                            For i = 1 To NumberRooms
                                room = CInt(DFR.Item("id"))
                                DFR.ReadStartElement("room")
                                j = 0

                                Do While (DFR.Name = "time")
                                    If mc_Time.GetUpperBound(1) < j Then Exit Try

                                    mc_Time(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("time")

                                    mc_HRR(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("HeatRelease")

                                    mc_LayerHeight(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("layerheight")

                                    mc_ULTemp(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("uppertemp")

                                    mc_LLTemp(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("lowertemp")

                                    mc_FEDgas(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("FEDSum")

                                    mc_visi(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("Visibility")

                                    mc_FEDheat(i, j, k) = DFR.Item("value")
                                    dummy = DFR.Item("units")
                                    DFR.ReadStartElement("FEDRadSum")

                                    DFR.ReadEndElement() 'time

                                    For sprcount = 1 To NumSprinklers
                                        If j * OutputInterval >= sprtemp(sprcount - 1) Then
                                            mc_sprnum(i, j, k) = mc_sprnum(i, j, k) + 1
                                        End If
                                    Next

                                    j = j + 1
                                Loop

                                DFR.ReadEndElement() 'room

                            Next
                            'DFR.ReadEndElement()
                            'DFR.ReadEndElement()
                        End Using
                    End If
                End If
                k = k + 1
            End While

        Catch ex As Exception
            MsgBox(Err.Description & " Line " & Err.Erl, MsgBoxStyle.Exclamation, "Exception in Read_OutputFile_xml ")
        End Try
    End Sub
    Public Sub Read_BaseFile_xml(ByRef opendatafile As String, ByVal batch As Boolean)

        ' Changes the CurrentCulture of the current thread to en-US.
        Thread.CurrentThread.CurrentCulture = New CultureInfo("en-US", False)

        Dim myfile As String
        Dim k, i, id, plume As Short
        Dim SuppressCeiling, HCNcalc As Boolean
        Dim dummy As String = ""
        Dim room As Short
        Dim post As Boolean
        Dim LEsolver As String = ""
        Dim matname, firename, time_tmp, hrr_tmp As String
        Dim kmax(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1) As Integer
        Dim kvmax(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1) As Integer
        Dim orooms As List(Of oRoom)
        Dim oroomdistributions As List(Of oDistribution)

        Try

            If opendatafile <> "" Then

                'returns filename without path if it exists
                'myfile = Dir(opendatafile)

                myfile = Path.GetFileName(opendatafile)

                If myfile <> "" Then

                    New_File()

                    Dim myXmlSettings As New XmlReaderSettings()
                    myXmlSettings.IgnoreComments = True
                    myXmlSettings.IgnoreWhitespace = True

                    Using DFR As XmlReader = XmlReader.Create(opendatafile, myXmlSettings)
                        DFR.Read()
                        DFR.ReadStartElement("simulation")

                        DFR.ReadStartElement("general_settings")
                        ModelVersion = DFR.ReadElementString()


                        If ModelVersion = CSng(Version) Then
                            upgrade = False
                        Else
                            upgrade = True
                        End If

                        If ModelVersion > CSng(2013.11) Then
                            orooms = RoomDB.GetRooms
                            oroomdistributions = RoomDB.GetRoomDistributions
                            NumberRooms = orooms.Count
                            Resize_Rooms()
                            frmRoomList.fillroomarrays(orooms)
                        End If

                        VM2 = DFR.ReadElementString()

                        If VM2 = True Then
                            MDIFrmMain.NZBCVM2ToolStripMenuItem.Checked = True
                            MDIFrmMain.RiskSimulatorToolStripMenuItem.Checked = False
                        Else
                            MDIFrmMain.NZBCVM2ToolStripMenuItem.Checked = False
                            MDIFrmMain.RiskSimulatorToolStripMenuItem.Checked = True
                        End If
                        Call MDIFrmMain.VM2setup()

                        If ModelVersion > CSng(2015.04) Then
                            TalkToEVACNZ = DFR.ReadElementString()
                            MDIFrmMain.TalkToEVACNZToolStripMenuItem.Checked = TalkToEVACNZ
                        End If

                        dummy = DFR.ReadElementString()

                        'dummy = DFR.ReadElementString()
                        'If dummy <> "montecarlo" Then
                        '    VM2 = dummy
                        '    If VM2 = True Then
                        '        MDIFrmMain.NZBCVM2ToolStripMenuItem.Checked = True
                        '        MDIFrmMain.RiskSimulatorToolStripMenuItem.Checked = False
                        '    Else
                        '        MDIFrmMain.NZBCVM2ToolStripMenuItem.Checked = False
                        '        MDIFrmMain.RiskSimulatorToolStripMenuItem.Checked = True
                        '    End If
                        '    'Call MDIFrmMain.VM2setup()
                        '    dummy = DFR.ReadElementString()
                        'End If

                        Description = DFR.ReadElementString()
                        Me.txtNumberIterations.Text = DFR.ReadElementString()
                        Me.txtOutputInterval.Text = DFR.ReadElementString()
                        If ModelVersion > CSng(2012.01) Then
                            ventclearance = DFR.ReadElementString()
                            frmPopulate.txtVentClearance.Text = ventclearance
                            gridsize = DFR.ReadElementString()
                            frmPopulate.txtGridSize.Text = gridsize
                        End If
                        If ModelVersion >= CSng(2019.04) Then
                            fixitem1 = DFR.ReadElementString()
                            frmPopulate.chk_fix_item.Checked = fixitem1
                        End If
                        If ModelVersion >= CSng(2019.041) Then
                            ISD_windspeed = DFR.ReadElementString()
                            frmPopulate.txtWindSpeed.Text = ISD_windspeed
                            ISD_winddir = DFR.ReadElementString()
                            frmPopulate.txt_winddir.Text = ISD_winddir
                        End If
                        dummy = DFR.ReadElementString()
                        Me.txtBaseName.Text = dummy.Replace("basemodel_", "")

                        If ModelVersion > CSng(2011.07) And ModelVersion <= CSng(2012.38) Then
                            'Sprinkler Reliability
                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("spr_reliability")
                        End If

                        If ModelVersion > CSng(2011.22) Then
                            'probability no. sprinklers needed to suppress fire
                            sprnum_prob(0) = DFR.Item("sprnum1")
                            sprnum_prob(1) = DFR.Item("sprnum2")
                            sprnum_prob(2) = DFR.Item("sprnum3")
                            sprnum_prob(3) = DFR.Item("sprnum4")
                            DFR.ReadStartElement("spr_num_prob")
                        End If

                        If ModelVersion < CSng(2012.24) Then 'content moved to distributions.xml
                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("temp_interior")

                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("temp_exterior")

                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value") * 100
                            dummy = DFR.Item("mean") * 100
                            dummy = DFR.Item("variance") * 10000
                            dummy = DFR.Item("lbound") * 100
                            dummy = DFR.Item("ubound") * 100
                            DFR.ReadStartElement("rel_humidity")
                        End If

                        SimTime = DFR.ReadElementString()
                        DisplayInterval = DFR.ReadElementString()

                        Ceilingnodes = DFR.ReadElementString()
                        Wallnodes = DFR.ReadElementString()
                        Floornodes = DFR.ReadElementString()
                        Enhance = DFR.ReadElementString()
                        JobNumber = DFR.ReadElementString()
                        ExcelInterval = DFR.ReadElementString()
                        Timestep = DFR.ReadElementString()
                        Error_Control = DFR.ReadElementContentAsDouble
                        If ModelVersion > CSng(2012.46) Then Error_Control_ventflow = DFR.ReadElementContentAsDouble


                        FireDatabaseName = DFR.ReadElementString()
                        MaterialsDatabaseName = DFR.ReadElementString()
                        If ModelVersion > CSng(2019.0) Then
                            FireDatabaseName = UserDbasesFolder & FireDatabaseName
                            MaterialsDatabaseName = UserDbasesFolder & MaterialsDatabaseName
                        End If

                        cjModel = DFR.ReadElementString()
                        ventlog = DFR.ReadElementString()
                        LEsolver = DFR.ReadElementString()
                        nowallflow = DFR.ReadElementString()
                        sprink_mode = DFR.ReadElementString()
                        autopopulate = DFR.ReadElementString()

                        If autopopulate = True Then
                            frmPopulate.RadioButton1.Checked = True
                        Else
                            frmPopulate.RadioButton2.Checked = True
                        End If
                        If ModelVersion > CSng(2011.08) Then
                            calc_sprdist = DFR.ReadElementString()
                            If calc_sprdist = True Then
                                frmSprinklerList.chkCalcSprinkRadialDist.Checked = True
                            Else
                                frmSprinklerList.chkCalcSprinkRadialDist.Checked = False
                            End If
                        End If
                        If ModelVersion > CSng(2012.38) Then
                            calc_sddist = DFR.ReadElementString()
                            If calc_sddist = True Then
                                frmSmokeDetList.chkCalcSRadialDist.Checked = True
                            Else
                                frmSmokeDetList.chkCalcSRadialDist.Checked = False
                            End If
                        End If
                        ignitetargets = DFR.ReadElementString()
                        If ignitetargets = True Then
                            chkIgniteTargets.Checked = CHECKED
                        Else
                            chkIgniteTargets.Checked = UNCHECKED
                        End If

                        If ModelVersion > CSng(2011.05) Then firstitem = DFR.ReadElementString
                        If ModelVersion > CSng(2012.09) Then
                            StoreHeight = DFR.ReadElementString
                            useT2fire = DFR.ReadElementString
                            usepowerlawdesignfire = DFR.ReadElementString
                        End If
                        If ModelVersion > CSng(2016.03) Then
                            FuelResponseEffects = DFR.ReadElementString
                        End If
                        If ModelVersion > CSng(2017.02) Then
                            autosavepdf = DFR.ReadElementString
                            If autosavepdf = True Then
                                ChkAutosavePdf.Checked = True
                            Else
                                ChkAutosavePdf.Checked = False
                            End If
                        End If
                        If ModelVersion > CSng(2017.051) Then
                            autosaveXL = DFR.ReadElementString
                            If autosaveXL = True Then
                                chkAutosaveXL.Checked = True
                            Else
                                chkAutosaveXL.Checked = False
                            End If
                        End If
                        If ModelVersion > CSng(2012.09) Then
                            frmPowerlaw.txtStoreHeight.Text = CStr(StoreHeight)

                            If useT2fire = True Then
                                frmPowerlaw.optAlpha2.Checked = True
                                frmPowerlaw.txtStoreHeight.Enabled = False
                                frmPowerlaw.Label1.Text = "alpha (kW/s2)"
                            Else
                                frmPowerlaw.optAlpha3.Checked = True
                                frmPowerlaw.txtStoreHeight.Enabled = True
                                frmPowerlaw.Label1.Text = "alpha (kW/s3)"
                            End If

                        End If

                        DFR.ReadEndElement() 'clear </general_settings>
                        If ModelVersion <= CSng(2013.11) Then
                            NumberRooms = CInt(DFR.Item("number_rooms"))
                        Else
                            dummy = CInt(DFR.Item("number_rooms"))
                        End If

                        If ModelVersion > CSng(2012.47) Then
                            fireroom = CInt(DFR.Item("fire_room"))
                        End If

                        Call MDIFrmMain.VM2setup()

                        If ModelVersion > CSng(2013.11) Then

                            'room data is now in rooms.xml file
                            'NumberRooms = orooms.Count
                            Resize_Rooms()

                            For Each oroom In orooms
                                id = oroom.num
                                For Each oDistribution In oroomdistributions
                                    If oDistribution.varname = "width" And oDistribution.id = id Then
                                        RoomWidth(id) = oDistribution.varvalue
                                    End If
                                    If oDistribution.varname = "length" And oDistribution.id = id Then
                                        RoomLength(id) = oDistribution.varvalue
                                    End If
                                Next

                                RoomHeight(id) = oroom.maxheight
                                MinStudHeight(id) = oroom.minheight
                                RoomAbsX(id) = oroom.absx
                                RoomAbsY(id) = oroom.absy
                                FloorElevation(id) = oroom.elevation
                                RoomDescription(id) = oroom.description
                                If RoomHeight(id) = MinStudHeight(id) Then
                                    CeilingSlope(id) = False
                                Else
                                    CeilingSlope(id) = True
                                End If

                            Next
                            'room data end 
                        Else
                            Resize_Rooms()
                        End If

                        DFR.ReadStartElement("rooms")

                        For i = 1 To NumberRooms
                            room = CInt(DFR.Item("id"))

                            If ModelVersion > CSng(2013.11) Then
                                dummy = CBool(DFR.Item("ceilingslope")) 'CeilingSlope(room)
                                DFR.ReadStartElement("room")
                                dummy = DFR.ReadElementString() 'RoomWidth(room)
                                dummy = DFR.ReadElementString() 'RoomLength(room)
                                dummy = DFR.ReadElementString() 'RoomHeight(room)
                                dummy = DFR.ReadElementString() 'RoomDescription(room)
                                dummy = DFR.ReadElementString() 'MinStudHeight(room) 
                                dummy = DFR.ReadElementString() 'FloorElevation(room)
                                dummy = DFR.ReadElementString() 'RoomAbsX(room)
                                dummy = DFR.ReadElementString() 'RoomAbsY(room)
                            Else
                                CeilingSlope(room) = CBool(DFR.Item("ceilingslope"))
                                DFR.ReadStartElement("room")
                                RoomWidth(room) = DFR.ReadElementString()
                                RoomLength(room) = DFR.ReadElementString()
                                RoomHeight(room) = DFR.ReadElementString()
                                RoomDescription(room) = DFR.ReadElementString()
                                MinStudHeight(room) = DFR.ReadElementString()
                                FloorElevation(room) = DFR.ReadElementString()
                                If ModelVersion > CSng(2012.2) Then
                                    RoomAbsX(room) = DFR.ReadElementString()
                                    RoomAbsY(room) = DFR.ReadElementString()
                                End If

                                'orooms = RoomDB.GetRooms
                                'oroomdistributions = RoomDB.GetRoomDistributions
                                'Resize_Rooms()
                                'frmRoomList.fillroomarrays(orooms)

                            End If

                            TwoZones(room) = DFR.ReadElementString()

                            DFR.ReadStartElement("wall_lining")
                            WallSurface(room) = DFR.ReadElementString()
                            WallThickness(room) = DFR.ReadElementString()
                            WallConductivity(room) = DFR.ReadElementString()
                            WallSpecificHeat(room) = DFR.ReadElementString()
                            WallDensity(room) = DFR.ReadElementString()
                            Surface_Emissivity(2, room) = DFR.ReadElementString()
                            Surface_Emissivity(3, room) = Surface_Emissivity(2, room)
                            WallConeDataFile(room) = DFR.ReadElementString()
                            WallTSMin(room) = DFR.ReadElementString()
                            WallFlameSpreadParameter(room) = DFR.ReadElementString()
                            WallEffectiveHeatofCombustion(room) = DFR.ReadElementString()
                            WallSootYield(room) = DFR.ReadElementString()
                            WallCO2Yield(room) = DFR.ReadElementString()
                            WallH2OYield(room) = DFR.ReadElementString()
                            WallHCNYield(room) = DFR.ReadElementString()
                            DFR.ReadEndElement() 'clear </wall_lining>

                            HaveWallSubstrate(room) = CBool(DFR.Item("present"))
                            DFR.ReadStartElement("wall_substrate")
                            If HaveWallSubstrate(room) = True Then
                                WallSubstrate(room) = DFR.ReadElementString()
                                WallSubThickness(room) = DFR.ReadElementString()
                                WallSubConductivity(room) = DFR.ReadElementString()
                                WallSubSpecificHeat(room) = DFR.ReadElementString()
                                WallSubDensity(room) = DFR.ReadElementString()
                                DFR.ReadEndElement() 'clear </wall_substrate>
                            End If

                            DFR.ReadStartElement("ceiling_lining")
                            CeilingSurface(room) = DFR.ReadElementString()
                            CeilingThickness(room) = DFR.ReadElementString()
                            CeilingConductivity(room) = DFR.ReadElementString()
                            CeilingSpecificHeat(room) = DFR.ReadElementString()
                            CeilingDensity(room) = DFR.ReadElementString()
                            Surface_Emissivity(1, room) = DFR.ReadElementString()
                            CeilingConeDataFile(room) = DFR.ReadElementString()
                            CeilingEffectiveHeatofCombustion(room) = DFR.ReadElementString()
                            CeilingSootYield(room) = DFR.ReadElementString()
                            CeilingCO2Yield(room) = DFR.ReadElementString()
                            CeilingH2OYield(room) = DFR.ReadElementString()
                            CeilingHCNYield(room) = DFR.ReadElementString()
                            DFR.ReadEndElement() 'clear </ceiling_lining>

                            HaveCeilingSubstrate(room) = CBool(DFR.Item("present"))
                            DFR.ReadStartElement("ceiling_substrate")
                            If HaveCeilingSubstrate(room) = True Then
                                CeilingSubstrate(room) = DFR.ReadElementString()
                                CeilingSubThickness(room) = DFR.ReadElementString()
                                CeilingSubConductivity(room) = DFR.ReadElementString()
                                CeilingSubSpecificHeat(room) = DFR.ReadElementString()
                                CeilingSubDensity(room) = DFR.ReadElementString()
                                DFR.ReadEndElement() 'clear </ceiling_substrate>
                            End If

                            DFR.ReadStartElement("floor_lining")
                            FloorSurface(room) = DFR.ReadElementString()
                            FloorThickness(room) = DFR.ReadElementString()
                            FloorConductivity(room) = DFR.ReadElementString()
                            FloorSpecificHeat(room) = DFR.ReadElementString()
                            FloorDensity(room) = DFR.ReadElementString()
                            Surface_Emissivity(4, room) = DFR.ReadElementString()
                            FloorConeDataFile(room) = DFR.ReadElementString()
                            FloorTSMin(room) = DFR.ReadElementString()
                            FloorFlameSpreadParameter(room) = DFR.ReadElementString()
                            FloorEffectiveHeatofCombustion(room) = DFR.ReadElementString()
                            FloorSootYield(room) = DFR.ReadElementString()
                            FloorCO2Yield(room) = DFR.ReadElementString()
                            FloorH2OYield(room) = DFR.ReadElementString()
                            FloorHCNYield(room) = DFR.ReadElementString()
                            DFR.ReadEndElement() 'clear </floor_lining>

                            HaveFloorSubstrate(room) = CBool(DFR.Item("present"))
                            DFR.ReadStartElement("floor_substrate")
                            If HaveFloorSubstrate(room) = True Then
                                FloorSubstrate(room) = DFR.ReadElementString()
                                FloorSubThickness(room) = DFR.ReadElementString()
                                FloorSubConductivity(room) = DFR.ReadElementString()
                                FloorSubSpecificHeat(room) = DFR.ReadElementString()
                                FloorSubDensity(room) = DFR.ReadElementString()
                                DFR.ReadEndElement() 'clear </floor_substrate>
                            End If

                            DFR.ReadEndElement() 'clear </room>

                        Next i

                        DFR.ReadEndElement() 'clear </rooms>

                        If ModelVersion <= CSng(2013.11) Then
                            orooms = RoomDB.GetRooms
                            oroomdistributions = RoomDB.GetRoomDistributions
                            Resize_Rooms()
                            frmRoomList.fillroomarrays(orooms)
                        End If

                        corner = CShort(DFR.Item("algorithm"))
                        DFR.ReadStartElement("flamespread")
                        If corner > 0 Then
                            SuppressCeiling = DFR.ReadElementString()
                            FlameAreaConstant = DFR.ReadElementString()
                            FlameLengthPower = DFR.ReadElementString()
                            BurnerWidth = DFR.ReadElementString()

                            WallHeatFlux = DFR.ReadElementString()
                            CeilingHeatFlux = DFR.ReadElementString()
                            IgniteNextRoom = DFR.ReadElementString()
                            UseOneCurve = DFR.ReadElementString()
                            IgnCorrelation = DFR.ReadElementString()

                            If ModelVersion > CSng(2015.02) Then
                                PessimiseCombWall = CBool(DFR.ReadElementContentAsString())
                                wallpercent = CInt(DFR.ReadElementContentAsString())
                                ceilingpercent = CInt(DFR.ReadElementContentAsString())
                                wallHFSlimit = CDbl(DFR.ReadElementContentAsString())
                                wallVFSlimit = CDbl(DFR.ReadElementContentAsString())
                            End If
                            DFR.ReadEndElement() 'clear </flamespread>

                            frmOptions1.optQuintiere.Checked = True
                        Else
                            frmOptions1.optRCNone.Checked = True
                        End If

                        DFR.ReadStartElement("tenability")
                        If ModelVersion > CSng(2012.13) Then
                            FEDCO = DFR.ReadElementString()
                            If FEDCO = True Then
                                frmOptions1.optFEDCO.Checked = True
                            Else
                                frmOptions1.optFEDGeneral.Checked = True
                            End If
                        End If
                        MonitorHeight = DFR.ReadElementString()
                        Activity = DFR.ReadElementString()
                        TargetEndPoint = DFR.ReadElementString()
                        TempEndPoint = DFR.ReadElementString()
                        VisibilityEndPoint = DFR.ReadElementString()
                        FEDEndPoint = DFR.ReadElementString()
                        ConvectEndPoint = DFR.ReadElementString()
                        If ModelVersion < CSng(2012.15) Then
                            StartOccupied = DFR.ReadElementString()
                            EndOccupied = DFR.ReadElementString()
                        End If

                        illumination = DFR.ReadElementString()

                        If ModelVersion > CSng(2012.14) Then
                            FEDPath(0, 0) = DFR.ReadElementString()
                            FEDPath(1, 0) = DFR.ReadElementString()
                            FEDPath(2, 0) = DFR.ReadElementString()
                            FEDPath(0, 1) = DFR.ReadElementString()
                            FEDPath(1, 1) = DFR.ReadElementString()
                            FEDPath(2, 1) = DFR.ReadElementString()
                            FEDPath(0, 2) = DFR.ReadElementString()
                            FEDPath(1, 2) = DFR.ReadElementString()
                            FEDPath(2, 2) = DFR.ReadElementString()
                        End If
                        DFR.ReadEndElement() 'clear </tenability>

                        post = CBool(DFR.Item("post"))
                        g_post = post

                        If ModelVersion > CSng(2011.28) Then
                            FOFluxCriteria = CBool(DFR.Item("fluxcriteria"))
                        End If
                        If ModelVersion > CSng(2013.01) Then
                            calcFRR = CBool(DFR.Item("calcFRR"))
                            modGER = CBool(DFR.Item("modGER"))
                        End If
                        DFR.ReadStartElement("postflashover")

                        If ModelVersion < CSng(2017.03) Then
                            'FLED
                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            'FLED = Convert.ToSingle(Me.txtValue4.Text)
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("FLED")
                        End If

                        Fuel_Thickness = DFR.ReadElementString()

                        If ModelVersion < CSng(2017.03) Then
                            'HoC_fuel = DFR.ReadElementString()
                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            'HoC_fuel = Me.txtValue6.Text
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("HoC_fuel")
                        End If

                        Stick_Spacing = DFR.ReadElementString()
                        If ModelVersion > CSng(2014.17) Then
                            Cribheight = DFR.ReadElementString()
                        End If
                        If ModelVersion > CSng(2014.15) Then
                            ExcessFuelFactor = DFR.ReadElementString()
                        End If
                        If ModelVersion > CSng(2017.02) Then
                            useCLTmodel = DFR.ReadElementString()
                            If useCLTmodel = True Then
                                frmCLT.optCLTON.Checked = True
                            Else
                                frmCLT.optCLTOFF.Checked = True
                            End If

                            CLTceilingpercent = DFR.ReadElementString()
                            frmCLT.numeric_ceilareapercent.Value = CLTceilingpercent
                            CLTwallpercent = DFR.ReadElementString()
                            frmCLT.numeric_wallareapercent.Value = CLTwallpercent
                            chartemp = DFR.ReadElementString()
                            frmCLT.txtCharTemp.Text = chartemp

                        End If
                        If ModelVersion > CSng(2017.05) Then
                            IntegralModel = DFR.ReadElementString()
                            If IntegralModel = True Then
                                frmCLT.RB_Integral.Checked = True
                            Else
                                frmCLT.RB_Integral.Checked = False
                            End If
                            Lamella = DFR.ReadElementString()
                            CLTQcrit = DFR.ReadElementString()
                            CLTflameflux = DFR.ReadElementString()
                            CLTLoG = DFR.ReadElementString()
                            CLTigtemp = DFR.ReadElementString()
                            CLTcalibrationfactor = DFR.ReadElementString()
                        End If
                        If ModelVersion > CSng(2018.03) Then
                            DebondTemp = DFR.ReadElementString()
                            frmCLT.txtDebondTemp.Text = DebondTemp
                        End If
                        If ModelVersion > CSng(2018.05) Then
                            KineticModel = DFR.ReadElementString()
                            If KineticModel = True Then
                                frmCLT.RB_Kinetic.Checked = True
                            Else
                                frmCLT.RB_Kinetic.Checked = False
                            End If
                        End If
                        If ModelVersion < CSng(2018.02) Then
                            useCLTmodel = False
                            frmCLT.optCLTOFF.Checked = True
                        End If
                        If ModelVersion > CSng(2018.051) Then
                            E_array(2) = DFR.ReadElementString()
                            A_array(2) = DFR.ReadElementString()
                            n_array(2) = DFR.ReadElementString()
                            mf_compinit(2) = DFR.ReadElementString()
                            E_array(1) = DFR.ReadElementString()
                            A_array(1) = DFR.ReadElementString()
                            n_array(1) = DFR.ReadElementString()
                            mf_compinit(1) = DFR.ReadElementString()
                            E_array(3) = DFR.ReadElementString()
                            A_array(3) = DFR.ReadElementString()
                            n_array(3) = DFR.ReadElementString()
                            mf_compinit(3) = DFR.ReadElementString()
                            E_array(0) = DFR.ReadElementString()
                            A_array(0) = DFR.ReadElementString()
                            n_array(0) = DFR.ReadElementString()
                            mf_compinit(0) = DFR.ReadElementString()
                            char_yield(1) = DFR.ReadElementString()
                            char_yield(2) = DFR.ReadElementString()
                            char_yield(3) = DFR.ReadElementString()
                        End If
                        If ModelVersion > CSng(2018.052) Then
                            init_moisturecontent = DFR.ReadElementString()
                            frmCLT.TXT_MoistureContent.Text = init_moisturecontent * 100
                        End If

                        DFR.ReadEndElement() 'clear </postflashover>

                        'End If

                        DFR.ReadStartElement("chemistry")
                        nC = DFR.ReadElementString()
                        nH = DFR.ReadElementString()
                        nO = DFR.ReadElementString()
                        nN = DFR.ReadElementString()
                        fueltype = DFR.ReadElementString()

                        frmOptions1.cboABSCoeff.Text = CStr(fueltype)

                        HCNcalc = DFR.ReadElementString()

                        SootAlpha = DFR.ReadElementString()
                        frmOptions1.txtSootAlpha.Text = CStr(SootAlpha)

                        SootEpsilon = DFR.ReadElementString()
                        frmOptions1.txtSootEps.Text = CStr(SootEpsilon)

                        EmissionCoefficient = DFR.ReadElementString()
                        frmOptions1.txtEmissionCoefficient.Text = CStr(EmissionCoefficient)


                        If ModelVersion > CSng(2016.03) Then
                            StoichAFratio = DFR.ReadElementString()
                            frmOptions1.txtStoich.Text = CStr(StoichAFratio)
                        End If
                        If ModelVersion < CSng(2012.24) Then
                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("pre_CO")
                        End If

                        postCO = DFR.ReadElementString()

                        If ModelVersion < CSng(2012.24) Then
                            dummy = DFR.Item("distribution")
                            dummy = DFR.Item("value")
                            dummy = DFR.Item("mean")
                            dummy = DFR.Item("variance")
                            dummy = DFR.Item("lbound")
                            dummy = DFR.Item("ubound")
                            DFR.ReadStartElement("pre_soot")
                        End If

                        postSoot = DFR.ReadElementString()
                        comode = DFR.ReadElementString()
                        sootmode = DFR.ReadElementString()
                        DFR.ReadEndElement() 'clear </chemistry>

                        DFR.ReadStartElement("fires")
                        If ModelVersion < CSng(2012.48) Then
                            fireroom = DFR.ReadElementString()
                        End If
                        If ModelVersion < CSng(2012.24) Then
                            dummy = DFR.ReadElementString()
                            dummy = DFR.ReadElementString()
                        End If

                        plume = 1
                        If ModelVersion < CSng(2012.48) Then
                            plume = DFR.ReadElementString()
                        End If



                        If ModelVersion < CSng(2011.05) Then
                            NumberObjects = DFR.ReadElementString()
                            Resize_Objects()
                            For i = 1 To NumberObjects
                                id = DFR.Item("id")
                                DFR.ReadStartElement("fire")
                                dummy = DFR.Item("distribution")
                                dummy = DFR.Item("value")
                                dummy = DFR.Item("mean")
                                dummy = DFR.Item("variance")
                                dummy = DFR.Item("lbound")
                                dummy = DFR.Item("ubound")
                                DFR.ReadStartElement("heat_of_combustion")

                                HCNuserYield(id) = DFR.ReadElementString()
                                FireHeight(id) = DFR.ReadElementString()
                                FireLocation(id) = DFR.ReadElementString()
                                NumberDataPoints(id) = DFR.ReadElementString()
                                ObjCRF(id) = DFR.ReadElementString()
                                ObjLength(id) = DFR.ReadElementString()
                                ObjWidth(id) = DFR.ReadElementString()
                                ObjHeight(id) = DFR.ReadElementString()
                                ObjDimX(id) = DFR.ReadElementString()
                                ObjDimY(id) = DFR.ReadElementString()
                                ObjElevation(id) = DFR.ReadElementString()

                                time_tmp = DFR.ReadElementString()
                                hrr_tmp = DFR.ReadElementString()
                                'need to parse these strings and copy into HeatReleaseData array
                                Dim tempvar1 As String() = time_tmp.Split(CChar(","))
                                Dim tempvar2 As String() = hrr_tmp.Split(CChar(","))
                                For k = 1 To NumberDataPoints(id)
                                    HeatReleaseData(1, k, id) = tempvar1(k - 1)
                                    HeatReleaseData(2, k, id) = tempvar2(k - 1)
                                Next
                                DFR.ReadEndElement() 'clear </fire>
                            Next

                        End If
                        If ModelVersion < CSng(2012.48) Then
                            DFR.ReadEndElement() 'clear </fires>
                        End If

                        If ModelVersion < CSng(2012.16) Then

                            DFR.ReadStartElement("hvents")
                            Do While (DFR.Name = "hvent")
                                DFR.ReadStartElement("hvent")
                                room = DFR.ReadElementString() ' room 1
                                i = DFR.ReadElementString() ' room 2
                                k = DFR.ReadElementString() ' vent id

                                If ModelVersion < CSng(2012.16) Then
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                    dummy = DFR.ReadElementString()
                                End If

                                dummy = CBool(DFR.Item("autobreak"))
                                DFR.ReadStartElement("glassbreak")
                                If AutoBreakGlass(room, i, k) = True Then
                                    GLASSconductivity(room, i, k) = DFR.ReadElementString()
                                    GLASSemissivity(room, i, k) = DFR.ReadElementString()
                                    GLASSexpansion(room, i, k) = DFR.ReadElementString()
                                    GLASSthickness(room, i, k) = DFR.ReadElementString()
                                    GLASSshading(room, i, k) = DFR.ReadElementString()
                                    GLASSbreakingstress(room, i, k) = DFR.ReadElementString()
                                    GLASSalpha(room, i, k) = DFR.ReadElementString()
                                    GlassYoungsModulus(room, i, k) = DFR.ReadElementString()
                                    GLASSFalloutTime(room, i, k) = DFR.ReadElementString()
                                    GLASSdistance(room, i, k) = DFR.ReadElementString()
                                    GlassFlameFlux(room, i, k) = DFR.ReadElementString()
                                    DFR.ReadEndElement() 'clear </glassbreak>
                                End If

                                dummy = CShort(DFR.Item("use_spillplume"))


                                DFR.ReadStartElement("spillplume")

                                If spillplume(room, i, k) <> 0 Then
                                    Downstand(room, i, k) = DFR.ReadElementString()
                                    SpillPlumeBalc(room, i, k) = DFR.ReadElementString()
                                    'spillplumemodel(room, i, k) = DFR.ReadElementString()
                                    spillbalconyprojection(room, i, k) = DFR.ReadElementString()

                                    'spillplumemodel(i, room, k) = spillplumemodel(room, i, k)
                                    spillbalconyprojection(i, room, k) = spillbalconyprojection(room, i, k)

                                    DFR.ReadEndElement() 'clear </spillplume>
                                End If
                                DFR.ReadEndElement() 'clear </hvent>

                            Loop
                            If DFR.Name = "hvents" Then DFR.ReadEndElement() 'clear </hvents>
                        End If

                        If ModelVersion < CSng(2013.22) Then
                            Dim ocvents As New List(Of oCVent)
                            Dim ocventdistributions As New List(Of oDistribution)
                            Dim ocvent As oCVent
                            id = 0

                            DFR.ReadStartElement("vvents")
                            Do While (DFR.Name = "vvent")
                                DFR.ReadStartElement("vvent")
                                room = DFR.ReadElementString() ' room 1 upper
                                i = DFR.ReadElementString() ' room 2 lower
                                k = DFR.ReadElementString() ' vent id

                                If k > kvmax(room, i) Then
                                    kvmax(room, i) = k
                                    NumberCVents(room, i) = kvmax(room, i)
                                    'NumberCVents(i, room) = kvmax(room, i)
                                    Resize_CVents()
                                End If

                                CVentAuto(room, i, k) = DFR.ReadElementString()
                                CVentArea(room, i, k) = DFR.ReadElementString()
                                CVentOpenTime(room, i, k) = DFR.ReadElementString()
                                CVentCloseTime(room, i, k) = DFR.ReadElementString()
                                DFR.ReadEndElement() 'clear </vvent>

                                'create the cvents object
                                ocvents = VentDB.GetCVents
                                ocventdistributions = VentDB.GetCVentDistributions
                                id = id + 1
                                ocvent = New oCVent(200, 10, 100, 0, "ceiling vent", room, i, CVentArea(room, i, k), CVentOpenTime(room, i, k), CVentCloseTime(room, i, k), CVentAuto(room, i, k), False, 0, 0.6)
                                ocvent.id = id

                                ocvents.Add(ocvent)

                                Dim odistribution As New oDistribution("", "", "None", CVentArea(room, i, k), 0, 0, 0, 0, 0, 0, 0)
                                odistribution.id = ocvent.id
                                odistribution.varname = "area"
                                ocventdistributions.Add(odistribution)

                                ocvents.Add(ocvent)
                                odistribution = New oDistribution("", "", "None", 0, 0, 0, 0, 0, 0, 0, 0)
                                odistribution.id = ocvent.id
                                odistribution.varname = "integrity"
                                ocventdistributions.Add(odistribution)

                                ocvents.Add(ocvent)
                                odistribution = New oDistribution("", "", "None", 100, 0, 0, 0, 0, 0, 0, 0)
                                odistribution.id = ocvent.id
                                odistribution.varname = "maxopening"
                                ocventdistributions.Add(odistribution)

                                ocvents.Add(ocvent)
                                odistribution = New oDistribution("", "", "None", 10, 0, 0, 0, 0, 0, 0, 0)
                                odistribution.id = ocvent.id
                                odistribution.varname = "maxopeningtime"
                                ocventdistributions.Add(odistribution)

                                ocvents.Add(ocvent)
                                odistribution = New oDistribution("", "", "None", 200, 0, 0, 0, 0, 0, 0, 0)
                                odistribution.id = ocvent.id
                                odistribution.varname = "gastemp"
                                ocventdistributions.Add(odistribution)

                            Loop
                            If DFR.Name = "vvents" Then DFR.ReadEndElement() 'clear </vvents>

                            For Each ocvent In ocvents
                                Dim idr = ocvent.upperroom
                                Dim idc = ocvent.lowerroom
                                Dim idv = ocvent.id
                                NumberCVents(idr, idc) = NumberCVents(idr, idc) + 1

                                Resize_CVents()

                                For Each oDistribution In ocventdistributions
                                    If oDistribution.varname = "area" And oDistribution.id = ocvent.id Then
                                        CVentArea(idr, idc, NumberCVents(idr, idc)) = oDistribution.varvalue
                                    End If
                                    If oDistribution.varname = "integrity" And oDistribution.id = ocvent.id Then
                                        FRintegrity2(idr, idc, NumberCVents(idr, idc)) = oDistribution.varvalue
                                    End If
                                    If oDistribution.varname = "maxopening" And oDistribution.id = ocvent.id Then
                                        FRMaxOpening2(idr, idc, NumberCVents(idr, idc)) = oDistribution.varvalue
                                    End If
                                    If oDistribution.varname = "maxopeningtime" And oDistribution.id = ocvent.id Then
                                        FRMaxOpeningTime2(idr, idc, NumberCVents(idr, idc)) = oDistribution.varvalue
                                    End If
                                    If oDistribution.varname = "gastemp" And oDistribution.id = ocvent.id Then
                                        FRgastemp2(idr, idc, NumberCVents(idr, idc)) = oDistribution.varvalue
                                    End If
                                Next

                                trigger_device2(6, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerFR
                                trigger_device2(0, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerSD
                                trigger_device2(1, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerHD
                                trigger_device(2, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerHRR
                                trigger_device(3, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerFO
                                trigger_device(4, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerVL
                                trigger_device(5, ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerHO

                                HRR_threshold2(ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.HRRthreshold
                                HRR_ventopendelay2(ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.HRRventopendelay
                                HRR_ventopenduration2(ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.HRRventopenduration
                                trigger_ventopenduration2(ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerventopenduration
                                trigger_ventopendelay2(ocvent.upperroom, ocvent.lowerroom, NumberCVents(idr, idc)) = ocvent.triggerventopendelay
                            Next

                            VentDB.SaveCVents(ocvents, ocventdistributions)
                        End If

                        If ModelVersion < CSng(2015.053) Then
                            DFR.ReadStartElement("smoke_detectors")
                            Do While (DFR.Name = "smoke_detector")
                                DFR.ReadStartElement("smoke_detector")
                                room = DFR.ReadElementString()
                                HaveSD(room) = True
                                SmokeOD(room) = DFR.ReadElementString()
                                SDdelay(room) = DFR.ReadElementString()
                                DetSensitivity(room) = DFR.ReadElementString()
                                SDRadialDist(room) = DFR.ReadElementString()
                                SDdepth(room) = DFR.ReadElementString()
                                SDinside(room) = DFR.ReadElementString()
                                SpecifyOD(room) = DFR.ReadElementString()
                                DFR.ReadEndElement() 'clear </smoke_detector>
                            Loop
                            If DFR.Name = "smoke_detectors" Then DFR.ReadEndElement() 'clear </smoke_detectors>
                        End If

                        If ModelVersion < CSng(2012.44) Then

                            ReDim fanon(0 To NumberRooms)
                            ReDim ExtractRate(0 To NumberRooms)
                            ReDim ExtractStartTime(0 To NumberRooms)
                            ReDim MaxPressure(0 To NumberRooms)
                            ReDim NumberFans(0 To NumberRooms)
                            ReDim UseFanCurve(0 To NumberRooms)
                            ReDim FanElevation(0 To NumberRooms)
                            ReDim FanAutoStart(0 To NumberRooms)

                            DFR.ReadStartElement("fans")
                            Do While (DFR.Name = "fan")
                                DFR.ReadStartElement("fan")
                                room = DFR.ReadElementString()
                                fanon(room) = DFR.ReadElementString()
                                ExtractRate(room) = DFR.ReadElementString()
                                ExtractStartTime(room) = DFR.ReadElementString()
                                MaxPressure(room) = DFR.ReadElementString()
                                NumberFans(room) = DFR.ReadElementString()
                                Extract(room) = DFR.ReadElementString()
                                UseFanCurve(room) = DFR.ReadElementString()
                                FanElevation(room) = DFR.ReadElementString()
                                FanAutoStart(room) = DFR.ReadElementString()
                                DFR.ReadEndElement() 'clear </fan>
                            Loop
                            If DFR.Name = "fans" Then DFR.ReadEndElement() 'clear </fans>
                        End If

                        DFR.ReadEndElement() 'clear </simulation>

                        DFR.Close()
                    End Using


                    ' vent data is now contained in the vents.xml file, will need to move all the vent data to that file
                    ReDim NumberVents(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1)
                    Dim ovents As List(Of oVent)
                    ovents = VentDB.GetVents
                    Dim oventdistributions As List(Of oDistribution)
                    oventdistributions = VentDB.GetVentDistributions

                    For Each oVent In ovents
                        Dim idr = oVent.fromroom
                        Dim idc = oVent.toroom
                        Dim idv = oVent.id
                        NumberVents(idr, idc) = NumberVents(idr, idc) + 1
                        NumberVents(idc, idr) = NumberVents(idr, idc)

                        Resize_Vents()

                        For Each oDistribution In oventdistributions
                            If oDistribution.varname = "prob" And oDistribution.id = oVent.id Then
                                VentProb(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "HOreliability" And oDistribution.id = oVent.id Then
                                HOReliability(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "gastemp" And oDistribution.id = oVent.id Then
                                FRgastemp(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If

                            If oDistribution.varname = "height" And oDistribution.id = oVent.id Then
                                VentHeight(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "width" And oDistribution.id = oVent.id Then
                                VentWidth(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "integrity" And oDistribution.id = oVent.id Then
                                FRintegrity(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "maxopening" And oDistribution.id = oVent.id Then
                                FRMaxOpening(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "maxopeningtime" And oDistribution.id = oVent.id Then
                                FRMaxOpeningTime(idr, idc, NumberVents(idr, idc)) = oDistribution.varvalue
                            End If
                        Next

                        VentCD(idr, idc, NumberVents(idr, idc)) = oVent.cd
                        AutoOpenVent(idr, idc, NumberVents(idr, idc)) = oVent.autoopenvent
                        VentSillHeight(idr, idc, NumberVents(idr, idc)) = oVent.sillheight
                        VentOpenTime(idr, idc, NumberVents(idr, idc)) = oVent.opentime
                        VentCloseTime(idr, idc, NumberVents(idr, idc)) = oVent.closetime
                        WallLength1(idr, idc, NumberVents(idr, idc)) = oVent.walllength1
                        WallLength2(idr, idc, NumberVents(idr, idc)) = oVent.walllength2
                        VentFace(idr, idc, NumberVents(idr, idc)) = oVent.face
                        VentOffset(idr, idc, NumberVents(idr, idc)) = oVent.offset
                        trigger_device(0, idr, idc, NumberVents(idr, idc)) = oVent.triggerSD
                        trigger_device(1, idr, idc, NumberVents(idr, idc)) = oVent.triggerHD
                        trigger_device(2, idr, idc, NumberVents(idr, idc)) = oVent.triggerHRR
                        trigger_device(3, idr, idc, NumberVents(idr, idc)) = oVent.triggerFO
                        trigger_device(4, idr, idc, NumberVents(idr, idc)) = oVent.triggerVL
                        trigger_device(5, idr, idc, NumberVents(idr, idc)) = oVent.triggerHO
                        trigger_device(6, idr, idc, NumberVents(idr, idc)) = oVent.triggerFR
                        HRR_threshold(idr, idc, NumberVents(idr, idc)) = oVent.HRRthreshold
                        HRR_ventopendelay(idr, idc, NumberVents(idr, idc)) = oVent.HRRventopendelay
                        HRR_ventopenduration(idr, idc, NumberVents(idr, idc)) = oVent.HRRventopenduration
                        trigger_ventopenduration(idr, idc, NumberVents(idr, idc)) = oVent.triggerventopenduration
                        trigger_ventopendelay(idr, idc, NumberVents(idr, idc)) = oVent.triggerventopendelay
                        AutoBreakGlass(idr, idc, NumberVents(idr, idc)) = oVent.autobreakglass
                        GLASSconductivity(idr, idc, NumberVents(idr, idc)) = oVent.glassconductivity
                        GLASSemissivity(idr, idc, NumberVents(idr, idc)) = oVent.glassemissivity
                        GLASSexpansion(idr, idc, NumberVents(idr, idc)) = oVent.glassexpansion
                        GLASSthickness(idr, idc, NumberVents(idr, idc)) = oVent.glassthickness
                        GLASSshading(idr, idc, NumberVents(idr, idc)) = oVent.glassshading
                        GLASSbreakingstress(idr, idc, NumberVents(idr, idc)) = oVent.glassbreakingstress
                        GLASSalpha(idr, idc, NumberVents(idr, idc)) = oVent.glassalpha
                        GlassYoungsModulus(idr, idc, NumberVents(idr, idc)) = oVent.glassYoungsModulus
                        GlassFlameFlux(idr, idc, NumberVents(idr, idc)) = oVent.glassflameflux
                        GLASSFalloutTime(idr, idc, NumberVents(idr, idc)) = oVent.glassfalloutime
                        GLASSdistance(idr, idc, NumberVents(idr, idc)) = oVent.glassdistance
                        Downstand(idr, idc, NumberVents(idr, idc)) = oVent.downstand
                        spillplume(idr, idc, NumberVents(idr, idc)) = oVent.spillplume
                        SpillPlumeBalc(idr, idc, NumberVents(idr, idc)) = oVent.spillplumebalc
                        spillplumemodel(idr, idc, NumberVents(idr, idc)) = oVent.spillplumemodel
                        spillbalconyprojection(idr, idc, NumberVents(idr, idc)) = oVent.spillbalconyprojection
                        FRcriteria(idr, idc, NumberVents(idr, idc)) = oVent.FRcriteria

                        'swap idr idc
                        VentCD(idc, idr, NumberVents(idr, idc)) = VentCD(idr, idc, NumberVents(idr, idc))
                        AutoOpenVent(idc, idr, NumberVents(idr, idc)) = AutoOpenVent(idr, idc, NumberVents(idr, idc))
                        VentHeight(idc, idr, NumberVents(idr, idc)) = VentHeight(idr, idc, NumberVents(idr, idc))
                        VentWidth(idc, idr, NumberVents(idr, idc)) = VentWidth(idr, idc, NumberVents(idr, idc))
                        FRintegrity(idc, idr, NumberVents(idr, idc)) = FRintegrity(idr, idc, NumberVents(idr, idc))
                        FRMaxOpening(idc, idr, NumberVents(idr, idc)) = FRMaxOpening(idr, idc, NumberVents(idr, idc))
                        FRMaxOpeningTime(idc, idr, NumberVents(idr, idc)) = FRMaxOpeningTime(idr, idc, NumberVents(idr, idc))
                        FRgastemp(idc, idr, NumberVents(idr, idc)) = FRgastemp(idr, idc, NumberVents(idr, idc))
                        FRcriteria(idc, idr, NumberVents(idr, idc)) = oVent.FRcriteria

                        If idc <= NumberRooms Then
                            VentSillHeight(idc, idr, NumberVents(idr, idc)) = VentSillHeight(idr, idc, NumberVents(idr, idc)) + FloorElevation(idr) - FloorElevation(idc)
                        Else
                            VentSillHeight(idc, idr, NumberVents(idr, idc)) = 0
                        End If

                        VentOpenTime(idc, idr, NumberVents(idr, idc)) = VentOpenTime(idr, idc, NumberVents(idr, idc))
                        VentCloseTime(idc, idr, NumberVents(idr, idc)) = VentCloseTime(idr, idc, NumberVents(idr, idc))
                        WallLength1(idc, idr, NumberVents(idr, idc)) = WallLength1(idr, idc, NumberVents(idr, idc))
                        WallLength2(idc, idr, NumberVents(idr, idc)) = WallLength2(idr, idc, NumberVents(idr, idc))
                        VentFace(idc, idr, NumberVents(idr, idc)) = VentFace(idr, idc, NumberVents(idr, idc))
                        VentOffset(idc, idr, NumberVents(idr, idc)) = VentOffset(idr, idc, NumberVents(idr, idc))

                        trigger_device(0, idc, idr, NumberVents(idr, idc)) = oVent.triggerSD
                        trigger_device(1, idc, idr, NumberVents(idr, idc)) = oVent.triggerHD
                        trigger_device(2, idc, idr, NumberVents(idr, idc)) = oVent.triggerHRR
                        trigger_device(3, idc, idr, NumberVents(idr, idc)) = oVent.triggerFO
                        trigger_device(4, idc, idr, NumberVents(idr, idc)) = oVent.triggerVL
                        trigger_device(5, idc, idr, NumberVents(idr, idc)) = oVent.triggerHO
                        trigger_device(6, idc, idr, NumberVents(idr, idc)) = oVent.triggerFR

                        HRR_threshold(idc, idr, NumberVents(idr, idc)) = oVent.HRRthreshold
                        HRR_ventopendelay(idc, idr, NumberVents(idr, idc)) = oVent.HRRventopendelay
                        HRR_ventopenduration(idc, idr, NumberVents(idr, idc)) = oVent.HRRventopenduration
                        trigger_ventopenduration(idc, idr, NumberVents(idr, idc)) = oVent.triggerventopenduration
                        trigger_ventopendelay(idc, idr, NumberVents(idr, idc)) = oVent.triggerventopendelay

                        AutoBreakGlass(idc, idr, NumberVents(idr, idc)) = AutoBreakGlass(idr, idc, NumberVents(idr, idc))
                        GLASSconductivity(idc, idr, NumberVents(idr, idc)) = GLASSconductivity(idr, idc, NumberVents(idr, idc))
                        GLASSemissivity(idc, idr, NumberVents(idr, idc)) = GLASSemissivity(idr, idc, NumberVents(idr, idc))
                        GLASSexpansion(idc, idr, NumberVents(idr, idc)) = GLASSexpansion(idr, idc, NumberVents(idr, idc))
                        GLASSthickness(idc, idr, NumberVents(idr, idc)) = GLASSthickness(idr, idc, NumberVents(idr, idc))
                        GLASSshading(idc, idr, NumberVents(idr, idc)) = GLASSshading(idr, idc, NumberVents(idr, idc))
                        GLASSbreakingstress(idc, idr, NumberVents(idr, idc)) = GLASSbreakingstress(idr, idc, NumberVents(idr, idc))
                        GLASSalpha(idc, idr, NumberVents(idr, idc)) = GLASSalpha(idr, idc, NumberVents(idr, idc))
                        GlassYoungsModulus(idc, idr, NumberVents(idr, idc)) = GlassYoungsModulus(idr, idc, NumberVents(idr, idc))
                        GlassFlameFlux(idc, idr, NumberVents(idr, idc)) = GlassFlameFlux(idr, idc, NumberVents(idr, idc))
                        GLASSFalloutTime(idc, idr, NumberVents(idr, idc)) = GLASSFalloutTime(idr, idc, NumberVents(idr, idc))
                        GLASSdistance(idc, idr, NumberVents(idr, idc)) = GLASSdistance(idr, idc, NumberVents(idr, idc))

                        Downstand(idc, idr, NumberVents(idr, idc)) = Downstand(idr, idc, NumberVents(idr, idc))
                        spillplume(idc, idr, NumberVents(idr, idc)) = spillplume(idr, idc, NumberVents(idr, idc))
                        SpillPlumeBalc(idc, idr, NumberVents(idr, idc)) = SpillPlumeBalc(idr, idc, NumberVents(idr, idc))
                        spillplumemodel(idc, idr, NumberVents(idr, idc)) = spillplumemodel(idr, idc, NumberVents(idr, idc))
                        spillbalconyprojection(idc, idr, NumberVents(idr, idc)) = spillbalconyprojection(idr, idc, NumberVents(idr, idc))

                    Next

                    ' item data is now contained in the items.xml file
                    Dim oitems As List(Of oItem)
                    Dim oitemdistributions As List(Of oDistribution)
                    oitems = ItemDB.GetItemsv2
                    oitemdistributions = ItemDB.GetItemDistributions

                    NumberObjects = oitems.Count
                    Resize_Objects()
                    For Each oitem In oitems
                        For Each oDistribution In oitemdistributions
                            If oDistribution.varname = "soot yield" And oDistribution.id = oitem.id Then
                                SootYield(oitem.id) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "co2 yield" And oDistribution.id = oitem.id Then
                                CO2Yield(oitem.id) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "heat of combustion" And oDistribution.id = oitem.id Then
                                EnergyYield(oitem.id) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "Latent Heat of Gasification" And oDistribution.id = oitem.id Then
                                ObjectLHoG(oitem.id) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "Radiant Loss Fraction" And oDistribution.id = oitem.id Then
                                ObjectRLF(oitem.id) = oDistribution.varvalue
                            End If
                            If oDistribution.varname = "HRRUA" And oDistribution.id = oitem.id Then
                                ObjectMLUA(2, oitem.id) = oDistribution.varvalue
                            End If
                        Next

                        ObjectMLUA(0, oitem.id) = oitem.constantA
                        ObjectMLUA(1, oitem.id) = oitem.constantB
                        'ObjectMLUA(2, oitem.id) = oitem.HRRUA
                        ObjectWindEffect(oitem.id) = oitem.windeffect
                        'ObjectPyrolysisOption(oitem.id) = oitem.pyrolysisoption
                        'ObjectPoolDensity(oitem.id) = oitem.pooldensity
                        'ObjectPoolDiameter(oitem.id) = oitem.pooldiameter
                        'ObjectPoolFBMLR(oitem.id) = oitem.poolFBMLR
                        'ObjectPoolVapTemp(oitem.id) = oitem.poolvaptemp
                        'ObjectPoolRamp(oitem.id) = oitem.poolramp
                        'ObjectPoolVolume(oitem.id) = oitem.poolvolume

                        ObjCRF(oitem.id) = oitem.critflux
                        ObjCRFauto(oitem.id) = oitem.critfluxauto
                        ObjectDescription(oitem.id) = oitem.description
                        ObjectItemID(oitem.id) = oitem.id
                        FireHeight(oitem.id) = oitem.elevation
                        ObjFTPindexauto(oitem.id) = oitem.ftpindexauto
                        ObjFTPindexpilot(oitem.id) = oitem.ftpindexpilot
                        ObjFTPlimitauto(oitem.id) = oitem.ftplimitauto
                        ObjFTPlimitpilot(oitem.id) = oitem.ftplimitpilot
                        ObjHeight(oitem.id) = oitem.height
                        ObjectIgnTime(oitem.id) = oitem.ignitiontime
                        ObjLength(oitem.id) = oitem.length
                        ObjWidth(oitem.id) = oitem.width
                        ObjDimX(oitem.id) = oitem.xleft
                        ObjDimY(oitem.id) = oitem.ybottom


                        Dim linetext As String = CStr(oitem.hrr)
                        linetext = CStr(linetext.Trim)
                        linetext = linetext.Replace(Chr(9), ",")
                        linetext = linetext.Replace(Chr(10), ",")
                        linetext = linetext.Replace(Chr(13), "")
                        linetext = linetext.Replace(" ", "")
                        linetext = linetext.Replace(",,", ",")
                        'remove the comma off the end
                        If linetext.Length > 0 Then
                            If linetext.Chars(linetext.Length - 1) = "," Then linetext = linetext.Remove(linetext.Length - 1, 1)
                        End If
                        Dim j As Integer
                        Dim NumberPoints As Integer = 0
                        Dim str_data As String() = linetext.Split(CChar(","))
                        i = str_data.Count - 1
                        If i > 0 Then
                            j = 0
                            id = oitem.id
                            NumberDataPoints(id) = 0
                            Do While (NumberPoints < i And NumberPoints < 1000)
                                NumberPoints = NumberPoints + 2
                                If IsNumeric(str_data(NumberPoints - 2)) And IsNumeric(str_data(NumberPoints - 1)) Then
                                    HeatReleaseData(1, NumberDataPoints(id) + 1, id) = CDbl(str_data(NumberPoints - 2).Normalize) 'time
                                    HeatReleaseData(2, NumberDataPoints(id) + 1, id) = CDbl(str_data(NumberPoints - 1).Normalize) 'hrr
                                End If
                                j = j + 1
                                NumberDataPoints(id) = CShort(NumberDataPoints(id) + 1)
                            Loop
                        End If


                    Next

                    frmDiscreteProb.txtSpr1.Text = sprnum_prob(0)
                    frmDiscreteProb.txtSpr2.Text = sprnum_prob(1)
                    frmDiscreteProb.txtSpr3.Text = sprnum_prob(2)
                    frmDiscreteProb.txtSpr4.Text = sprnum_prob(3)

                    frmQuintiere.optUseOneCurve.Checked = UseOneCurve

                    frmOptions1.txtFuelThickness.Text = CStr(Fuel_Thickness)
                    frmOptions1.txtStickSpacing.Text = CStr(Stick_Spacing)
                    frmOptions1.txtCribheight.Text = CStr(Cribheight)
                    frmOptions1.txtExcessFuelFactor.Text = CStr(ExcessFuelFactor)
                    frmOptions1.txtnC.Text = CStr(nC)
                    frmOptions1.txtnH.Text = CStr(nH)
                    frmOptions1.txtnO.Text = CStr(nO)
                    frmOptions1.txtnN.Text = CStr(nN)
                    frmOptions1.txtStoich.Text = CStr(StoichAFratio)
                    frmOptions1.cboABSCoeff.Text = fueltype
                    frmOptions1.txtNodes(0).Text = CStr(Ceilingnodes)
                    frmOptions1.txtNodes(1).Text = CStr(Wallnodes)
                    frmOptions1.txtNodes(2).Text = CStr(Floornodes)
                    frmOptions1.txtErrorControl.Text = CStr(Error_Control)
                    frmOptions1.txtErrorControlVentFlow.Text = CStr(Error_Control_ventflow)
                    frmOptions1.txtFlameLengthPower.Text = CStr(FlameLengthPower)
                    frmOptions1.txtBurnerWidth.Text = CStr(BurnerWidth)
                    frmOptions1.txtFlameAreaConstant.Text = CStr(FlameAreaConstant)
                    frmOptions1.txtCeilingHeatFlux.Text = CStr(CeilingHeatFlux)
                    frmOptions1.txtWallHeatFlux.Text = CStr(WallHeatFlux)
                    frmOptions1.txtEmissionCoefficient.Text = CStr(EmissionCoefficient)
                    frmOptions1.txtpostCO.Text = CStr(postCO)
                    frmOptions1.txtPostSoot.Text = CStr(postSoot)
                    frmOptions1.optCOman.Checked = comode
                    frmOptions1.optSootman.Checked = sootmode
                    frmOptions1.txtSootAlpha.Text = CStr(SootAlpha)
                    frmOptions1.txtSootEps.Text = CStr(SootEpsilon)

                    'frmDescribeRoom.lblCeilingSubstrate.Text = CeilingSubstrate(1)
                    'frmDescribeRoom.lblFloorSubstrate.Text = FloorSubstrate(1)
                    'frmDescribeRoom.lblCeilingSurface.Text = CeilingSurface(1)
                    'frmDescribeRoom.lblWallSubstrate.Text = WallSubstrate(1)
                    'frmDescribeRoom.lblWallSurface.Text = WallSurface(1)
                    'frmDescribeRoom.lblFloorSurface.Text = FloorSurface(1)

                    Me.txtSimTime.Text = CStr(SimTime)
                    Me.txtExcelInterval.Text = CStr(ExcelInterval)
                    Me.txtDisplayInterval.Text = CStr(DisplayInterval)
                    Me.txtSeed.Text = CStr(seed)

                    'If Confirm_File(FireDatabaseName, readfile, 1) = 0 Then FireDatabaseName = UserPersonalDataFolder & gcs_folder_ext & DefaultFireDatabaseName
                    'If Confirm_File(MaterialsDatabaseName, readfile, 1) = 0 Then MaterialsDatabaseName = UserPersonalDataFolder & gcs_folder_ext & DefaultMaterialsDatabaseName

                    If My.Computer.FileSystem.FileExists(FireDatabaseName) = False Then
                        FireDatabaseName = UserPersonalDataFolder & gcs_folder_ext & DefaultFireDatabaseName
                    End If
                    If My.Computer.FileSystem.FileExists(MaterialsDatabaseName) = False Then
                        MaterialsDatabaseName = UserPersonalDataFolder & gcs_folder_ext & DefaultMaterialsDatabaseName
                    End If

                    If post = True Then
                        frmOptions1.optPostFlashover.Checked = True
                    Else
                        frmOptions1.OptPreFlashover.Checked = True
                    End If
                    If FOFluxCriteria = True Then
                        frmOptions1.optFOflux.Checked = True
                    Else
                        frmOptions1.optFOtemp.Checked = True
                    End If
                    If nowallflow = True Then
                        frmOptions1.chkWallFlowDisable.CheckState = System.Windows.Forms.CheckState.Checked
                    Else
                        frmOptions1.chkWallFlowDisable.CheckState = System.Windows.Forms.CheckState.Unchecked
                    End If

                    If HCNcalc = True Then
                        frmOptions1.chkHCNcalc.CheckState = System.Windows.Forms.CheckState.Checked
                    Else
                        frmOptions1.chkHCNcalc.CheckState = System.Windows.Forms.CheckState.Unchecked
                    End If

                    If ventlog = True Then
                        chkSaveVentFlow.Checked = True
                    Else
                        chkSaveVentFlow.Checked = False
                    End If

                    If LEsolver = "LU Decomposition" Or LEsolver = "" Then
                        frmOptions1.optLUdecom.Checked = True
                    Else
                        frmOptions1.optGaussJor.Checked = True
                    End If

                    If Enhance = True Then
                        frmOptions1.optEnhanceOn.Checked = True
                    Else
                        frmOptions1.optEnhanceOff.Checked = True
                    End If

                    If illumination = True Then
                        frmOptions1.optIlluminatedSign.Checked = True
                    Else
                        frmOptions1.optReflectiveSign.Checked = True
                    End If

                    If corner = 0 Then
                        MDIFrmMain.mnuQuintiereGraph.Visible = False
                        MDIFrmMain.mnuConeHRR.Visible = False
                    Else
                        MDIFrmMain.mnuQuintiereGraph.Visible = True
                        MDIFrmMain.mnuConeHRR.Visible = True
                    End If

                    If plume = 1 Then
                        frmOptions1.optStrongPlume.Checked = True
                    Else
                        frmOptions1.optMcCaffrey.Checked = True
                    End If

                    'If CeilingSlope(1) = True Then
                    '    frmDescribeRoom.optFlatCeiling.Checked = False
                    'Else
                    '    frmDescribeRoom.optFlatCeiling.Checked = True
                    'End If

                    'If HaveWallSubstrate(1) = True Then
                    '    frmDescribeRoom.chkAddWallSubstrate.Checked = True
                    'Else
                    '    frmDescribeRoom.chkAddWallSubstrate.Checked = False
                    'End If

                    'If HaveFloorSubstrate(1) = True Then
                    '    frmDescribeRoom.chkAddFloorSubstrate.Checked = True
                    'Else
                    '    frmDescribeRoom.chkAddFloorSubstrate.Checked = False
                    'End If

                    'If HaveCeilingSubstrate(1) = True Then
                    '    frmDescribeRoom.chkAddSubstrate.Checked = True
                    'Else
                    '    frmDescribeRoom.chkAddSubstrate.Checked = False
                    'End If

                    If frmFire.lstObjectLocation.Items.Count > 0 Then
                        frmFire.lstObjectLocation.SelectedIndex = FireLocation(1)
                    Else
                        frmFire.lstObjectLocation.SelectedIndex = -1
                    End If

                    If corner = 1 Then
                        frmOptions1.optKarlsson.Checked = True
                    ElseIf corner = 2 Then
                        frmOptions1.optQuintiere.Checked = True
                    Else
                        frmOptions1.optRCNone.Checked = True
                    End If

                    If usepowerlawdesignfire = True Then
                        frmItemList.chkAlphaTFire.Checked = True
                    Else
                        frmItemList.chkAlphaTFire.Checked = False
                    End If

                    If IgniteNextRoom = True Then frmQuintiere.chkSpreadAdjacentRoom.CheckState = System.Windows.Forms.CheckState.Checked

                    'If ModelVersion < CSng(2013.12) Then
                    '    Dim oroom As oRoom
                    '    Dim oroomdistribution As oDistribution

                    '    orooms.Clear()
                    '    For i = 1 To NumberRooms
                    '        oroom = New oRoom(i, RoomDescription(i), CeilingSlope(i), RoomAbsX(i), RoomAbsY(i), FloorElevation(i), RoomHeight(i), MinStudHeight(i), RoomLength(i), RoomWidth(i))
                    '        orooms.Add(oroom)
                    '        oroomdistribution = New oDistribution("length", "m", "None", RoomLength(i), 0, 0, 0, 0, 0, 0, 0)
                    '        oroomdistribution.id = i
                    '        oroomdistributions.Add(oroomdistribution)
                    '        oroomdistribution = New oDistribution("width", "m", "None", RoomWidth(i), 0, 0, 0, 0, 0, 0, 0)
                    '        oroomdistributions.Add(oroomdistribution)
                    '    Next
                    '    RoomDB.SaveRooms(orooms, oroomdistributions)
                    'End If

                    matname = Path.GetFileName(MaterialsDatabaseName)
                    firename = Path.GetFileName(FireDatabaseName)


                    If batch = False Then
                        If boo_startup = False Then MsgBox(opendatafile & " Successfully Loaded", MB_ICONINFORMATION, ProgramTitle)
                    End If
                    boo_startup = False

                        If basefile <> "" Then
                            Dim tmp As String = basefile.Replace(".xml", "_log.rtf")
                            If My.Computer.FileSystem.FileExists(tmp) Then
                                rtb_log.LoadFile(tmp)
                            End If
                        End If

                    End If
                End If

        Catch ex As Exception
            MsgBox(Err.Description & " (Exception in Read_BaseFile_xml - Line " & Err.Erl & ")", MsgBoxStyle.Exclamation, "Exception in Read_BaseFile_xml - Line " & Err.Erl)
        End Try
    End Sub

    Private Sub CloseToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CloseToolStripMenuItem.Click

        Chart1.Visible = False
        Chart2.Visible = False
        Chart3.Visible = False

        Panel1.SendToBack()
        ToolStrip1.Show()
        MenuStrip1.Show()
        Label19.Visible = False
        Label40.Visible = False
        Label45.Visible = False
        Label18.Visible = False
        NumericUpDown1.Visible = False
        NumericUpDownRoom.Visible = False
        NumericUpDown_Bins.Visible = False
        IterationUpDown.Visible = False
        NumericUpDownCounter.Visible = False
        Label3.Visible = False

        PageToolStripMenuItem.Visible = False
        PrintPreviewToolStripMenuItem.Visible = False
        PrintToolStripMenuItem.Visible = False
        ToolStrip1.Visible = True

        SimTime = CInt(txtSimTime.Text)
        NumberIterations = CInt(txtNumberIterations.Text)
        seed = CInt(txtSeed.Text)
        ExcelInterval = CInt(txtExcelInterval.Text)
        DisplayInterval = CInt(txtDisplayInterval.Text)

        Me.Hide()

    End Sub
    Private Sub SampleFireData_LHS2(ByRef oItems As Object, ByRef oItemDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)
        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:

        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)

        'Dim oitems As List(Of oItem)
        'oitems = ItemDB.GetItemsv2()

        'Dim oitemdistributions As List(Of oDistribution)
        'oitemdistributions = ItemDB.GetItemDistributions()

        Dim nx As Integer = oItems.Count
        If usepowerlawdesignfire = True Then nx = 1

        'ReDim Preserve mc_energyyield(0 To N - 1, 0 To nx - 1)
        'ReDim Preserve mc_sootyield(0 To N - 1, 0 To nx - 1)
        'ReDim Preserve mc_co2yield(0 To N - 1, 0 To nx - 1)

        'Dim mc_energyyield(0 To N - 1, 0 To nx - 1)
        'Dim mc_sootyield(0 To N - 1, 0 To nx - 1)
        'Dim mc_co2yield(0 To N - 1, 0 To nx - 1)
        'Dim mc_lhog(0 To N - 1, 0 To nx - 1)

        Try

            For Each odistribution In oItemDistributions

                If Not (usepowerlawdesignfire = True And odistribution.id > 1) Then

                    'If odistribution.id = thisitem Then
                    If odistribution.varname = "heat of combustion" Then
                        Dim thisitem As Integer = odistribution.id

                        For i = 1 To N
                            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                        Next i

                        If odistribution.distribution = "Normal" Then
                            'define a normal distribution
                            Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                            'truncated normal, check to see if any tempdatain values are out of bounds
                            cdf_upper = Distribution1.CDF(odistribution.ubound)
                            cdf_lower = Distribution1.CDF(odistribution.lbound)
                            For i = 0 To N - 1
                                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                            Next
                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Uniform" Then
                            Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Triangular" Then
                            Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Log Normal" Then
                            Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Gamma" Then
                            'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                        Else
                            'EnergyYield(nx) = CSng(odistribution.varvalue)
                            For counter = 0 To N - 1
                                mc_variable(counter) = CSng(odistribution.varvalue)
                            Next
                        End If

                        ReDim iTaken(0 To N)

                        i = 1
                        While i <= N
                            If N = 1 Then
                                X = 1
                            Else
                                X = Rand1N.Next 'randomly select an iteration number between 1 and N
                            End If
                            If iTaken(X) = 0 And X <= N Then
                                ' mc_energyyield(i - 1, thisitem - 1) = mc_variable(X - 1)
                                mc_item_hoc(thisitem - 1, i - 1) = mc_variable(X - 1)
                                iTaken(X) = 1
                                i = i + 1
                            End If
                        End While

                    End If
                End If
            Next


            'soot yield
            For Each odistribution In oItemDistributions
                If Not (usepowerlawdesignfire = True And odistribution.id > 1) Then

                    'If odistribution.id = thisitem Then
                    If odistribution.varname = "soot yield" Then
                        Dim thisitem As Integer = odistribution.id

                        For i = 1 To N
                            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                        Next i

                        If odistribution.distribution = "Normal" Then
                            'define a normal distribution
                            Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                            'truncated normal, check to see if any tempdatain values are out of bounds
                            cdf_upper = Distribution2.CDF(odistribution.ubound)
                            cdf_lower = Distribution2.CDF(odistribution.lbound)
                            For i = 0 To N - 1
                                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                            Next
                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Uniform" Then
                            Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Triangular" Then
                            Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Log Normal" Then
                            Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                            Next
                        Else
                            For counter = 0 To N - 1
                                mc_variable(counter) = CSng(odistribution.varvalue)
                            Next
                        End If

                        ReDim iTaken(0 To N)
                        i = 1
                        While i <= N
                            If N = 1 Then
                                X = 1
                            Else
                                X = Rand1N.Next 'randomly select an iteration number between 1 and N
                            End If
                            If iTaken(X) = 0 And X <= N Then
                                ' mc_sootyield(i - 1, thisitem - 1) = mc_variable(X - 1)
                                mc_item_soot(thisitem - 1, i - 1) = mc_variable(X - 1)
                                iTaken(X) = 1
                                i = i + 1
                            End If
                        End While
                    End If
                End If
            Next

            'co2 yield
            For Each odistribution In oItemDistributions
                If Not (usepowerlawdesignfire = True And odistribution.id > 1) Then

                    'If odistribution.id = thisitem Then
                    If odistribution.varname = "co2 yield" Then
                        Dim thisitem As Integer = odistribution.id

                        For i = 1 To N
                            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                        Next i

                        If odistribution.distribution = "Normal" Then
                            'define a normal distribution
                            Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                            'truncated normal, check to see if any tempdatain values are out of bounds
                            cdf_upper = Distribution3.CDF(odistribution.ubound)
                            cdf_lower = Distribution3.CDF(odistribution.lbound)
                            For i = 0 To N - 1
                                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                            Next
                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Uniform" Then
                            Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Triangular" Then
                            Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Log Normal" Then
                            Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                            Next
                        Else
                            For counter = 0 To N - 1
                                mc_variable(counter) = CSng(odistribution.varvalue)
                            Next
                        End If
                        'End If
                        'End If
                        'Next

                        ReDim iTaken(0 To N)
                        i = 1
                        While i <= N
                            If N = 1 Then
                                X = 1
                            Else
                                X = Rand1N.Next 'randomly select an iteration number between 1 and N
                            End If
                            If iTaken(X) = 0 And X <= N Then
                                'mc_co2yield(i - 1, thisitem - 1) = mc_variable(X - 1)
                                mc_item_co2(thisitem - 1, i - 1) = mc_variable(X - 1)
                                iTaken(X) = 1
                                i = i + 1
                            End If
                        End While

                    End If
                End If
            Next

            'latent heat of gasification
            For Each odistribution In oItemDistributions
                If Not (usepowerlawdesignfire = True And odistribution.id > 1) Then

                    If odistribution.varname = "Latent Heat of Gasification" Then
                        Dim thisitem As Integer = odistribution.id

                        For i = 1 To N
                            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                        Next i

                        If odistribution.distribution = "Normal" Then
                            'define a normal distribution
                            Dim Distribution4 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                            'truncated normal, check to see if any tempdatain values are out of bounds
                            cdf_upper = Distribution4.CDF(odistribution.ubound)
                            cdf_lower = Distribution4.CDF(odistribution.lbound)
                            For i = 0 To N - 1
                                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                            Next
                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Uniform" Then
                            Dim Distribution4 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Triangular" Then
                            Dim Distribution4 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Log Normal" Then
                            Dim Distribution4 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                            Next
                        Else
                            For counter = 0 To N - 1
                                mc_variable(counter) = CSng(odistribution.varvalue)
                            Next
                        End If

                        ReDim iTaken(0 To N)
                        i = 1
                        While i <= N
                            If N = 1 Then
                                X = 1
                            Else
                                X = Rand1N.Next 'randomly select an iteration number between 1 and N
                            End If
                            If iTaken(X) = 0 And X <= N Then
                                'mc_LHOG(i - 1, thisitem - 1) = mc_variable(X - 1)
                                mc_item_lhog(thisitem - 1, i - 1) = mc_variable(X - 1)
                                iTaken(X) = 1
                                i = i + 1
                            End If
                        End While

                    End If
                End If
            Next

            'radiant loss fraction
            For Each odistribution In oItemDistributions
                If Not (usepowerlawdesignfire = True And odistribution.id > 1) Then

                    If odistribution.varname = "Radiant Loss Fraction" Then
                        Dim thisitem As Integer = odistribution.id

                        For i = 1 To N
                            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                        Next i

                        If odistribution.distribution = "Normal" Then
                            'define a normal distribution
                            Dim Distribution5 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                            'truncated normal, check to see if any tempdatain values are out of bounds
                            cdf_upper = Distribution5.CDF(odistribution.ubound)
                            cdf_lower = Distribution5.CDF(odistribution.lbound)
                            For i = 0 To N - 1
                                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                            Next
                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Uniform" Then
                            Dim Distribution5 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Triangular" Then
                            Dim Distribution5 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Log Normal" Then
                            Dim Distribution5 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                            Next
                        Else
                            For counter = 0 To N - 1
                                mc_variable(counter) = CSng(odistribution.varvalue)
                            Next
                        End If

                        ReDim iTaken(0 To N)
                        i = 1
                        While i <= N
                            If N = 1 Then
                                X = 1
                            Else
                                X = Rand1N.Next 'randomly select an iteration number between 1 and N
                            End If
                            If iTaken(X) = 0 And X <= N Then
                                mc_item_RLF(thisitem - 1, i - 1) = mc_variable(X - 1)
                                iTaken(X) = 1
                                i = i + 1
                            End If
                        End While

                    End If
                End If
            Next

            'HRRUA
            For Each odistribution In oItemDistributions
                If Not (usepowerlawdesignfire = True And odistribution.id > 1) Then

                    If odistribution.varname = "HRRUA" Then
                        Dim thisitem As Integer = odistribution.id

                        For i = 1 To N
                            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                        Next i

                        If odistribution.distribution = "Normal" Then
                            'define a normal distribution
                            Dim Distribution6 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                            'truncated normal, check to see if any tempdatain values are out of bounds
                            cdf_upper = Distribution6.CDF(odistribution.ubound)
                            cdf_lower = Distribution6.CDF(odistribution.lbound)
                            For i = 0 To N - 1
                                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                            Next
                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Uniform" Then
                            Dim Distribution6 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Triangular" Then
                            Dim Distribution6 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                            Next
                        ElseIf odistribution.distribution = "Log Normal" Then
                            Dim Distribution6 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                            For counter = 0 To N - 1
                                mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                            Next
                        Else
                            For counter = 0 To N - 1
                                mc_variable(counter) = CSng(odistribution.varvalue)
                            Next
                        End If

                        ReDim iTaken(0 To N)
                        i = 1
                        While i <= N
                            If N = 1 Then
                                X = 1
                            Else
                                X = Rand1N.Next 'randomly select an iteration number between 1 and N
                            End If
                            If iTaken(X) = 0 And X <= N Then
                                mc_item_hrrua(thisitem - 1, i - 1) = mc_variable(X - 1)
                                iTaken(X) = 1
                                i = i + 1
                            End If
                        End While

                    End If
                End If
            Next

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DFG.vb SampleFireData_LHS2")
        End Try
    End Sub
    Private Sub SampleRoomData_LHS(ByRef oRooms As Object, ByRef oRoomDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)
        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:

        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)

        Dim nx As Integer = oRooms.Count

        Try

            For Each odistribution In oRoomDistributions
                Dim roomdistribution As String = odistribution.distribution
                Dim roomvarname As String = odistribution.varname
                Dim roomvarvalue As Single = odistribution.varvalue
                Dim roomid As Integer = odistribution.id

                If roomvarname = "length" Then
                    Dim thisroom As Integer = roomid
                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N 'this give a percentile value for the range
                    Next i

                    If roomdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(odistribution.ubound)
                        cdf_lower = Distribution1.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Uniform" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Triangular" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Log Normal" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(roomvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_room_length(thisroom - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

            Next

            'width
            For Each odistribution In oRoomDistributions
                Dim roomdistribution As String = odistribution.distribution
                Dim roomvarname As String = odistribution.varname
                Dim roomvarvalue As Single = odistribution.varvalue
                Dim roomid As Integer = odistribution.id

                If roomvarname = "width" Then
                    Dim thisroom As Integer = roomid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If roomdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(odistribution.ubound)
                        cdf_lower = Distribution2.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Uniform" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Triangular" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf roomdistribution = "Log Normal" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(roomvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_room_width(thisroom - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If
            Next
            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb SampleRoomData_LHS")
        End Try
    End Sub
    Private Sub SampleCVentData_LHS(ByRef ocVents As Object, ByRef ocVentDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)


        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:
        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)

        Dim nx As Integer = ocVents.Count

        Try
            For Each odistribution In ocVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "area" Then
                    Dim thisvent As Integer = ventid
                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(odistribution.ubound)
                        cdf_lower = Distribution1.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_vent_area(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

            Next

            'integrity
            For Each odistribution In ocVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "integrity" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(odistribution.ubound)
                        cdf_lower = Distribution2.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_integrity2(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'max opening
            For Each odistribution In ocVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "maxopening" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_maxopening2(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'max opening time
            For Each odistribution In ocVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "maxopeningtime" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution7 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution7.CDF(odistribution.ubound)
                        cdf_lower = Distribution7.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution7 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution7 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution7 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_maxopeningtime2(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'gas temp
            For Each odistribution In ocVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "gastemp" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution4 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution4.CDF(odistribution.ubound)
                        cdf_lower = Distribution4.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_gastemp2(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb SampleCVentdata_LHS")
        End Try
    End Sub
    Private Sub SampleVentData_LHS2(ByRef oVents As Object, ByRef oVentDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)
        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:

        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)

        Dim nx As Integer = oVents.Count

        Try

            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "height" Then
                    Dim thisvent As Integer = ventid
                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(odistribution.ubound)
                        cdf_lower = Distribution1.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_vent_height(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

            Next


            'width
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "width" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(odistribution.ubound)
                        cdf_lower = Distribution2.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_vent_width(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'probability vent is initially closed 
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "prob" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_ventprob(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If
            Next

            'hold open device probability
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "HOreliability" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution4 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution4.CDF(odistribution.ubound)
                        cdf_lower = Distribution4.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_HOreliability(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If
            Next

            'integrity
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "integrity" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution5 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution5.CDF(odistribution.ubound)
                        cdf_lower = Distribution5.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution5 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution5 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution5 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution5.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_integrity(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'max opening
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "maxopening" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution6 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution6.CDF(odistribution.ubound)
                        cdf_lower = Distribution6.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution6 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution6 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution6 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution6.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_maxopening(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'max opening time
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "maxopeningtime" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution7 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution7.CDF(odistribution.ubound)
                        cdf_lower = Distribution7.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution7 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution7 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution7 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution7.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_maxopeningtime(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            'gas temp
            For Each odistribution In oVentDistributions
                Dim ventdistribution As String = odistribution.distribution
                Dim ventvarname As String = odistribution.varname
                Dim ventvarvalue As Single = odistribution.varvalue
                Dim ventid As Integer = odistribution.id

                If ventvarname = "gastemp" Then
                    Dim thisvent As Integer = ventid

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If ventdistribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution8 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution8.CDF(odistribution.ubound)
                        cdf_lower = Distribution8.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution8.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Uniform" Then
                        Dim Distribution8 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution8.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Triangular" Then
                        Dim Distribution8 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution8.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf ventdistribution = "Log Normal" Then
                        Dim Distribution8 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution8.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDbl(ventvarvalue.ToString)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_gastemp(thisvent - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

            Next

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb SampleVentData_LHS2")
        End Try
    End Sub
    Private Sub SampleSprinklerData_LHS2(ByRef oSprinklers As Object, ByRef osprDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)
        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:

        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)


        Dim nx As Integer = oSprinklers.Count

        Try

            For Each odistribution In osprDistributions

                If odistribution.varname = "rti" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(odistribution.ubound)
                        cdf_lower = Distribution1.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CSng(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_RTI(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If


                'cfactor
                If odistribution.varname = "cfactor" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(odistribution.ubound)
                        cdf_lower = Distribution2.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CSng(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_cfactor(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                'sprinkler spray density
                If odistribution.varname = "sprdensity" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CSng(odistribution.varvalue)
                        Next
                    End If


                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_waterdensity(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

                'radial distance 

                If odistribution.varname = "sprr" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CSng(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_RadialDist(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If


                'distance below ceiling 
                If odistribution.varname = "sprz" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CSng(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_dist(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

                'act temp 
                If odistribution.varname = "acttemp" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CSng(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_acttemp(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

            Next

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DFG.vb SampleSprinklerData_LHS2")
        End Try
    End Sub
    Private Sub SampleSmokeDetData_LHS2(ByRef oSmokeDets As Object, ByRef osdDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)
        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:

        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)


        Dim nx As Integer = oSmokeDets.Count

        Try

            For Each odistribution In osdDistributions

                If odistribution.varname = "OD" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(odistribution.ubound)
                        cdf_lower = Distribution1.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_SDOD(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If


                'radial distance
                If odistribution.varname = "sdr" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(odistribution.ubound)
                        cdf_lower = Distribution2.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_SDRadialDist(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                'depth
                If odistribution.varname = "sdz" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If


                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_SDZ(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

                'char length
                If odistribution.varname = "charlength" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution4 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution4.CDF(odistribution.ubound)
                        cdf_lower = Distribution4.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If


                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_SDcharlength(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If
            Next

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DFG.vb SampleSmokeDetData_LHS2")
        End Try
    End Sub
    Private Sub SampleFanData_LHS2(ByRef oFans As Object, ByRef ofanDistributions As Object)
        'sample data prior to runs using centerspace nmath.core library
        Dim counter As Integer
        Dim i As Integer
        Dim X As Integer
        Dim N As Integer = CInt(txtNumberIterations.Text)
        If N = 1 Then GoTo skipline
        Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:

        Dim cdf_upper As Double
        Dim cdf_lower As Double
        Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
        Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
        Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
        ReDim tempdatain(0 To N - 1)


        Dim nx As Integer = oFans.Count

        Try

            For Each odistribution In ofanDistributions

                If odistribution.varname = "fanflowrate" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution1 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(odistribution.ubound)
                        cdf_lower = Distribution1.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution1 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution1.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_fanflowrate(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

                'reliability
                If odistribution.varname = "fanreliability" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution4 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution4.CDF(odistribution.ubound)
                        cdf_lower = Distribution4.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution4 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution4.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Gamma" Then
                        'Dim Distribution1 As New CenterSpace.NMath.Stats.GammaDistribution

                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)

                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_fanIDreliability(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

                'fan start time
                If odistribution.varname = "fanstarttime" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution2 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(odistribution.ubound)
                        cdf_lower = Distribution2.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution2 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution2.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If

                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_fanstarttime(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                'depth
                If odistribution.varname = "fanpressurelimit" Then
                    Dim thisitem As Integer = odistribution.id

                    For i = 1 To N
                        tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    Next i

                    If odistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution3 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(odistribution.mean), CDbl(odistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(odistribution.ubound)
                        cdf_lower = Distribution3.CDF(odistribution.lbound)
                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next
                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Uniform" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(odistribution.lbound), CDbl(odistribution.ubound), CDbl(odistribution.mode))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    ElseIf odistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(odistribution.mean), Math.Sqrt(CDbl(odistribution.variance)))

                        For counter = 0 To N - 1
                            mc_variable(counter) = Distribution3.InverseCDF(tempdatain(counter))
                        Next
                    Else
                        For counter = 0 To N - 1
                            mc_variable(counter) = CDec(odistribution.varvalue)
                        Next
                    End If


                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then

                            mc_fanpressurelimit(thisitem - 1, i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While

                End If

            Next

            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DFG.vb SampleFanData_LHS2")
        End Try
    End Sub
    Private Sub SampleAllData_LHS2()
        Try

            'Dim osprinklers As New List(Of oSprinkler)
            'Dim sprindex As Integer = 0

            Dim oDistributions As New List(Of oDistribution)
            oDistributions = DistributionClass.GetDistributions

            'sample data prior to runs using centerspace nmath.core library
            Dim seed As Integer = Convert.ToInt16(txtSeed.Text)
            Dim counter As Integer
            'Dim calc_iteration As Integer
            Dim i As Integer
            Dim X As Integer
            Dim N As Integer = CInt(txtNumberIterations.Text)
            If N = 1 Then GoTo skipline
            Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number

skipline:
            Dim cdf_upper As Double
            Dim cdf_lower As Double
            Dim Ru As New RandGenUniform(0, 1, seed) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number
            Dim iTaken(0 To N) As Integer 'array to store 0 or 1 indicating whether an iteration has already been sampled = 1
            Dim mc_variable(0 To N - 1) As Double 'temporary array storing a monte carlo variable at each iteration 
            ReDim tempdatain(0 To N - 1)
            ReDim Item1X(0 To N - 1)
            ReDim Item1Y(0 To N - 1)


            For Each oDistribution In oDistributions

                'use latin hypercube technique for stratified sampling
                'generate a vector of length N holding the ascending CDF values from 0 to 1
                For i = 0 To N - 1
                    tempdatain(i) = (1 / N) * Ru.Next + (i) / N 'gives sorted ascending values between 0 and 1 
                Next i

                If oDistribution.varname = "Interior Temperature" Then
                    '
                    'interior temperature
                    '
                    If oDistribution.distribution = "Normal" Then 'interior temperature
                        'define a normal distribution
                        Dim Distribution1 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution1.CDF(oDistribution.ubound)
                        cdf_lower = Distribution1.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            InteriorTemp = Distribution1.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = InteriorTemp
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution1 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            InteriorTemp = Distribution1.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = InteriorTemp
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution1 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            InteriorTemp = Distribution1.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = InteriorTemp
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution1 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            InteriorTemp = Distribution1.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = InteriorTemp
                        Next
                    Else
                        InteriorTemp = oDistribution.varvalue
                        For counter = 0 To N - 1
                            mc_variable(counter) = InteriorTemp
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_InteriorTemp(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Exterior Temperature" Then
                    '
                    'exterior temperature
                    '
                    'generate a vector of length N holding the CDF values for each interval
                    'For i = 1 To N
                    '    tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    'Next i

                    If oDistribution.distribution = "Normal" Then 'exterior temperature
                        Dim Distribution2 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution2.CDF(oDistribution.ubound)
                        cdf_lower = Distribution2.CDF(oDistribution.lbound)
                        For i = 1 To N
                            If tempdatain(i - 1) < cdf_lower Then tempdatain(i - 1) = cdf_lower 'set lower bound
                            If tempdatain(i - 1) > cdf_upper Then tempdatain(i - 1) = cdf_upper 'set upper bound
                        Next

                        For counter = 1 To N
                            ExteriorTemp = Distribution2.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = ExteriorTemp
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then

                        Dim Distribution2 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 1 To N
                            ExteriorTemp = Distribution2.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = ExteriorTemp
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution2 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 1 To N
                            ExteriorTemp = Distribution2.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = ExteriorTemp
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution2 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            ExteriorTemp = Distribution2.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = ExteriorTemp
                        Next
                    Else
                        ExteriorTemp = oDistribution.varvalue
                        For counter = 0 To N - 1
                            mc_variable(counter) = ExteriorTemp
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_ExteriorTemp(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Relative Humidity" Then
                    '
                    'relative humidity
                    '
                    'generate a vector of length N holding the CDF values for each interval
                    'For i = 1 To N
                    '    tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    'Next i

                    If oDistribution.distribution = "Normal" Then 'relative humidity
                        Dim Distribution3 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution3.CDF(oDistribution.ubound)
                        cdf_lower = Distribution3.CDF(oDistribution.lbound)
                        For i = 1 To N
                            If tempdatain(i - 1) < cdf_lower Then tempdatain(i - 1) = cdf_lower 'set lower bound
                            If tempdatain(i - 1) > cdf_upper Then tempdatain(i - 1) = cdf_upper 'set upper bound
                        Next

                        For counter = 1 To N
                            RelativeHumidity = Distribution3.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = RelativeHumidity
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then

                        Dim Distribution3 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 1 To N
                            RelativeHumidity = Distribution3.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = RelativeHumidity
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution3 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))
                        'Dim ks As OneSampleKSTest
                        ReDim Preserve mc_variable(0 To N - 1)
                        For counter = 0 To N - 1
                            ReDim Preserve mc_variable(0 To counter)
                            RelativeHumidity = Distribution3.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = RelativeHumidity
                            'ks = New OneSampleKSTest(mc_variable, Distribution3, 0.000000001)
                            'If 1 - ks.P < 0.000001 Then
                            'Stop
                            'End If
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution3 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            RelativeHumidity = Distribution3.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = RelativeHumidity
                        Next
                    Else
                        RelativeHumidity = CSng(oDistribution.varvalue)  'ratio
                        For counter = 0 To N - 1
                            mc_variable(counter) = RelativeHumidity
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_RelativeHumidity(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Fire Load Energy Density" Then
                    '
                    'fled
                    '
                    'generate a vector of length N holding the CDF values for each interval
                    'For i = 1 To N
                    '    tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    'Next i

                    If oDistribution.distribution = "Normal" Then 'fled
                        Dim Distribution4 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))
                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution4.CDF(oDistribution.ubound)
                        cdf_lower = Distribution4.CDF(oDistribution.lbound)
                        For i = 1 To N
                            If tempdatain(i - 1) < cdf_lower Then tempdatain(i - 1) = cdf_lower 'set lower bound
                            If tempdatain(i - 1) > cdf_upper Then tempdatain(i - 1) = cdf_upper 'set upper bound
                        Next

                        For counter = 1 To N
                            mc_variable(counter - 1) = Distribution4.InverseCDF(tempdatain(counter - 1))
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then

                        Dim Distribution4 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))
                        For counter = 1 To N
                            mc_variable(counter - 1) = Distribution4.InverseCDF(tempdatain(counter - 1))
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution4 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))
                        For counter = 1 To N
                            mc_variable(counter - 1) = Distribution4.InverseCDF(tempdatain(counter - 1))
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution4 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))
                        For counter = 1 To N
                            mc_variable(counter - 1) = Distribution4.InverseCDF(tempdatain(counter - 1))
                        Next
                    Else

                        FLED = CSng(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = FLED
                        Next

                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_FLED(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Heat of Combustion PFO" Then
                    '
                    'heat of combustion
                    '
                    'generate a vector of length N holding the CDF values for each interval
                    'For i = 1 To N
                    '    tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
                    'Next i

                    If oDistribution.distribution = "Normal" Then 'heat of combustion
                        Dim Distribution6 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution6.CDF(oDistribution.ubound)
                        cdf_lower = Distribution6.CDF(oDistribution.lbound)
                        For i = 1 To N
                            If tempdatain(i - 1) < cdf_lower Then tempdatain(i - 1) = cdf_lower 'set lower bound
                            If tempdatain(i - 1) > cdf_upper Then tempdatain(i - 1) = cdf_upper 'set upper bound
                        Next

                        For counter = 1 To N
                            HoC_fuel = Distribution6.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = HoC_fuel
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then

                        Dim Distribution6 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 1 To N
                            HoC_fuel = Distribution6.InverseCDF(tempdatain(counter - 1))
                            mc_variable(counter - 1) = HoC_fuel
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution6 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))
                        For counter = 1 To N
                            mc_variable(counter - 1) = Distribution6.InverseCDF(tempdatain(counter - 1))
                        Next

                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution6 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))
                        For counter = 1 To N
                            mc_variable(counter - 1) = Distribution6.InverseCDF(tempdatain(counter - 1))
                        Next

                    Else
                        HoC_fuel = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = HoC_fuel
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_HoC_fuel(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If


                If oDistribution.varname = "Soot Preflashover Yield" Then
                    '
                    'preflashover soot
                    '
                    If oDistribution.distribution = "Normal" Then 'hoc
                        'define a normal distribution
                        Dim Distribution14 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution14.CDF(oDistribution.ubound)
                        cdf_lower = Distribution14.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            preSoot = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preSoot
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution14 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            preSoot = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preSoot
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution14 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            preSoot = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preSoot
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution14 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            preSoot = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preSoot
                        Next
                    Else
                        preSoot = CSng(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = preSoot
                        Next
                    End If
                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_presoot(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "CO Preflashover Yield" Then
                    '
                    'preflashover CO
                    '
                    If oDistribution.distribution = "Normal" Then 'hoc
                        'define a normal distribution
                        Dim Distribution15 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution15.CDF(oDistribution.ubound)
                        cdf_lower = Distribution15.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            preCO = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preCO
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution15 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            preCO = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preCO
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution15 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            preCO = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preCO
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution15 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            preCO = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = preCO
                        Next
                    Else
                        preCO = CSng(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = preCO
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_preCO(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                'If oDistribution.varname = "Fuel Heat of Gasification" Then
                '    '
                '    'fuel heat of gasification
                '    '
                '    If oDistribution.distribution = "Normal" Then 'hoc
                '        'define a normal distribution
                '        Dim Distribution16 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                '        'truncated normal, check to see if any tempdatain values are out of bounds
                '        cdf_upper = Distribution16.CDF(oDistribution.ubound)
                '        cdf_lower = Distribution16.CDF(oDistribution.lbound)

                '        For i = 0 To N - 1
                '            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                '            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                '        Next

                '        For counter = 0 To N - 1
                '            preCO = Distribution16.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = FuelHeatofGasification
                '        Next

                '    ElseIf oDistribution.distribution = "Uniform" Then
                '        Dim Distribution16 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                '        For counter = 0 To N - 1
                '            FuelHeatofGasification = Distribution16.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = FuelHeatofGasification
                '        Next

                '    ElseIf oDistribution.distribution = "Triangular" Then
                '        Dim Distribution16 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                '        For counter = 0 To N - 1
                '            FuelHeatofGasification = Distribution16.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = FuelHeatofGasification
                '        Next
                '    ElseIf oDistribution.distribution = "Log Normal" Then
                '        Dim Distribution16 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                '        For counter = 0 To N - 1
                '            FuelHeatofGasification = Distribution16.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = FuelHeatofGasification
                '        Next
                '    Else
                '        FuelHeatofGasification = CSng(oDistribution.varvalue)
                '        For counter = 0 To N - 1
                '            mc_variable(counter) = FuelHeatofGasification
                '        Next
                '    End If

                '    'need to random sort the vector for independent variables
                '    ReDim iTaken(0 To N)
                '    i = 1
                '    While i <= N
                '        If N = 1 Then
                '            X = 1
                '        Else
                '            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                '        End If
                '        If iTaken(X) = 0 And X <= N Then
                '            mc_LHOG(i - 1) = mc_variable(X - 1)
                '            iTaken(X) = 1
                '            i = i + 1
                '        End If
                '    End While
                'End If

               

                If oDistribution.varname = "Sprinkler Reliability" Then
                    '
                    'sprinkler reliability
                    '
                    If oDistribution.distribution = "Normal" Then 'sprinkler reliability
                        'define a normal distribution
                        Dim Distribution12 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution12.CDF(oDistribution.ubound)
                        cdf_lower = Distribution12.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            SprReliability = Distribution12.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprReliability
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution12 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            SprReliability = Distribution12.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprReliability
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution12 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            SprReliability = Distribution12.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprReliability
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution12 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            SprReliability = Distribution12.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprReliability
                        Next
                    Else
                        SprReliability = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = SprReliability
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_SprReliability(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Sprinkler Suppression Probability" Then
                    '
                    'sprinkler suppression probasbility 
                    '
                    If oDistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution13 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution13.CDF(oDistribution.ubound)
                        cdf_lower = Distribution13.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            SprSuppressionProb = Distribution13.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprSuppressionProb
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution13 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            SprSuppressionProb = Distribution13.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprSuppressionProb
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution13 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            SprSuppressionProb = Distribution13.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprSuppressionProb
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution13 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            SprSuppressionProb = Distribution13.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprSuppressionProb
                        Next
                    Else
                        SprSuppressionProb = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = SprSuppressionProb
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_SprSuppressProb(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Sprinkler Cooling Coefficient" Then
                    '
                    'Sprinkler Cooling Coefficient
                    '
                    If oDistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution14 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution14.CDF(oDistribution.ubound)
                        cdf_lower = Distribution14.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            SprCooling = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprCooling
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution14 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            SprCooling = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprCooling
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution14 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            SprCooling = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprCooling
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution14 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            SprCooling = Distribution14.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SprCooling
                        Next
                    Else
                        SprCooling = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = SprCooling
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_SprCooling(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If


                If oDistribution.varname = "Peak HRR" Then
                    '
                    'peak hrr for power law design fire
                    '
                    If oDistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution15 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution15.CDF(oDistribution.ubound)
                        cdf_lower = Distribution15.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            PeakHRR = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = PeakHRR
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution15 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            PeakHRR = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = PeakHRR
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution15 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            PeakHRR = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = PeakHRR
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution15 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            PeakHRR = Distribution15.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = PeakHRR
                        Next
                    Else
                        PeakHRR = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = PeakHRR
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_PeakHRR(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If


                If oDistribution.varname = "Alpha T" Then
                    '
                    'alpha t coefficient for power law design fire
                    '
                    If oDistribution.distribution = "Normal" Then
                        'define a normal distribution
                        Dim Distribution16 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution16.CDF(oDistribution.ubound)
                        cdf_lower = Distribution16.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            AlphaT = Distribution16.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = AlphaT
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution16 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            AlphaT = Distribution16.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = AlphaT
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution16 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            AlphaT = Distribution16.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = AlphaT
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution16 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            AlphaT = Distribution16.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = AlphaT
                        Next
                    Else
                        AlphaT = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = AlphaT
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_AlphaT(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Smoke Detector Reliability" Then
                    '
                    'sd reliability
                    '
                    If oDistribution.distribution = "Normal" Then ' reliability
                        'define a normal distribution
                        Dim Distribution17 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution17.CDF(oDistribution.ubound)
                        cdf_lower = Distribution17.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            SDReliability = Distribution17.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SDReliability
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution17 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            SDReliability = Distribution17.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SDReliability
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution17 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            SDReliability = Distribution17.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SDReliability
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution17 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            SDReliability = Distribution17.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = SDReliability
                        Next
                    Else
                        SDReliability = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = SDReliability
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_SDReliability(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                If oDistribution.varname = "Mechanical Ventilation Reliability" Then
                    '
                    'fan reliability
                    '
                    If oDistribution.distribution = "Normal" Then ' reliability
                        'define a normal distribution
                        Dim Distribution18 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                        'truncated normal, check to see if any tempdatain values are out of bounds
                        cdf_upper = Distribution18.CDF(oDistribution.ubound)
                        cdf_lower = Distribution18.CDF(oDistribution.lbound)

                        For i = 0 To N - 1
                            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                        Next

                        For counter = 0 To N - 1
                            FanReliability = Distribution18.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = FanReliability
                        Next

                    ElseIf oDistribution.distribution = "Uniform" Then
                        Dim Distribution18 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                        For counter = 0 To N - 1
                            FanReliability = Distribution18.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = FanReliability
                        Next

                    ElseIf oDistribution.distribution = "Triangular" Then
                        Dim Distribution18 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                        For counter = 0 To N - 1
                            FanReliability = Distribution18.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = FanReliability
                        Next
                    ElseIf oDistribution.distribution = "Log Normal" Then
                        Dim Distribution18 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                        For counter = 0 To N - 1
                            FanReliability = Distribution18.InverseCDF(tempdatain(counter))
                            mc_variable(counter) = FanReliability
                        Next
                    Else
                        FanReliability = CDbl(oDistribution.varvalue)
                        For counter = 0 To N - 1
                            mc_variable(counter) = FanReliability
                        Next
                    End If

                    'need to random sort the vector for independent variables
                    ReDim iTaken(0 To N)
                    i = 1
                    While i <= N
                        If N = 1 Then
                            X = 1
                        Else
                            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                        End If
                        If iTaken(X) = 0 And X <= N Then
                            mc_FanReliability(i - 1) = mc_variable(X - 1)
                            iTaken(X) = 1
                            i = i + 1
                        End If
                    End While
                End If

                'If oDistribution.varname = "Hold Open Reliability" Then
                '    '
                '    'hold open device reliability
                '    '
                '    If oDistribution.distribution = "Normal" Then ' reliability
                '        'define a normal distribution
                '        Dim Distribution18 As New NormalDistribution(CDbl(oDistribution.mean), CDbl(oDistribution.variance))

                '        'truncated normal, check to see if any tempdatain values are out of bounds
                '        cdf_upper = Distribution18.CDF(oDistribution.ubound)
                '        cdf_lower = Distribution18.CDF(oDistribution.lbound)

                '        For i = 0 To N - 1
                '            If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
                '            If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
                '        Next

                '        For counter = 0 To N - 1
                '            hoReliability = Distribution18.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = hoReliability
                '        Next

                '    ElseIf oDistribution.distribution = "Uniform" Then
                '        Dim Distribution18 As New UniformDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound))

                '        For counter = 0 To N - 1
                '            hoReliability = Distribution18.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = hoReliability
                '        Next

                '    ElseIf oDistribution.distribution = "Triangular" Then
                '        Dim Distribution18 As New TriangularDistribution(CDbl(oDistribution.lbound), CDbl(oDistribution.ubound), CDbl(oDistribution.mode))

                '        For counter = 0 To N - 1
                '            hoReliability = Distribution18.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = hoReliability
                '        Next
                '    ElseIf oDistribution.distribution = "Log Normal" Then
                '        Dim Distribution18 As New LognormalDistribution(CDbl(oDistribution.mean), Math.Sqrt(CDbl(oDistribution.variance)))

                '        For counter = 0 To N - 1
                '            hoReliability = Distribution18.InverseCDF(tempdatain(counter))
                '            mc_variable(counter) = hoReliability
                '        Next
                '    Else
                '        hoReliability = CDbl(oDistribution.varvalue)
                '        For counter = 0 To N - 1
                '            mc_variable(counter) = hoReliability
                '        Next
                '    End If

                '    'need to random sort the vector for independent variables
                '    ReDim iTaken(0 To N)
                '    i = 1
                '    While i <= N
                '        If N = 1 Then
                '            X = 1
                '        Else
                '            'Dim Rand1N As New RandGenUniform(1, N) 'uniform distribution to generate random numbers between 1 and N - use Ru.next to generate the next number
                '            X = Rand1N.Next 'randomly select an iteration number between 1 and N
                '        End If
                '        If iTaken(X) = 0 And X <= N Then
                '            mc_HOReliability(i - 1) = mc_variable(X - 1)
                '            iTaken(X) = 1
                '            i = i + 1
                '        End If
                '    End While
                'End If
            Next


            '===========

            'osprinklers = SprinklerDB.GetSprinklers2
            'NumSprinklers = osprinklers.Count

            'For Each oSprinkler In osprinklers

            '    If oSprinkler.room = fireroom Then
            '        '
            '        'radial distance
            '        '
            '        'generate a vector of length N holding the CDF values for each interval
            '        For i = 1 To N
            '            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
            '        Next i
            '        If oSprinkler.rdistribution = "Normal" Then
            '            'define a normal distribution
            '            Dim Distribution7 As New NormalDistribution(CDbl(oSprinkler.rmean), CDbl(oSprinkler.rvariance))
            '            'truncated normal, check to see if any tempdatain values are out of bounds
            '            cdf_upper = Distribution7.CDF(oSprinkler.rubound)
            '            cdf_lower = Distribution7.CDF(oSprinkler.rlbound)
            '            For i = 0 To N - 1
            '                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
            '                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
            '            Next
            '            For counter = 0 To N - 1
            '                RadialDistance(fireroom) = Distribution7.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RadialDistance(fireroom)
            '            Next
            '        ElseIf oSprinkler.rdistribution = "Uniform" Then
            '            Dim Distribution7 As New UniformDistribution(CDbl(oSprinkler.rlbound), CDbl(oSprinkler.rubound))

            '            For counter = 0 To N - 1
            '                RadialDistance(fireroom) = Distribution7.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RadialDistance(fireroom)
            '            Next
            '        ElseIf oSprinkler.rdistribution = "Triangular" Then
            '            Dim Distribution7 As New TriangularDistribution(CDbl(oSprinkler.rlbound), CDbl(oSprinkler.rubound), CDbl(oSprinkler.rmean))

            '            For counter = 0 To N - 1
            '                RadialDistance(fireroom) = Distribution7.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RadialDistance(fireroom)
            '            Next
            '        ElseIf oSprinkler.rdistribution = "Log Normal" Then
            '            Dim Distribution7 As New LognormalDistribution(CDbl(oSprinkler.rmean), Math.Sqrt(CDbl(oSprinkler.rvariance)))

            '            For counter = 0 To N - 1
            '                RadialDistance(fireroom) = Distribution7.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RadialDistance(fireroom)
            '            Next
            '        Else
            '            RadialDistance(fireroom) = (oSprinkler.sprr)
            '            For counter = 0 To N - 1
            '                mc_variable(counter) = RadialDistance(fireroom)
            '            Next
            '        End If

            '        'need to random sort the vector for independent variables
            '        ReDim iTaken(0 To N)
            '        i = 1
            '        While i <= N
            '            If N = 1 Then
            '                X = 1
            '            Else
            '                X = Rand1N.Next 'randomly select an iteration number between 1 and N
            '            End If
            '            If iTaken(X) = 0 And X <= N Then
            '                mc_RadialDist(sprindex, i - 1) = mc_variable(X - 1)
            '                iTaken(X) = 1
            '                i = i + 1
            '            End If
            '        End While
            '        '
            '        'rti
            '        '
            '        'generate a vector of length N holding the CDF values for each interval
            '        For i = 1 To N
            '            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
            '        Next i
            '        If oSprinkler.rtidistribution = "Normal" Then
            '            'define a normal distribution
            '            Dim Distribution8 As New NormalDistribution(CDbl(oSprinkler.rtimean), CDbl(oSprinkler.rtivariance))
            '            'truncated normal, check to see if any tempdatain values are out of bounds
            '            cdf_upper = Distribution8.CDF(oSprinkler.rtiubound)
            '            cdf_lower = Distribution8.CDF(oSprinkler.rtilbound)
            '            For i = 0 To N - 1
            '                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
            '                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
            '            Next
            '            For counter = 0 To N - 1
            '                RTI(fireroom) = Distribution8.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RTI(fireroom)
            '            Next
            '        ElseIf oSprinkler.rtidistribution = "Uniform" Then
            '            Dim Distribution8 As New UniformDistribution(CDbl(oSprinkler.rtilbound), CDbl(oSprinkler.rtiubound))

            '            For counter = 0 To N - 1
            '                RTI(fireroom) = Distribution8.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RTI(fireroom)
            '            Next
            '        ElseIf oSprinkler.rtidistribution = "Triangular" Then
            '            Dim Distribution8 As New TriangularDistribution(CDbl(oSprinkler.rtilbound), CDbl(oSprinkler.rtiubound), CDbl(oSprinkler.rtimean))

            '            For counter = 0 To N - 1
            '                RTI(fireroom) = Distribution8.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RTI(fireroom)
            '            Next
            '        ElseIf oSprinkler.rtidistribution = "Log Normal" Then
            '            Dim Distribution8 As New LognormalDistribution(CDbl(oSprinkler.rtimean), Math.Sqrt(CDbl(oSprinkler.rtivariance)))

            '            For counter = 0 To N - 1
            '                RTI(fireroom) = Distribution8.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = RTI(fireroom)
            '            Next
            '        Else
            '            RTI(fireroom) = CSng(oSprinkler.rti)
            '            For counter = 0 To N - 1
            '                mc_variable(counter) = RTI(fireroom)
            '            Next
            '        End If

            '        'need to random sort the vector for independent variables
            '        ReDim iTaken(0 To N)
            '        i = 1
            '        While i <= N
            '            If N = 1 Then
            '                X = 1
            '            Else
            '                X = Rand1N.Next 'randomly select an iteration number between 1 and N
            '            End If
            '            If iTaken(X) = 0 And X <= N Then
            '                mc_RTI(sprindex, i - 1) = mc_variable(X - 1)
            '                iTaken(X) = 1
            '                i = i + 1
            '            End If
            '        End While
            '        '
            '        'cfactor
            '        '
            '        'generate a vector of length N holding the CDF values for each interval
            '        For i = 1 To N
            '            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
            '        Next i
            '        If oSprinkler.cfdistribution = "Normal" Then
            '            'define a normal distribution
            '            Dim Distribution9 As New NormalDistribution(CDbl(oSprinkler.cfmean), CDbl(oSprinkler.cfvariance))
            '            'truncated normal, check to see if any tempdatain values are out of bounds
            '            cdf_upper = Distribution9.CDF(oSprinkler.cfubound)
            '            cdf_lower = Distribution9.CDF(oSprinkler.cflbound)
            '            For i = 0 To N - 1
            '                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
            '                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
            '            Next
            '            For counter = 0 To N - 1
            '                cfactor(fireroom) = Distribution9.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = cfactor(fireroom)
            '            Next
            '        ElseIf oSprinkler.cfdistribution = "Uniform" Then
            '            Dim Distribution9 As New UniformDistribution(CDbl(oSprinkler.cflbound), CDbl(oSprinkler.cfubound))

            '            For counter = 0 To N - 1
            '                cfactor(fireroom) = Distribution9.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = cfactor(fireroom)
            '            Next
            '        ElseIf oSprinkler.cfdistribution = "Triangular" Then
            '            Dim Distribution9 As New TriangularDistribution(CDbl(oSprinkler.cflbound), CDbl(oSprinkler.cfubound), CDbl(oSprinkler.cfmean))

            '            For counter = 0 To N - 1
            '                cfactor(fireroom) = Distribution9.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = cfactor(fireroom)
            '            Next
            '        ElseIf oSprinkler.cfdistribution = "Log Normal" Then
            '            Dim Distribution9 As New LognormalDistribution(CDbl(oSprinkler.cfmean), Math.Sqrt(CDbl(oSprinkler.cfvariance)))

            '            For counter = 0 To N - 1
            '                cfactor(fireroom) = Distribution9.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = cfactor(fireroom)
            '            Next
            '        Else
            '            cfactor(fireroom) = CSng(oSprinkler.cfactor)
            '            For counter = 0 To N - 1
            '                mc_variable(counter) = cfactor(fireroom)
            '            Next
            '        End If

            '        'need to random sort the vector for independent variables
            '        ReDim iTaken(0 To N)
            '        i = 1
            '        While i <= N
            '            If N = 1 Then
            '                X = 1
            '            Else
            '                X = Rand1N.Next 'randomly select an iteration number between 1 and N
            '            End If
            '            If iTaken(X) = 0 And X <= N Then
            '                mc_cfactor(sprindex, i - 1) = mc_variable(X - 1)
            '                iTaken(X) = 1
            '                i = i + 1
            '            End If
            '        End While
            '        '
            '        'activation temperature
            '        '
            '        'generate a vector of length N holding the CDF values for each interval
            '        For i = 1 To N
            '            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
            '        Next i
            '        If oSprinkler.actdistribution = "Normal" Then
            '            'define a normal distribution
            '            Dim Distribution10 As New NormalDistribution(CDbl(oSprinkler.actmean), CDbl(oSprinkler.actvariance))
            '            'truncated normal, check to see if any tempdatain values are out of bounds
            '            cdf_upper = Distribution10.CDF(oSprinkler.actubound)
            '            cdf_lower = Distribution10.CDF(oSprinkler.actlbound)
            '            For i = 0 To N - 1
            '                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
            '                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
            '            Next
            '            For counter = 0 To N - 1
            '                ActuationTemp(fireroom) = Distribution10.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = ActuationTemp(fireroom)
            '            Next
            '        ElseIf oSprinkler.actdistribution = "Uniform" Then
            '            Dim Distribution10 As New UniformDistribution(CDbl(oSprinkler.actlbound), CDbl(oSprinkler.actubound))

            '            For counter = 0 To N - 1
            '                ActuationTemp(fireroom) = Distribution10.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = ActuationTemp(fireroom)
            '            Next
            '        ElseIf oSprinkler.actdistribution = "Triangular" Then
            '            Dim Distribution10 As New TriangularDistribution(CDbl(oSprinkler.actlbound), CDbl(oSprinkler.actubound), CDbl(oSprinkler.actmean))

            '            For counter = 0 To N - 1
            '                ActuationTemp(fireroom) = Distribution10.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = ActuationTemp(fireroom)
            '            Next
            '        ElseIf oSprinkler.actdistribution = "Log Normal" Then
            '            Dim Distribution10 As New LognormalDistribution(CDbl(oSprinkler.actmean), Math.Sqrt(CDbl(oSprinkler.actvariance)))

            '            For counter = 0 To N - 1
            '                ActuationTemp(fireroom) = Distribution10.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = ActuationTemp(fireroom)
            '            Next
            '        Else
            '            ActuationTemp(fireroom) = CSng(oSprinkler.acttemp)
            '            For counter = 0 To N - 1
            '                mc_variable(counter) = ActuationTemp(fireroom)
            '            Next
            '        End If

            '        'need to random sort the vector for independent variables
            '        ReDim iTaken(0 To N)
            '        i = 1
            '        While i <= N
            '            If N = 1 Then
            '                X = 1
            '            Else
            '                X = Rand1N.Next 'randomly select an iteration number between 1 and N
            '            End If
            '            If iTaken(X) = 0 And X <= N Then
            '                mc_acttemp(sprindex, i - 1) = mc_variable(X - 1)
            '                iTaken(X) = 1
            '                i = i + 1
            '            End If
            '        End While
            '        '
            '        'distance below ceiling
            '        '
            '        'generate a vector of length N holding the CDF values for each interval
            '        For i = 1 To N
            '            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
            '        Next i
            '        If oSprinkler.zdistribution = "Normal" Then
            '            'define a normal distribution
            '            Dim Distribution11 As New NormalDistribution(CDbl(oSprinkler.zmean), CDbl(oSprinkler.zvariance))
            '            'truncated normal, check to see if any tempdatain values are out of bounds
            '            cdf_upper = Distribution11.CDF(oSprinkler.zubound)
            '            cdf_lower = Distribution11.CDF(oSprinkler.zlbound)
            '            For i = 0 To N - 1
            '                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
            '                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
            '            Next
            '            For counter = 0 To N - 1
            '                SprinkDistance(fireroom) = Distribution11.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = SprinkDistance(fireroom)
            '            Next
            '        ElseIf oSprinkler.zdistribution = "Uniform" Then
            '            Dim Distribution11 As New UniformDistribution(CDbl(oSprinkler.zlbound), CDbl(oSprinkler.zubound))

            '            For counter = 0 To N - 1
            '                SprinkDistance(fireroom) = Distribution11.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = SprinkDistance(fireroom)
            '            Next
            '        ElseIf oSprinkler.zdistribution = "Triangular" Then
            '            Dim Distribution11 As New TriangularDistribution(CDbl(oSprinkler.zlbound), CDbl(oSprinkler.zubound), CDbl(oSprinkler.zmean))

            '            For counter = 0 To N - 1
            '                SprinkDistance(fireroom) = Distribution11.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = SprinkDistance(fireroom)
            '            Next
            '        ElseIf oSprinkler.zdistribution = "Log Normal" Then
            '            Dim Distribution11 As New LognormalDistribution(CDbl(oSprinkler.zmean), Math.Sqrt(CDbl(oSprinkler.zvariance)))

            '            For counter = 0 To N - 1
            '                SprinkDistance(fireroom) = Distribution11.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = SprinkDistance(fireroom)
            '            Next
            '        Else
            '            SprinkDistance(fireroom) = CSng(oSprinkler.sprz)
            '            For counter = 0 To N - 1
            '                mc_variable(counter) = SprinkDistance(fireroom)
            '            Next
            '        End If

            '        'need to random sort the vector for independent variables
            '        ReDim iTaken(0 To N)
            '        i = 1
            '        While i <= N
            '            If N = 1 Then
            '                X = 1
            '            Else
            '                X = Rand1N.Next 'randomly select an iteration number between 1 and N
            '            End If
            '            If iTaken(X) = 0 And X <= N Then
            '                mc_dist(sprindex, i - 1) = mc_variable(X - 1)
            '                iTaken(X) = 1
            '                i = i + 1
            '            End If
            '        End While
            '        '
            '        'water spray density
            '        '
            '        'generate a vector of length N holding the CDF values for each interval
            '        For i = 1 To N
            '            tempdatain(i - 1) = (1 / N) * Ru.Next + (i - 1) / N
            '        Next i
            '        If oSprinkler.dendistribution = "Normal" Then
            '            'define a normal distribution
            '            Dim Distribution12 As New NormalDistribution(CDbl(oSprinkler.denmean), CDbl(oSprinkler.denvariance))
            '            'truncated normal, check to see if any tempdatain values are out of bounds
            '            cdf_upper = Distribution12.CDF(oSprinkler.denubound)
            '            cdf_lower = Distribution12.CDF(oSprinkler.denlbound)
            '            For i = 0 To N - 1
            '                If tempdatain(i) < cdf_lower Then tempdatain(i) = cdf_lower 'set lower bound
            '                If tempdatain(i) > cdf_upper Then tempdatain(i) = cdf_upper 'set upper bound
            '            Next
            '            For counter = 0 To N - 1
            '                WaterSprayDensity(fireroom) = Distribution12.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = WaterSprayDensity(fireroom)
            '            Next
            '        ElseIf oSprinkler.dendistribution = "Uniform" Then
            '            Dim Distribution12 As New UniformDistribution(CDbl(oSprinkler.denlbound), CDbl(oSprinkler.denubound))

            '            For counter = 0 To N - 1
            '                WaterSprayDensity(fireroom) = Distribution12.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = WaterSprayDensity(fireroom)
            '            Next
            '        ElseIf oSprinkler.dendistribution = "Triangular" Then
            '            Dim Distribution12 As New TriangularDistribution(CDbl(oSprinkler.denlbound), CDbl(oSprinkler.denubound), CDbl(oSprinkler.denmean))

            '            For counter = 0 To N - 1
            '                WaterSprayDensity(fireroom) = Distribution12.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = WaterSprayDensity(fireroom)
            '            Next
            '        ElseIf oSprinkler.dendistribution = "Log Normal" Then
            '            Dim Distribution12 As New LognormalDistribution(CDbl(oSprinkler.denmean), Math.Sqrt(CDbl(oSprinkler.denvariance)))

            '            For counter = 0 To N - 1
            '                WaterSprayDensity(fireroom) = Distribution12.InverseCDF(tempdatain(counter))
            '                mc_variable(counter) = WaterSprayDensity(fireroom)
            '            Next
            '        Else
            '            WaterSprayDensity(fireroom) = CSng(oSprinkler.sprdensity)
            '            For counter = 0 To N - 1
            '                mc_variable(counter) = WaterSprayDensity(fireroom)
            '            Next
            '        End If

            '        'need to random sort the vector for independent variables
            '        ReDim iTaken(0 To N)
            '        i = 1
            '        While i <= N
            '            If N = 1 Then
            '                X = 1
            '            Else
            '                X = Rand1N.Next 'randomly select an iteration number between 1 and N
            '            End If
            '            If iTaken(X) = 0 And X <= N Then
            '                mc_waterdensity(sprindex, i - 1) = mc_variable(X - 1)
            '                iTaken(X) = 1
            '                i = i + 1
            '            End If
            '        End While
            '    End If
            '    sprindex = sprindex + 1
            'Next

            Call save_sampledata()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in SampleAllData_LHS2")
        End Try
    End Sub

    Private Sub failfurnace_nyman()
        'nyman energy
        Dim vent, j, room As Integer
        Dim isotemp As Double = 0
        Dim isoenergy As Double = 0
        Dim limit As Integer

        'wall vent
        For room = 1 To NumberRooms
            For j = 1 To NumberRooms + 1
                If j > room Then
                    For vent = 1 To NumberVents(room, j)
                        isoenergy = 0
                        If FRcriteria(room, j, vent) = 1 Then
                            limit = CInt(FRintegrity(room, j, vent) * 60) 's
                            For tt = 1 To limit
                                isotemp = 345 * Log(8 * (tt / 60) + 1) / Log(10.0#) + InteriorTemp 'K
                                isoenergy = isoenergy + StefanBoltzmann / 1000 * isotemp ^ 4 'kJ/m2
                            Next
                            FRfaildata(room, j, vent) = isoenergy
                            FRfaildata(j, room, vent) = isoenergy
                        End If
                    Next vent
                End If
            Next j
        Next room

        'ceiling vent
        For room = 1 To NumberRooms + 1
            For j = 1 To NumberRooms + 1
                For vent = 1 To NumberCVents(room, j)
                    isoenergy = 0
                    If FRcriteria2(room, j, vent) = 1 Then
                        limit = CInt(FRintegrity2(room, j, vent) * 60) 's
                        For tt = 1 To limit
                            isotemp = 345 * Log(8 * (tt / 60) + 1) / Log(10.0#) + InteriorTemp 'K
                            isoenergy = isoenergy + StefanBoltzmann / 1000 * isotemp ^ 4 'kJ/m2
                        Next
                        FRfaildata2(room, j, vent) = isoenergy
                        FRfaildata2(j, room, vent) = isoenergy
                    End If
                Next vent
            Next j
        Next room

    End Sub
    Private Sub RunOnce(ByVal datafile As String, ByVal itcounter As Integer, ByVal oSprinklers As Object, ByVal osprdistributions As Object, ByVal oSmokeDets As Object, ByVal osddistributions As Object, ByVal oFans As Object, ByVal ofandistributions As Object)

        Dim j, vent As Short
        Dim start, simend As Double
        Dim room As Integer
        ReDim FirstTime(NumberRooms)


        flagstop = 0
        For room = 1 To NumberRooms
            FirstTime(room) = True
        Next room
        Flashover = False
        burner_id = 0

        'note start time of simulation
        start = VB.Timer()
        MDIFrmMain.Timer1.Enabled = True

        'update all variables and calculate derived variables
        Derived_Variables()
        If flagstop = 1 Then Exit Sub
        Number_TimeSteps()
        ResetWindows()

        'Resize the data storage arrays based on the number of timesteps needed
        Size_Arrays()

        'check for a valid vent
        Check_Vent()

        'get the plume correlation to be used
        Get_Plume()

        'call procedure to initialize endpoint strings
        Initialize_EndPointFlags()

        If calcFRR = True Then
            'calculate NHL in furnace for the ceiling material

            Call surfacetempcalc(1, fireroom, HaveCeilingSubstrate(fireroom))

            'calculate NHL in furnace for the  wall material
            Call surfacetempcalc(2, fireroom, HaveWallSubstrate(fireroom))

            'calculate NHL in furnace for the floor material
            Call surfacetempcalc(4, fireroom, HaveFloorSubstrate(fireroom))

            For room = 1 To NumberRooms
                For j = room + 1 To NumberRooms + 1
                    For vent = 1 To NumberVents(room, j)
                        Dim t As Integer = FRintegrity(room, j, vent) * 60 'sec
                        If FRcriteria(room, j, vent) = 3 Then 'ceiling NHL
                            FRfaildata(room, j, vent) = furnaceNHL(0, t / Timestep)
                        ElseIf FRcriteria(room, j, vent) = 4 Then 'upper wall NHL
                            FRfaildata(room, j, vent) = furnaceNHL(1, t / Timestep)
                        ElseIf FRcriteria(room, j, vent) = 5 Then 'lower wall NHL
                            FRfaildata(room, j, vent) = furnaceNHL(1, t / Timestep)
                        ElseIf FRcriteria(room, j, vent) = 6 Then 'floor NHL
                            FRfaildata(room, j, vent) = furnaceNHL(2, t / Timestep)
                        End If
                    Next
                Next
            Next

            For room = 1 To NumberRooms + 1
                For j = 1 To NumberRooms + 1
                    For vent = 1 To NumberCVents(room, j)
                        Dim t As Integer = FRintegrity2(room, j, vent) * 60 'sec
                        If FRcriteria2(room, j, vent) = 3 Then 'ceiling NHL
                            FRfaildata2(room, j, vent) = furnaceNHL(0, t)
                        ElseIf FRcriteria2(room, j, vent) = 4 Then 'upper wall NHL
                            FRfaildata2(room, j, vent) = furnaceNHL(1, t)
                        ElseIf FRcriteria2(room, j, vent) = 5 Then 'lower wall NHL
                            FRfaildata2(room, j, vent) = furnaceNHL(1, t)
                        ElseIf FRcriteria2(room, j, vent) = 6 Then 'floor NHL
                            FRfaildata2(room, j, vent) = furnaceNHL(2, t)
                        End If
                    Next
                Next
            Next

            Call failfurnace_nyman()

        End If

        If TalkToEVACNZ = True Then
            'start evacuatioNZ
            Dim pathtoevacexe As String = "C:\Program Files (x86)\University of Canterbury\EvacuatioNZ\EvacuatioNZ.exe"
            Dim pathtoscenario As String = RiskDataDirectory & "scenario.xml"
           
            If File.Exists(pathtoevacexe) Then
                If File.Exists(pathtoscenario) Then
                    Shell(pathtoevacexe & " " & RiskDataDirectory & "scenario.xml", AppWinStyle.NormalNoFocus, , )
                Else
                    MsgBox("Scenario.xml not found. Simulation is terminated.", MsgBoxStyle.OkOnly, "EVACUATIONZ")
                    flagstop = 1
                End If
            Else
                MsgBox("EvacuatioNZ software is not found on this computer. Simulation is terminated.", MsgBoxStyle.OkOnly, "EVACUATIONZ")
                flagstop = 1
            End If
        End If

        'solve the ordinary differential equations for layer height
        'and upper layer temperature
        Call main_program2(itcounter, oSprinklers, osprdistributions, oSmokeDets, osddistributions)

        'reset the vent opening times
        ReDim VentBreakTime(MaxNumberRooms + 1, MaxNumberRooms + 1, MaxNumberVents)
        For room = 1 To NumberRooms
            For j = 1 To NumberRooms + 1
                If j > room Then
                    For vent = 1 To NumberVents(room, j)
                        VentBreakTime(room, j, vent) = VentOpenTime(room, j, vent)
                        VentOpenTime(room, j, vent) = oldVentOpenTime(room, j, vent)
                    Next vent
                End If
            Next j
        Next room
        'reset the ceiling vent opening times
        ReDim CVentBreakTime(MaxNumberRooms + 1, MaxNumberRooms + 1, MaxNumberCVents)
        For room = 1 To NumberRooms + 1
            For j = 1 To NumberRooms + 1
                For vent = 1 To NumberCVents(room, j)
                    CVentBreakTime(room, j, vent) = CVentOpenTime(room, j, vent)
                    CVentOpenTime(room, j, vent) = oldcVentOpenTime(room, j, vent)
                Next vent
            Next j
        Next room

        'calculate any volume fractions required
        Volume_Fractions()

        'calculation incapacitation FED's for toxicity
        ReDim FEDSum(NumberRooms, NumberTimeSteps + 2)
        ReDim FEDRadSum(NumberRooms, NumberTimeSteps + 1)
        ReDim SurfaceRad(NumberRooms, NumberTimeSteps + 2)

        If FEDCO = True Then
            Call FED_CO_iso13571_multi()
        Else
            Call FED_gases_multi()
        End If

        Call FED_thermal_iso13571_multi() 'multiple egress paths

        If calcFRR = True Then
            Call NormalisedHeatLoad(fireroom)

            Call eurocodeTE(itcounter)

            'Call calcAST()

            Call NHLcalcTE(itcounter)
        End If

        'note end time of simulation
        simend = VB.Timer()
        runtime = simend - start

        MDIFrmMain.ToolStripProgressBar1.Value = 0

        'save results in excel file
        Dim filepathbatch As String = BatchFileFolder & "\" & VB.Left(datafile, Len(datafile) - 4) & ".out"

        Call save_mc_output_xml(oSprinklers, oSmokeDets, oFans)

        'write binary plt file for smokeview
        MDIFrmMain.Timer1.Enabled = False

    End Sub
    Public Sub eurocodeTE(ByVal itcounter As Integer)
        'for the fire room

        Dim av As Double = 0
        Dim ah As Double = 0
        Dim bv As Double = 0
        Dim wf As Double = 0
        Dim kb As Double = 0
        Dim km As Double = 1
        Dim avent As Double = 0

        Dim thermalprop As Double = 0
        Dim floorarea As Double = RoomFloorArea(fireroom)

        For m = 1 To NumberVents(fireroom, NumberRooms + 1)
            av = av + ventarea(0, fireroom, NumberRooms + 1, m) 'finds the vent area at the start of the simulation
        Next
        av = av / floorarea
        If av < 0.025 Then
            av = 0.025
        End If
        If av > 0.25 Then
            av = 0.25
        End If

        For m = 1 To NumberCVents(NumberRooms + 1, fireroom)
            'ah = ah + CVentArea(NumberRooms + 1, fireroom, m)
            Call ventareasC(0, NumberRooms + 1, fireroom, m, avent) 'finds vent area at start of simulation
            ah = ah + avent
        Next
        ah = ah / floorarea

        bv = 12.5 * (1 + 10 * av - av ^ 2)

        wf = (6 / RoomHeight(fireroom)) ^ 0.3 * (0.62 + 90 * (0.4 - av) ^ 4 / (1 + bv * ah))
        If wf < 0.5 Then
            wf = 0.5
        End If


        thermalprop = ThermalInertiaCeiling(fireroom) * (floorarea - ah * floorarea) + ThermalInertiaFloor(fireroom) * floorarea + ThermalInertiaWall(fireroom) * (2 * RoomHeight(fireroom) * RoomLength(fireroom) + 2 * (RoomHeight(fireroom) + MinStudHeight(fireroom)) / 2 * RoomWidth(fireroom) - (floorarea - av * floorarea))
        thermalprop = thermalprop / (2 * floorarea + 2 * RoomHeight(fireroom) * RoomLength(fireroom) + 2 * RoomHeight(fireroom) * RoomWidth(fireroom) - av * floorarea - ah * floorarea)
        thermalprop = Sqrt(thermalprop) * 1000

        If thermalprop <= 400 Then
            kb = 0.1
        ElseIf thermalprop <= 700 Then
            kb = 0.09 + 0.01 * (700 - thermalprop) / 300
        ElseIf thermalprop <= 1100 Then
            kb = 0.08 + 0.01 * (1100 - thermalprop) / 400
        ElseIf thermalprop <= 1700 Then
            kb = 0.065 + 0.015 * (1700 - thermalprop) / 600
        ElseIf thermalprop <= 2500 Then
            kb = 0.04 + 0.025 * (2500 - thermalprop) / 800
        Else
            kb = 0.04
        End If

        TEeurocode = FLED * kb * km * wf
        timeequiv(0, itcounter - 1) = TEeurocode

    End Sub

    Private Function USERFUNC(ByVal X As Double, ByRef FX As Double, ByVal UT As Double, ByVal qrad As Double, ByVal emm As Double, ByVal h As Double)

        ' User-defined function subroutine
        ' f(x) 
        ' Input
        '  X = function argument
        ' Output
        '  FX = function value at X

        FX = emm * (qrad - StefanBoltzmann / 1000 * X ^ 4) + h / 1000 * (UT - X)
        Return FX

    End Function
    Private Sub REALROOT(ByVal XL As Double, ByVal XU As Double, ByVal TOL As Double, ByVal MAXITER As Integer, ByRef NITER As Integer, ByRef XROOT As Double, ByRef FROOT As Double, ByVal UT As Double, ByVal qrad As Double, ByVal emm As Double, ByVal h As Double)

        ' Real root of a non-linear function subroutine

        ' Input

        '  XL      = lower bound of search interval
        '  XU      = upper bound of search interval
        '  TOL     = convergence criteria
        '  MAXITER = maximum number of iterations

        ' Output

        '  XROOT = real root of F(X) = 0
        '  FROOT = function value
        '  NITER = number of iterations

        ' NOTE: requires SUB USERFUNC

        Dim BEPS As Double = 0.0000000001
        ' Dim i, j, k, l, m, n As Integer
        Dim a, b, c, d, e, p, q, r, s As Double
        Dim FA, FB, FC, TOL1, XM, TMP, XMIN As Double

        e = 0.0#
        a = XL
        b = XU

        Call USERFUNC(a, FA, UT, qrad, emm, h)
        Call USERFUNC(b, FB, UT, qrad, emm, h)

        FC = FB

        NITER = 0

        For ITER = 1 To MAXITER
            NITER = NITER + 1
            If (FB * FC > 0.0#) Then
                c = a
                FC = FA
                d = b - a
                e = d
            End If

            If (Abs(FC) < Abs(FB)) Then
                a = b
                b = c
                c = a
                FA = FB
                FB = FC
                FC = FA
            End If

            TOL1 = 2.0# * BEPS * Abs(b) + 0.5 * TOL

            XM = 0.5 * (c - b)

            If (Abs(XM) <= TOL1 Or FB = 0.0#) Then Exit For

            If (Abs(e) >= TOL1 And Abs(FA) > Abs(FB)) Then
                s = FB / FA
                If (a = c) Then
                    p = 2.0# * XM * s
                    q = 1.0# - s
                Else
                    q = FA / FC
                    r = FB / FC
                    p = s * (2.0# * XM * q * (q - r) - (b - a) * (r - 1.0#))
                    q = (q - 1.0#) * (r - 1.0#) * (s - 1.0#)
                End If

                If (p > 0.0#) Then q = -q

                p = Abs(p)
                XMIN = Abs(e * q)
                TMP = 3.0# * XM * q - Abs(TOL1 * q)

                If (XMIN < TMP) Then XMIN = TMP

                If (2.0# * p < XMIN) Then
                    e = d
                    d = p / q
                Else
                    d = XM
                    e = d
                End If
            Else
                d = XM
                e = d
            End If

            a = b
            FA = FB

            If (Abs(d) > TOL1) Then
                b = b + d
            Else
                b = b + Math.Sign(XM) * TOL1
            End If

            Call USERFUNC(b, FB, UT, qrad, emm, h)
        Next ITER

        FROOT = FB
        XROOT = b

    End Sub
    Public Sub calcAST()

        'Calculate the adiabatic surface temperatures

        Dim qrad, h, UT, emm, XROOT, FROOT As Double
        Dim NITER As Integer

        For i = 1 To NumberRooms
            For j = 1 To NumberTimeSteps + 1

                qrad = QCeilingAST(i, 0, j)
                h = QCeilingAST(i, 1, j)
                UT = uppertemp(i, j)
                emm = Surface_Emissivity(1, i)

                Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

                QCeilingAST(i, 2, j) = XROOT

            Next
        Next

        For i = 1 To NumberRooms
            For j = 1 To NumberTimeSteps + 1
                qrad = QUpperWallAST(i, 0, j)
                h = QUpperWallAST(i, 1, j)
                UT = uppertemp(i, j)
                emm = Surface_Emissivity(2, i)

                Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

                QUpperWallAST(i, 2, j) = XROOT

            Next
        Next

        For i = 1 To NumberRooms
            For j = 1 To NumberTimeSteps + 1
                qrad = QLowerWallAST(i, 0, j)
                h = QLowerWallAST(i, 1, j)
                UT = lowertemp(i, j)
                emm = Surface_Emissivity(3, i)

                Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

                QLowerWallAST(i, 2, j) = XROOT
                'If j = 1000 Then Stop
            Next
        Next

        For i = 1 To NumberRooms
            For j = 1 To NumberTimeSteps + 1
                qrad = QFloorAST(i, 0, j)
                h = QFloorAST(i, 1, j)
                UT = lowertemp(i, j)
                emm = Surface_Emissivity(4, i)

                Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

                QFloorAST(i, 2, j) = XROOT
            Next
        Next
    End Sub
    Public Sub calcAST2(ByVal stepc As Integer, ByVal room As Integer)

        'Calculate the adiabatic surface temperatures, once per timestep

        Dim qrad, h, UT, emm, XROOT, FROOT As Double
        Dim NITER, j As Integer

        j = stepc


        qrad = QCeilingAST(room, 0, j)
        h = QCeilingAST(room, 1, j)
        UT = uppertemp(room, j)
        emm = Surface_Emissivity(1, room)

        Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

        QCeilingAST(room, 2, j) = XROOT

        qrad = QUpperWallAST(room, 0, j)
        h = QUpperWallAST(room, 1, j)
        UT = uppertemp(room, j)
        emm = Surface_Emissivity(2, room)

        Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

        QUpperWallAST(room, 2, j) = XROOT

     
        qrad = QLowerWallAST(room, 0, j)
        h = QLowerWallAST(room, 1, j)
        UT = lowertemp(room, j)
        emm = Surface_Emissivity(3, room)

        Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

        QLowerWallAST(room, 2, j) = XROOT

       
        qrad = QFloorAST(room, 0, j)
        h = QFloorAST(room, 1, j)
        UT = lowertemp(room, j)
        emm = Surface_Emissivity(4, room)

        Call REALROOT(InteriorTemp, 2000, 0.000001, 50, NITER, XROOT, FROOT, UT, qrad, emm, h)

        QFloorAST(room, 2, j) = XROOT


    End Sub
    Public Sub NHLcalcTE(ByVal itcounter As Integer)
        Dim sum As Double
        Dim data(0 To 4, 0 To stepcount) As Double
        ReDim NHLte(0 To 4, 0 To stepcount)
        'Dim maxtime As Integer = 4 * 3600
        Dim maxtime As Integer = 6 * 3600
        room = fireroom

        sum = 0
        For i = 1 To stepcount
            'calculate NHL by integrating the flux
            If QCeiling(room, i) < 0 Then
                sum = sum - QCeiling(room, i) * Timestep / Sqrt(ThermalInertiaCeiling(room))
            Else
                'Stop
            End If
            data(1, i) = sum 'NHL in compartment fire 

            For j = 1 To maxtime
                If furnaceNHL(0, j) > sum Then
                    NHLte(1, i) = j * Timestep / 60 'min time in furnace test at which NHL is exceeded
                    Exit For
                End If
            Next

        Next
        NHLmax(1) = data(1, stepcount) 'ceiling max NHL reached in compartment fire
        timeequiv(1, itcounter - 1) = NHLte(1, stepcount)

        sum = 0
        For i = 1 To stepcount
            'calculate NHL by integrating the flux
            If QUpperWall(room, i) < 0 Then
                sum = sum - QUpperWall(room, i) * Timestep / Sqrt(ThermalInertiaWall(room))
            End If
            data(2, i) = sum 'NHL in compartment fire 

            For j = 1 To maxtime
                If furnaceNHL(1, j) > sum Then
                    NHLte(2, i) = j * Timestep / 60 'min time in furnace test at which NHL is exceeded
                    Exit For
                End If
            Next
        Next
        NHLmax(2) = data(2, stepcount) 'upper wall
        timeequiv(2, itcounter - 1) = NHLte(2, stepcount)

        sum = 0
        For i = 1 To stepcount
            'calculate NHL by integrating the flux
            If QLowerWall(room, i) < 0 Then
                sum = sum - QLowerWall(room, i) * Timestep / Sqrt(ThermalInertiaWall(room))
            End If
            data(3, i) = sum 'NHL in compartment fire 

            For j = 1 To maxtime
                If furnaceNHL(1, j) > sum Then
                    NHLte(3, i) = j * Timestep / 60 'min time in furnace test at which NHL is exceeded
                    Exit For
                End If
            Next
        Next
        NHLmax(3) = data(3, stepcount) 'lower wall
        timeequiv(3, itcounter - 1) = NHLte(3, stepcount)

        sum = 0
        For i = 1 To stepcount
            'calculate NHL by integrating the flux
            If QFloor(room, i) < 0 Then
                sum = sum - QFloor(room, i) * Timestep / Sqrt(ThermalInertiaFloor(room))
            End If
            data(4, i) = sum 'NHL in compartment fire 

            For j = 1 To maxtime
                If furnaceNHL(2, j) > sum Then
                    NHLte(4, i) = j * Timestep / 60 'min time in furnace test at which NHL is exceeded
                    Exit For
                End If
            Next
        Next
        NHLmax(4) = data(4, stepcount) 'floor
        timeequiv(4, itcounter - 1) = NHLte(4, stepcount)

        sum = 0
        For i = 1 To stepcount
            data(0, i) = NHL(1, room, i) 'weighted average
        Next
        NHLmax(0) = data(0, stepcount)

        'furnaceNHL(0 To 2, 0 To maxtime + 1)


        'compare with furnace NHL
        'For i = 1 To maxtime
        '    If furnaceNHL(0, i) > NHLmax(1) Then
        '        NHLte(1) = i / 60 'min
        '        Exit For
        '    End If
        'Next
        'For i = 1 To maxtime
        '    If furnaceNHL(1, i) > NHLmax(2) Then
        '        NHLte(2) = i / 60 'min
        '        Exit For
        '    End If
        'Next
        'For i = 1 To maxtime
        '    If furnaceNHL(2, i) > NHLmax(4) Then
        '        NHLte(4) = i / 60 'min
        '        Exit For
        '    End If
        'Next

    End Sub
    Public Sub NormalisedHeatLoad(ByVal room As Integer)

        'calculate the normalised heat load for each room at each timestep
        'NHL(0, room, stepcount) = sum 'm2 K s^-1/2
        'NHL(1, room, stepcount) = sum 'm2 K s^1/2

        'Dim D As NMathFunctions.DoubleUnaryFunction = AddressOf MyFunction
        'Dim F As New OneVariableFunction(D)
        'Dim Romberg As New RombergIntegrator()
        Dim H As Double = 0

        ' The Tolerance property gets and sets the error tolerance used in computing
        ' integrals. MaximumOrder gets and sets the maximum order.
        'Romberg.Tolerance = 1
        'Romberg.MaximumOrder = 10
        Dim sum As Double = 0

        For i = 1 To NumberTimeSteps + 1
            If NHL(0, room, i) > 0 Then
                sum = sum + (NHL(0, room, i) + NHL(0, room, i - 1)) / 2 * Timestep

                NHL(1, room, i) = sum
                'NHL(1, room, i) = Romberg.Integrate(F, 1, i)
            Else
                'NHL(1, room, i) = NHL(1, room, i - 1)
                NHL(1, room, i) = sum
            End If
        Next

        'calculate time of equiv. exposure in NRCC furnace from Harmathy
        For i = 1 To NumberTimeSteps + 1
            H = NHL(1, room, i)
            NHL(2, room, i) = 60 * (0.11 + 0.000016 * H + 0.00000000013 * H ^ 2) 'minutes
        Next

    End Sub
    Private Function MyFunction(ByVal i As Integer) As Double
        Return NHL(0, fireroom, i)
    End Function
   
    Public Sub save_mc_output_xml(ByVal oSprinklers As Object, ByVal oSmokeDets As Object, ByVal oFans As Object)
        'save simulation output to xml file
        Dim scount As Integer = 0

        For Each oSprinkler In oSprinklers
            If oSprinkler.responsetime > 0 And oSprinkler.responsetime < SimTime Then
                'find number of sprinkler that activated
                scount = scount + 1
            End If
        Next

        Dim room, i As Integer
        Dim myXMLsettings As New XmlWriterSettings

        Dim it As String = DataFile.Replace("input", "")
        it = it.Replace(".xml", "")
        it = CInt(it)

        Dim outputfile As String = DataFile.Replace("input", "output")
        myXMLsettings.Indent = True
        myXMLsettings.NewLineOnAttributes = True

        'outputfile = UserAppDataFolder & gcs_folder_ext & "\riskdata\" & outputfile
        outputfile = RiskDataDirectory & outputfile

        Using DFW As XmlWriter = XmlWriter.Create(outputfile, myXMLsettings)

            DFW.WriteComment("Created by B-RISK Version " & Version)
            DFW.WriteStartElement("output")
            DFW.WriteStartElement("run")
            DFW.WriteAttributeString("id", DataFile)

            DFW.WriteAttributeString("runtime", String.Format("{0:f1}", runtime))
            DFW.WriteAttributeString("sampled_FLED", String.Format("{0:f1}", FLED))
            DFW.WriteAttributeString("actual_FLED", String.Format("{0:f1}", mc_FLED_actual(it - 1)))
            DFW.WriteAttributeString("time_equiv_vm", String.Format("{0:f3}", timeequiv(0, it - 1)))
            DFW.WriteAttributeString("time_equiv_c", String.Format("{0:f3}", timeequiv(1, it - 1)))
            DFW.WriteAttributeString("time_equiv_uw", String.Format("{0:f3}", timeequiv(2, it - 1)))
            DFW.WriteAttributeString("time_equiv_f", String.Format("{0:f3}", timeequiv(4, it - 1)))

            DFW.WriteAttributeString("fitted_alpha", String.Format("{0:f3}", alphaTfitted(0, it - 1)))
            DFW.WriteAttributeString("HRR_at_FO", String.Format("{0:f3}", alphaTfitted(1, it - 1)))
            DFW.WriteAttributeString("time_at_FO", String.Format("{0:f3}", alphaTfitted(2, it - 1)))
            DFW.WriteAttributeString("HRR_at_VL", String.Format("{0:f3}", alphaTfitted(3, it - 1)))
            DFW.WriteAttributeString("time_at_VL", String.Format("{0:f3}", alphaTfitted(4, it - 1)))

            If HDFlag = 1 Then
                DFW.WriteAttributeString("heat_detector_activation_time", HDTime)
            Else
                DFW.WriteAttributeString("heat_detector_activation_time", "NR")
            End If
            If SprinklerFlag = 1 Then
                DFW.WriteAttributeString("sprinkler_activation_time", SprinklerTime)
            Else
                DFW.WriteAttributeString("sprinkler_activation_time", "NR")
            End If
            DFW.WriteAttributeString("num_sprinklers_activated", scount)

            DFW.WriteStartElement("responsetime")
            DFW.WriteAttributeString("number", NumSprinklers)

            For Each oSprinkler In oSprinklers
                DFW.WriteStartElement("sprinkler")
                DFW.WriteAttributeString("id", oSprinkler.sprid)
                DFW.WriteAttributeString("value", String.Format("{0:f1}", oSprinkler.responsetime))
                DFW.WriteAttributeString("units", "sec")
                DFW.WriteEndElement()
            Next
            DFW.WriteEndElement()

            DFW.WriteStartElement("smoke_detectors")
            For Each oSmokeDet In oSmokeDets
                DFW.WriteStartElement("smoke_detector")
                DFW.WriteAttributeString("id", oSmokeDet.sdid)
                DFW.WriteAttributeString("responsetime", String.Format("{0:f1}", oSmokeDet.responsetime))
                DFW.WriteAttributeString("units", "sec")
                DFW.WriteEndElement()
            Next
            DFW.WriteEndElement()

            DFW.WriteStartElement("fans")
            For Each oFan In oFans
                DFW.WriteStartElement("fan")
                DFW.WriteAttributeString("id", oFan.fanid)
                DFW.WriteAttributeString("responsetime", String.Format("{0:f1}", fandata(oFan.fanid, 3))) 'time at which fan actually started
                DFW.WriteAttributeString("units", "sec")
                DFW.WriteEndElement()
            Next
            DFW.WriteEndElement()

            DFW.WriteStartElement("items")
            DFW.WriteAttributeString("value", NumberObjects)
            'add ignition times of secondary objects
            For i = 2 To NumberObjects
                DFW.WriteStartElement("secondary_item_ignition_time")
                DFW.WriteAttributeString("id", ObjectItemID(i))
                DFW.WriteAttributeString("description", ObjectDescription(i))
                DFW.WriteAttributeString("value", ObjectIgnTime(i))
                DFW.WriteAttributeString("units", "sec")
                DFW.WriteAttributeString("ignmode", ObjectIgnMode(i))
                DFW.WriteEndElement()
            Next
            DFW.WriteEndElement()

            If NumberTimeSteps > 0 Then
                For room = 1 To NumberRooms
                    DFW.WriteStartElement("room")
                    DFW.WriteAttributeString("id", room)


                    For i = 1 To NumberTimeSteps + 1

                        If IEEERemainder(tim(i, 1), Me.txtOutputInterval.Text) = 0 Then

                            DFW.WriteStartElement("time")
                            DFW.WriteAttributeString("value", String.Format("{0:f1}", tim(i, 1)))
                            DFW.WriteAttributeString("units", "sec")

                            DFW.WriteStartElement("HeatRelease")
                            DFW.WriteAttributeString("value", String.Format("{0:f1}", HeatRelease(room, i, 2)))
                            DFW.WriteAttributeString("units", "kW")
                            DFW.WriteEndElement()

                            DFW.WriteStartElement("layerheight")
                            DFW.WriteAttributeString("value", String.Format("{0:f3}", layerheight(room, i)))
                            DFW.WriteAttributeString("units", "m")
                            DFW.WriteEndElement()

                            DFW.WriteStartElement("uppertemp")
                            DFW.WriteAttributeString("value", String.Format("{0:f2}", uppertemp(room, i) - 273))
                            DFW.WriteAttributeString("units", "C")
                            DFW.WriteEndElement()

                            DFW.WriteStartElement("lowertemp")
                            DFW.WriteAttributeString("value", String.Format("{0:f2}", lowertemp(room, i) - 273))
                            DFW.WriteAttributeString("units", "C")
                            DFW.WriteEndElement()

                            DFW.WriteStartElement("FEDSum")
                            DFW.WriteAttributeString("value", String.Format("{0:f3}", FEDSum(room, i)))
                            DFW.WriteAttributeString("units", "-")
                            DFW.WriteEndElement()

                            DFW.WriteStartElement("Visibility")
                            DFW.WriteAttributeString("value", String.Format("{0:f3}", Visibility(room, i)))
                            DFW.WriteAttributeString("units", "m")
                            DFW.WriteEndElement()

                            DFW.WriteStartElement("FEDRadSum")
                            DFW.WriteAttributeString("value", String.Format("{0:f3}", FEDRadSum(room, i)))
                            DFW.WriteAttributeString("units", "-")
                            DFW.WriteEndElement()

                            DFW.WriteEndElement() 'end room
                        End If
                    Next
                    DFW.WriteEndElement() 'end time
                Next
            End If
            DFW.WriteEndElement() 'end run
            DFW.WriteEndElement() 'end output
        End Using
    End Sub


    Private Sub frmInputs_FormClosing(ByVal eventSender As System.Object, ByVal eventArgs As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        Dim Cancel As Boolean = eventArgs.Cancel
        Dim UnloadMode As System.Windows.Forms.CloseReason = eventArgs.CloseReason
        eventArgs.Cancel = Cancel


    End Sub

    Private Sub frmInputs_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Me.MdiParent = MDIFrmMain
        'Me.BringToFront()

        'Centre_Form(Me)
        Me.AddOwnedForm(frmPopulate)
        Me.AddOwnedForm(frmDistParam)
        NumericUpDownCounter.Minimum = 1
        NumericUpDownCounter.Maximum = 1
        Label4.Text = "Default riskdata folder is: " & DefaultRiskDataDirectory
        Label5.Text = "Current project folder is: " & RiskDataDirectory
    End Sub

    Private Sub SaveBaseModelToolStripMenuItem1_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SaveBaseModelToolStripMenuItem1.Click

        'Dim myStream As Stream
        'Dim SaveBox As New SaveFileDialog()
        'Dim getfolder As String = "basemodel_default"

        Try
            MDIFrmMain.SaveBaseToolStripMenuItem.PerformClick()


        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.Exclamation, "Exception in frminputs.vb SaveBaseModelToolStripMenuItem1")

        End Try
    End Sub

    Private Sub InteriorTempToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for interior ambient temperature
        '*  ==========================================================

        Dim param = "Interior Temperature"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        Try

            length = mc_InteriorTemp.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_InteriorTemp, tempdatain, length)

            xtitle = " Interior Ambient Temperature (K)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_InteriorTemp(index))
            Next index

            Call show_histogram_input()

            Chart1.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in InteriorTempToolStripMenuItem")
        End Try
    End Sub

    Private Sub ShowPlotToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        frmPlot.Show()
    End Sub

    Private Sub HistogramToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for exterior ambient temperature
        '*  ==========================================================

        Dim param = "Exterior Temperature"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next
        Dim Title As String

        If (mc_ExteriorTemp Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Try

            'define variables
            Title = "Input Data - Frequency Plot: " & txtNumberIterations.Text & " iterations " & distname & " distribution"

            frmPlot.Chart1.Series.Clear()
            frmPlot.Chart1.Series.Add("Series1")

            Dim index As Integer
            For index = 0 To txtNumberIterations.Text - 1
                frmPlot.Chart1.Series("Series1").Points.AddY(mc_ExteriorTemp(index))
            Next index

            ' HistogramChartHelper is a helper class found in the samples Utilities folder. 
            Dim histogramHelper As New HistogramChartHelper()

            ' Show the percent frequency on the right Y axis.
            histogramHelper.ShowPercentOnSecondaryYAxis = False

            ' Specify number of segment intervals
            'histogramHelper.SegmentIntervalNumber = 10

            ' Or you can specify the exact length of the interval
            'histogramHelper.SegmentIntervalWidth = 5

            ' Create histogram series    
            histogramHelper.CreateHistogram(frmPlot.Chart1, "Series1", "Histogram")

            frmPlot.Chart1.ChartAreas("ChartArea1").AxisX.Title = "Exterior Temperature (K)"
            frmPlot.Chart1.Legends("Legend1").Enabled = False
            frmPlot.Chart1.Titles("Title1").Text = Title
            frmPlot.Chart1.Visible = True
            Label4.Visible = False
            Label5.Visible = False
            frmPlot.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HistogramToolStripMenuItem1")
        End Try
    End Sub

    Private Sub HistogramToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for ambient relative humidity
        '*  ==========================================================

        Dim param = "Relative Humidity"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String

        If (mc_RelativeHumidity Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Try

            'define variables
            Title = "Input Data - Frequency Plot: " & txtNumberIterations.Text & " iterations " & distname & " distribution"

            frmPlot.Chart1.Series.Clear()
            frmPlot.Chart1.Series.Add("Series1")

            Dim index As Integer
            For index = 0 To txtNumberIterations.Text - 1
                frmPlot.Chart1.Series("Series1").Points.AddY(mc_RelativeHumidity(index))
            Next index

            ' HistogramChartHelper is a helper class found in the samples Utilities folder. 
            Dim histogramHelper As New HistogramChartHelper()

            ' Show the percent frequency on the right Y axis.
            histogramHelper.ShowPercentOnSecondaryYAxis = False

            ' Specify number of segment intervals
            'histogramHelper.SegmentIntervalNumber = 10

            ' Or you can specify the exact length of the interval
            histogramHelper.SegmentIntervalWidth = 5

            ' Create histogram series    
            histogramHelper.CreateHistogram(frmPlot.Chart1, "Series1", "Histogram")

            frmPlot.Chart1.ChartAreas("ChartArea1").AxisX.Title = "Relative Humidity (-)"
            frmPlot.Chart1.Legends("Legend1").Enabled = False
            frmPlot.Chart1.Titles("Title1").Text = Title
            frmPlot.Chart1.Visible = True
            Label4.Visible = False
            Label5.Visible = False
            frmPlot.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HistogramToolStripMenuItem2")
        End Try
    End Sub

    Private Sub UpperLayerTemperatureToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for upper layer temperature
        '*  ==========================================================

        If (mc_ULTemp Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_ULTemp.GetLength(0) * mc_ULTemp.GetLength(1) * mc_ULTemp.GetLength(2)
            Array.Copy(mc_ULTemp, tempdata, length)

            xtitle = " Upper Layer Temperature (C)"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_ULTemp(room, counter, index))
            Next index

            NumericUpDown1.Minimum = 0
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in UpperLayerTemperatureToolStripMenuItem2")
        End Try
    End Sub
    Private Sub show_histogram_output()
        Try

            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            Label3.Visible = True
            NumericUpDownCounter.Visible = True

            NumericUpDown_Bins.Show()
            Label45.Show()
            IterationUpDown.Hide()
            Label40.Hide()


            Panel1.BringToFront()

            counter = 1
            ToolStrip1.Visible = False
            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Ceiling((SimTime / OutputInterval))
            ' counter corresponds to time = counter x outputinterval
            'NumericUpDown1.Minimum = 0

            NumericUpDown1.Maximum = counter * OutputInterval
            'NumericUpDown1.Value = counter * OutputInterval
            NumericUpDown1.Increment = OutputInterval
            NumericUpDown1.Show()
            Label18.Visible = True
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Hide()
            Label40.Visible = False
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

            Chart1.Legends("Legend1").Enabled = False
            Chart1.Dock = DockStyle.Fill

            Chart1.Visible = True
            Chart2.Visible = False
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True
            Chart1.Top = 20
            ' HistogramChartHelper is a helper class found in the samples Utilities folder. 
            Dim histogramHelper As New HistogramChartHelper()

            ' Show the percent frequency on the right Y axis.
            histogramHelper.ShowPercentOnSecondaryYAxis = False

            histogramHelper.SegmentIntervalWidth = Double.NaN
            ' Specify number of segment intervals
            histogramHelper.SegmentIntervalNumber = NumericUpDown_Bins.Value
            'histogramHelper.SegmentIntervalNumber = 50

            If xtitle = " No. Sprinklers Operated" Then
                histogramHelper.SegmentIntervalWidth = 1
                histogramHelper.SegmentIntervalNumber = NumSprinklers + 1
            Else
                histogramHelper.SegmentIntervalWidth = Double.NaN
                ' Specify number of segment intervals
                histogramHelper.SegmentIntervalNumber = NumericUpDown_Bins.Value
                'histogramHelper.SegmentIntervalNumber = 50
            End If
            ' Or you can specify the exact length of the interval
            'histogramHelper.SegmentIntervalWidth = 1

            ' Create histogram series    
            histogramHelper.CreateHistogram(Chart1, "Series1", "Histogram")

            Chart1.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HistogramToolStripMenuItem1")
        End Try
        'NumericUpDown1.Show()
        'NumericUpDownRoom.Show()
    End Sub
    Private Sub show_histogram_input()

        Chart1.Visible = True 'histograms
        Chart2.Visible = False 'cdf plots
        Chart3.Visible = False
        Label4.Visible = False
        Label5.Visible = False
        NumericUpDown1.Visible = False
        NumericUpDownRoom.Visible = False
        Label19.Visible = False
        Label18.Visible = False
        'Label3.Visible = True
        'NumericUpDownCounter.Visible = True
        NumericUpDown_Bins.Show()
        Label45.Show()
        IterationUpDown.Hide()
        Label40.Hide()
        Panel1.BringToFront()
        Chart1.Legends("Legend1").Enabled = False
        Chart1.Dock = DockStyle.Fill
        Label4.Visible = False
        Label5.Visible = False

        Chart1.Visible = True
        ToolStrip1.Visible = False
        PageToolStripMenuItem.Visible = True
        PrintPreviewToolStripMenuItem.Visible = True
        PrintToolStripMenuItem.Visible = True

        ' HistogramChartHelper is a helper class found in the samples Utilities folder. 
        Dim histogramHelper As New HistogramChartHelper()

        ' Show the percent frequency on the right Y axis.
        histogramHelper.ShowPercentOnSecondaryYAxis = False

        ' Specify number of segment intervals
        histogramHelper.SegmentIntervalWidth = Double.NaN
        histogramHelper.SegmentIntervalNumber = Convert.ToDouble(NumericUpDown_Bins.Value)

        ' Or you can specify the exact length of the interval
        'histogramHelper.SegmentIntervalWidth = 1

        ' Create histogram series    
        histogramHelper.CreateHistogram(Chart1, "Series1", "Histogram")

        Chart1.Show()
    End Sub


    Private Sub InteriorTemperatureToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'box plot 
        ' Populate series data
        'Dim yValues As Double() = {55.62, 45.54, 73.45, 9.73, 88.42, 45.9, 63.6, 85.1, 67.2, 23.6}

        Dim param = "Interior Temperature"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String

        Try
            If (mc_InteriorTemp Is Nothing) Then
                MsgBox("No data")
                Exit Sub
            End If

            'define variables
            Title = "Input Data - Box Plot: " & txtNumberIterations.Text & " iterations " & distname & " distribution"
            frmPlot.Chart1.Series.Clear()
            frmPlot.Chart1.Series.Add("Series1")
            frmPlot.Chart1.Series.Add("BoxPlotSeries")

            frmPlot.Chart1.Series("Series1").Points.DataBindY(mc_InteriorTemp)
            frmPlot.Chart1.Series("Series1").Enabled = False
            ' Set Box Plot chart type
            frmPlot.Chart1.Series("BoxPlotSeries").ChartType = SeriesChartType.BoxPlot

            ' Specify data series name for the Box Plot
            frmPlot.Chart1.Series("BoxPlotSeries")("BoxPlotSeries") = "Series1"

            ' Set whiskers percentile
            frmPlot.Chart1.Series("BoxPlotSeries")("BoxPlotWhiskerPercentile") = "5"

            ' Set box percentile
            frmPlot.Chart1.Series("BoxPlotSeries")("BoxPlotPercentile") = "30"

            ' Hide Average line
            frmPlot.Chart1.Series("BoxPlotSeries")("BoxPlotShowAverage") = "false"

            ' Show/Hide Median line
            frmPlot.Chart1.Series("BoxPlotSeries")("BoxPlotShowMedian") = "true"

            ' Show Unusual points
            frmPlot.Chart1.Series("BoxPlotSeries")("BoxPlotShowUnusualValues") = "true"
            frmPlot.Chart1.ChartAreas("ChartArea1").AxisY.Minimum = 270
            frmPlot.Chart1.ChartAreas("ChartArea1").AxisY.Title = "Interior Temperature (K)"
            frmPlot.Chart1.Legends("Legend1").Enabled = False
            frmPlot.Chart1.Titles("Title1").Text = Title
            frmPlot.Chart1.Visible = True
            Label4.Visible = False
            Label5.Visible = False
            frmPlot.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in InteriorTemperatureToolStripMenuItem")
        End Try
    End Sub
    Private Sub Update_cdf()

        Dim room As Integer
        Dim formatstring As String = ""

        Try

            room = NumericUpDownRoom.Value
            If room = 0 Then
                room = 1
                NumericUpDownRoom.Value = 1
            End If

            If OutputInterval > 0 Then
                counter = NumericUpDown1.Value / OutputInterval
            Else
                Exit Sub
            End If

            Chart2.Series.Clear()
            Chart2.Series.Add("Room " & room)
            If xtitle = " Sprinkler Activation Time (sec)" Then
                Chart2.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Else
                Chart2.ChartAreas("ChartArea1").AxisX.Title = "Room " & room & xtitle & " at " & CStr(counter * OutputInterval) & " sec"
            End If
            Chart2.Series("Room " & room).ChartType = SeriesChartType.FastLine
            Chart2.Legends("Legend1").Enabled = False
            Chart2.Dock = DockStyle.Fill
            Chart2.Series("Room " & room).Points.Clear()


            For k = 0 To IterationsCompleted - 1
                Select Case xtitle
                    Case " Upper Layer Temperature (C)"
                        tempdatain(k) = mc_ULTemp(room, counter, k)
                        If k = 0 Then formatstring = "{0:f1}"
                    Case " Heat Release Rate (kW)"
                        tempdatain(k) = mc_HRR(room, counter, k)
                        If k = 0 Then formatstring = "{0:f0}"
                    Case " Lower Layer Temperature (C)"
                        tempdatain(k) = mc_LLTemp(room, counter, k)
                        If k = 0 Then formatstring = "{0:f1}"
                    Case " Layer Height (m)"
                        tempdatain(k) = mc_LayerHeight(room, counter, k)
                        If k = 0 Then formatstring = "{0:f2}"
                    Case " FED Gases"
                        tempdatain(k) = mc_FEDgas(room, counter, k)
                        If k = 0 Then formatstring = "{0:f3}"
                    Case " FED Heat"
                        tempdatain(k) = mc_FEDheat(room, counter, k)
                        If k = 0 Then formatstring = "{0:f3}"
                    Case " Visibility (m)"
                        tempdatain(k) = mc_visi(room, counter, k)
                        If k = 0 Then formatstring = "{0:f1}"
                    Case " Sprinkler Activation Time (sec)"
                        'tempdatain(k) = mc_sat(room, counter, k)
                        tempdatain(k) = mc_sat(0, k)
                        If k = 0 Then formatstring = "{0:f0}"
                    Case " No. Sprinklers Activated"
                        tempdatain(k) = mc_sprnum(room, counter, k)

                        If k = 0 Then formatstring = "{0:f0}"
                End Select
            Next k

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format(formatstring, CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile = " & p90
            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in Update_cdf")
        End Try

    End Sub
    Private Sub Update_timeseries(ByVal DataMultiplier As Double, ByVal DataShift As Double)

        Dim room As Integer, k As Integer, j As Integer
        Dim ydata(0 To counter + 1) As Double

        Try

            room = NumericUpDownRoom.Value
            If room = 0 Then
                room = 1
                NumericUpDownRoom.Value = 1
            End If

            If OutputInterval > 0 Then
                'max number of time periods for which the data is available
                If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            Else
                Exit Sub
            End If

            Chart3.Series.Clear()
            Panel1.BringToFront()

            Dim Title As String = "Output Data - Time-series Plot: " & "Room " & NumericUpDownRoom.Value & ". " & IterationsCompleted & " iterations"
            Chart3.Titles("Title1").Text = Title

            If IterationUpDown.Value = 0 Then 'show all series
                For k = 0 To IterationsCompleted - 1

                    Chart3.Series.Add(CStr(k))
                    Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                    For j = 0 To counter

                        Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                            Case "Upper Layer Temperature (C)"
                                ydata(j) = mc_ULTemp(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Heat Release Rate (kW)"
                                ydata(j) = mc_HRR(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Lower Layer Temperature (C)"
                                ydata(j) = mc_LLTemp(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Layer Height (m)"
                                ydata(j) = mc_LayerHeight(room, j, k) * DataMultiplier + DataShift 'data to be plotted 
                            Case "FED gases (-)"
                                ydata(j) = mc_FEDgas(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "FED thermal (-)"
                                ydata(j) = mc_FEDheat(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Visibility (m)"
                                ydata(j) = mc_visi(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "No. Sprinklers Activated"
                                ydata(j) = mc_sprnum(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                        End Select

                        Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                    Next

                Next k
            Else

                k = IterationUpDown.Value - 1
                If k < IterationsCompleted Then
                    Chart3.Series.Add(CStr(k))
                    Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                    For j = 0 To counter

                        Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                            Case "Upper Layer Temperature (C)"
                                ydata(j) = mc_ULTemp(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Heat Release Rate (kW)"
                                ydata(j) = mc_HRR(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Lower Layer Temperature (C)"
                                ydata(j) = mc_LLTemp(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Layer Height (m)"
                                ydata(j) = mc_LayerHeight(room, j, k) * DataMultiplier + DataShift 'data to be plotted 
                            Case "FED gases (-)"
                                ydata(j) = mc_FEDgas(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "FED thermal (-)"
                                ydata(j) = mc_FEDheat(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "Visibility (m)"
                                ydata(j) = mc_visi(room, j, k) * DataMultiplier + DataShift 'data to be plotted
                            Case "No. Sprinklers Activated"
                                ydata(j) = mc_sprnum(room, j, k) * DataMultiplier + DataShift 'data to be plotted

                        End Select

                        Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                    Next
                End If
            End If

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in Update_timeseries")
        End Try

    End Sub
    Private Sub Update_timeseries_percentile(ByVal DataMultiplier As Double, ByVal DataShift As Double)

        Dim room As Integer, k As Integer, j As Integer
        Dim ydata(0 To counter + 1) As Double
        Dim title As String
        Try

            room = NumericUpDownRoom.Value
            If room = 0 Then
                room = 1
                NumericUpDownRoom.Value = 1
            End If

            If OutputInterval > 0 Then
                'max number of time periods for which the data is available
                If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            Else
                Exit Sub
            End If

            Chart3.Series.Clear()
            Panel1.BringToFront()

            k = PercentileUpDown.Value
            'If k < IterationsCompleted Then
            Chart3.Series.Add(CStr(k))
            Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine
            title = "Time-series Plot: Upper " & k.ToString & "th Percentile"
            Chart3.Titles("Title1").Text = title
            Dim room_id As Integer = 1
            Dim percentile(0 To 100, 0 To counter) As Double

            For j = 0 To counter

                Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                    Case "Upper Layer Temperature (C)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_ULTemp(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "Heat Release Rate (kW)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_HRR(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "Lower Layer Temperature (C)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_LLTemp(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "Layer Height (m)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_LayerHeight(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "FED gases (-)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_FEDgas(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "FED thermal (-)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_FEDheat(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "Visibility (m)"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_visi(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                    Case "No. Sprinklers Activated"
                        For m = 0 To IterationsCompleted - 1
                            tempdatain(m) = mc_sprnum(room_id, j, m) * DataMultiplier + DataShift
                        Next m
                End Select

                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                For i = 0 To 100
                    percentile(i, j) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                Next
                ydata(j) = percentile(k, j)

                Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
            Next



        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in Update_timeseries_percentile")
        End Try

    End Sub
    Private Sub Update_Histogram()
        Dim index, room, fanid As Integer
        Try
            fanid = NumericUpDownCounter.Value
            room = NumericUpDownRoom.Value
            If OutputInterval > 0 Then
                counter = NumericUpDown1.Value / OutputInterval
            Else
                Exit Sub
            End If

            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")
            Chart1.ChartAreas("ChartArea1").AxisX.Title = "Room " & room & xtitle & " at " & CStr(counter * OutputInterval) & " sec"

            'For index = 0 To IterationsCompleted - 1
            '    Chart1.Series("Series1").Points.AddY(tempdata(room, counter, index))
            'Next index
            For index = 0 To IterationsCompleted - 1

                Chart1.Series("Series1").Points.AddY(CInt(tempdata(room, counter, index)))

            Next index

            ' HistogramChartHelper is a helper class found in the samples Utilities folder. 
            Dim histogramHelper As New HistogramChartHelper()

            ' Show the percent frequency on the right Y axis.
            histogramHelper.ShowPercentOnSecondaryYAxis = False

            ' Specify number of segment intervals
            If xtitle = " No. Sprinklers Operated" Then
                histogramHelper.SegmentIntervalWidth = 1
                histogramHelper.SegmentIntervalNumber = NumSprinklers + 1
            Else
                histogramHelper.SegmentIntervalWidth = Double.NaN
                ' Specify number of segment intervals
                histogramHelper.SegmentIntervalNumber = NumericUpDown_Bins.Value
            End If

            ' Or you can specify the exact length of the interval
            'histogramHelper.SegmentIntervalWidth = 5

            ' Create histogram series    
            histogramHelper.CreateHistogram(Chart1, "Series1", "Histogram")



        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in Update_Histogram")
        End Try
    End Sub
    Private Sub Update_Histogram2()
        Dim index, room, length As Integer
        Dim title As String
        Try

            room = NumericUpDownRoom.Value
            If OutputInterval > 0 Then
                counter = NumericUpDown1.Value / OutputInterval
            Else
                Exit Sub
            End If

            If xtitle = " No. Sprinklers Operated" Then
                length = mc_sprnum.GetLength(0) * mc_sprnum.GetLength(1) * mc_sprnum.GetLength(2)
                'Array.Clear(tempdata, 0, length)
                Array.Copy(mc_sprnum, tempdata, length)
            Else
            End If

            Chart1.Series(0).Enabled = True

            For Each x In Chart1.Series
                If x.Name = "Histogram" Then
                    Exit For
                End If
                If Chart1.Series.Last.Equals(x) Then Exit Sub

            Next

            Chart1.Series.Remove(Chart1.Series("Histogram"))

            'define variables
            title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(tempdata(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

            NumericUpDown1.Visible = True
            Label18.Visible = True

            Dim SearchWithinThis As String = Chart1.ChartAreas("ChartArea1").AxisX.Title
            Dim SearchForThis As String = " No. Sprinklers Operated"
            Dim FirstCharacter As Integer = SearchWithinThis.IndexOf(SearchForThis)

            If FirstCharacter <> -1 Then 'substring found
                Chart1.ChartAreas("ChartArea1").AxisX.Minimum = 0
                Chart1.ChartAreas("ChartArea1").AxisX.Maximum = NumSprinklers + 1
            End If

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in Update_Histogram2")
        End Try
    End Sub
    Private Sub NumericUpDown1_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericUpDown1.ValueChanged

        If Chart1.Visible Then Call Update_Histogram2()

        If Chart2.Visible Then Call Update_cdf()


    End Sub

    Private Sub CloseGraphsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CloseGraphsToolStripMenuItem.Click
        Chart1.Hide()
        Chart2.Hide()
        Chart3.Hide()
        NumericUpDown1.Hide()
        NumericUpDownRoom.Hide()
        NumericUpDown_Bins.Hide()
        Label3.Hide()
        NumericUpDownCounter.Hide()
        Label45.Hide()


        IterationUpDown.Hide()
        Label40.Visible = False
        Label18.Visible = False
        Label19.Visible = False
        PageToolStripMenuItem.Visible = False
        PrintPreviewToolStripMenuItem.Visible = False
        PrintToolStripMenuItem.Visible = False
        ToolStrip1.Visible = True
    End Sub


    Private Sub NumericUpDownRoom_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericUpDownRoom.ValueChanged

        If Chart1.Visible Then Call Update_Histogram()

        If Chart2.Visible Then Call Update_cdf()

        If Chart3.Visible Then Call Update_timeseries(1, 0)

    End Sub

    Private Sub ExteriorTempToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for exterior ambient temperature
        '*  ==========================================================

        Dim param = "Exterior Temperature"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_ExteriorTemp.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_ExteriorTemp, tempdatain, length)

            xtitle = " Exterior Ambient Temperature (K)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_ExteriorTemp(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ExteriorTempToolStripMenuItem")
        End Try
    End Sub

    Private Sub OutputsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

    End Sub

    Private Sub FEDGasesToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for FED Gases
        '*  ==========================================================

        If (mc_FEDgas Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_FEDgas.GetLength(0) * mc_FEDgas.GetLength(1) * mc_FEDgas.GetLength(2)
            Array.Copy(mc_FEDgas, tempdata, length)
            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " FED gases"

            'define variables
            ' Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            ' For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FEDgas(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem2")
        End Try

    End Sub

    Private Sub LowerLayerTemperatureToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for lower layer temperature
        '*  ==========================================================

        If (mc_LLTemp Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try
            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            length = mc_LLTemp.GetLength(0) * mc_LLTemp.GetLength(1) * mc_LLTemp.GetLength(2)
            Array.Copy(mc_LLTemp, tempdata, length)

            xtitle = " Lower Layer Temperature (C)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_LLTemp(room, counter, index))
            Next index

            NumericUpDown1.Minimum = 0
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem2")
        End Try
    End Sub

    Private Sub LayerHeightToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for lower layer temperature
        '*  ==========================================================

        If (mc_LayerHeight Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try
            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            length = mc_LayerHeight.GetLength(0) * mc_LayerHeight.GetLength(1) * mc_LayerHeight.GetLength(2)
            Array.Copy(mc_LayerHeight, tempdata, length)

            xtitle = " Layer Height (m)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_LayerHeight(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LayerheightToolStripMenuItem2")
        End Try
    End Sub

    Private Sub txtNumberIterations_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtNumberIterations.LostFocus
        If IsNumeric(Me.Text) Then
            NumberIterations = CInt(Me.Text)
        End If
    End Sub


    Private Sub txtNumberIterations_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtNumberIterations.TextChanged

    End Sub

    Private Sub FEDHeatToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for FED thermal
        '*  ==========================================================

        If (mc_FEDheat Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_FEDheat.GetLength(0) * mc_FEDheat.GetLength(1) * mc_FEDheat.GetLength(2)
            Array.Copy(mc_FEDheat, tempdata, length)


            xtitle = " FED thermal"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FEDheat(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDHeatToolStripMenuItem2")
        End Try
    End Sub

    Private Sub VisibilityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for FED thermal
        '*  ==========================================================

        If (mc_visi Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_visi.GetLength(0) * mc_visi.GetLength(1) * mc_visi.GetLength(2)
            Array.Copy(mc_visi, tempdata, length)


            xtitle = " Visibility (m)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_visi(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem2")
        End Try
    End Sub

    Private Sub RelativeHumidityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for ambient RH
        '*  ==========================================================

        Dim param = "Relative Humidity"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_RelativeHumidity.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_RelativeHumidity, tempdatain, length)

            xtitle = "Ambient Relative Humidity"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_RelativeHumidity(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RelativeHumidityToolStripMenuItem")
        End Try
    End Sub


    Private Sub cdf_include_output(ByRef xTitle, ByRef Title, ByRef datashift, ByRef DataMultiplier, ByRef MaxYValue, ByRef counter, ByRef room)

        ' Title = "Output Data - CDF Plot: " & NumberIterations & " iterations"
        Title = "Output Data - CDF Plot: " & IterationsCompleted & " iterations"
        ToolStrip1.Visible = False
        Chart1.Visible = False 'histograms
        Chart2.Visible = True 'cdf plots
        Chart3.Visible = False
        Label4.Visible = False
        Label5.Visible = False
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        Panel1.BringToFront()
        PageToolStripMenuItem.Visible = True
        PrintPreviewToolStripMenuItem.Visible = True
        PrintToolStripMenuItem.Visible = True

        Chart2.Series.Clear()
        Chart2.Series.Add("Room " & room)
        Chart2.Series("Room " & room).Points.Clear()
        Chart2.Series("Room " & room).ChartType = SeriesChartType.FastLine
        Chart2.Legends("Legend1").Enabled = False
        Chart2.Dock = DockStyle.Fill
        Chart2.ChartAreas("ChartArea1").AxisY.Maximum = 1
        Chart2.ChartAreas("ChartArea1").BorderWidth = 1
        Chart2.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
        Chart2.ChartAreas("ChartArea1").AxisY.Title = "Cumulative Density Function"
        Chart2.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
        Chart2.ChartAreas("ChartArea1").AxisY.MajorGrid.Interval = 0.1

        Chart2.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
        Chart2.ChartAreas("ChartArea1").AxisX.Minimum = [Double].NaN
        Chart2.ChartAreas("ChartArea1").AxisX.Title = xTitle
        Chart2.Titles("Title1").Text = Title
        Chart2.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
        Chart2.Legends("Legend1").BorderWidth = 1
        Chart2.Legends("Legend1").BorderDashStyle = ChartDashStyle.Solid


        'max number of time periods for which the data is available
        If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
        ' counter corresponds to time = counter x outputinterval
        NumericUpDown1.Minimum = OutputInterval
        NumericUpDown1.Maximum = counter * OutputInterval
        NumericUpDown1.Value = counter * OutputInterval
        NumericUpDown1.Increment = OutputInterval
        NumericUpDown1.Show()
        Label18.Visible = True
        Label19.Visible = True
        NumericUpDownRoom.Minimum = 1
        NumericUpDownRoom.Maximum = NumberRooms
        NumericUpDownRoom.Increment = 1
        NumericUpDownRoom.Value = 1
        NumericUpDownRoom.Show()
        IterationUpDown.Hide()
        Label40.Hide()

    End Sub
    Private Sub cdf_include_input(ByRef xTitle, ByRef Title, ByRef MaxYValue, ByRef room)

        'sets various properties for displaying the CDF plot
        Title = "Input Data - CDF Plot: " & IterationsCompleted & " iterations"
        ToolStrip1.Visible = False
        Chart1.Visible = False 'histograms
        Chart2.Visible = True 'cdf plots
        Chart3.Visible = False
        Label4.Visible = False
        Label5.Visible = False
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        Panel1.BringToFront()
        PageToolStripMenuItem.Visible = True
        PrintPreviewToolStripMenuItem.Visible = True
        PrintToolStripMenuItem.Visible = True

        Chart2.Series.Clear()
        Chart2.Series.Add("Room " & room)
        Chart2.Series("Room " & room).Points.Clear()
        Chart2.Series("Room " & room).ChartType = SeriesChartType.FastLine
        'Chart2.Series("Room " & room).ChartType = SeriesChartType.Column
        Chart2.Legends("Legend1").Enabled = True
        Chart2.Dock = DockStyle.Fill
        Chart2.ChartAreas("ChartArea1").AxisY.Minimum = 0
        Chart2.ChartAreas("ChartArea1").AxisY.Maximum = 1
        'Chart2.BackColor = Color.AliceBlue
        Chart2.ChartAreas("ChartArea1").BorderWidth = 1
        Chart2.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
        Chart2.ChartAreas("ChartArea1").AxisY.Title = "Cumulative Density Function"
        Chart2.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
        Chart2.ChartAreas("ChartArea1").AxisY.MajorGrid.Interval = 0.1

        Chart2.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
        Chart2.ChartAreas("ChartArea1").AxisX.Minimum = [Double].NaN
        Chart2.ChartAreas("ChartArea1").AxisX.Title = xTitle
        Chart2.Titles("Title1").Text = Title
        Chart2.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
        Chart2.Legends("Legend1").BorderWidth = 1
        'Chart2.Legends("Legend1").BackColor = Color.AliceBlue
        Chart2.Legends("Legend1").BorderDashStyle = ChartDashStyle.Solid

        'max number of time periods for which the data is available
        ' If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
        ' counter corresponds to time = counter x outputinterval
        'NumericUpDown1.Minimum = OutputInterval
        'NumericUpDown1.Maximum = counter * OutputInterval
        'NumericUpDown1.Value = counter * OutputInterval
        'NumericUpDown1.Increment = OutputInterval
        'NumericUpDown1.Show()
        'Label18.Visible = True

        Label19.Visible = True
        NumericUpDownRoom.Minimum = 1
        NumericUpDownRoom.Maximum = NumberRooms
        NumericUpDownRoom.Increment = 1
        NumericUpDownRoom.Value = 1
        NumericUpDownRoom.Show()
        IterationUpDown.Hide()
        Label40.Hide()

    End Sub


    Private Sub UpperLayerTemperatureToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'cdf for upper layer temperature - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Upper Layer Temperature (C)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_ULTemp(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in UpperLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub LowerLayerTemperatureToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'cdf for lower layer temperature - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Lower Layer Temperature (C)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_LLTemp(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub LayerHeightToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'cdf for layer height - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Layer Height (m)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_LayerHeight(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LayerHeightToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub FEDGasesToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " FED Gases"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_FEDgas(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub FEDHeatToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " FED Heat"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_FEDheat(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDThermalToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub VisibilityToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'cdf for visibility - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Visibility (m)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_visi(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub InputsToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

    End Sub

    Private Sub InteriorTempToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the cdf for interior ambient temperature
        '*  ==========================================================

        Dim param = "Interior Temperature"
        Dim variance As Double = 0
        Dim distname As String = ""
        Dim mean As Single
        Dim ubound As Single
        Dim lbound As Single
        Dim mode As Single
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                variance = CDbl(odistribution.variance)
                mode = CDbl(odistribution.mode)
                mean = CDbl(odistribution.mean)
                ubound = CDbl(odistribution.ubound)
                lbound = CDbl(odistribution.lbound)
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim MaxYValue, temp As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha As Double = 0.01
        'Dim distname As String = lstDistribution1.Text

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Interior Temperature (K)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(mean, variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(lbound, ubound)
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(lbound, ubound, mode)
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(mean, variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_InteriorTemp(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select
                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(tempdatain, dist11)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(tempdatain, dist14)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(tempdatain, dist12)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(tempdatain, dist13)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in InteriorTempToolStripMenuItem1_Click")
        End Try

    End Sub

    Private Sub ExteriorTempToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the cdf for exterior ambient temperature
        '*  ==========================================================


        Dim param = "Exterior Temperature"
        Dim variance As Double = 0
        Dim distname As String = ""
        Dim mean As Single
        Dim ubound As Single
        Dim lbound As Single
        Dim mode As Single
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                variance = CDbl(odistribution.variance)
                mode = CDbl(odistribution.mode)
                mean = CDbl(odistribution.mean)
                ubound = CDbl(odistribution.ubound)
                lbound = CDbl(odistribution.lbound)
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim DataShift, MaxYValue, temp As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors


        Dim ks As OneSampleKSTest
        Dim alpha As Double = 0.01

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " External Temperature (K)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_ExteriorTemp(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist11)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist12)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist13)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist14)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ExteriorTempToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub RelativeHumidityToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the cdf for ambient relative humidity
        '*  ==========================================================


        Dim param = "Relative Humidity"
        Dim variance As Double = 0
        Dim distname As String = ""
        Dim mean As Single
        Dim ubound As Single
        Dim lbound As Single
        Dim mode As Single
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                variance = CDbl(odistribution.variance)
                mode = CDbl(odistribution.mode)
                mean = CDbl(odistribution.mean)
                ubound = CDbl(odistribution.ubound)
                lbound = CDbl(odistribution.lbound)
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim DataShift, MaxYValue, temp As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        Dim ks As OneSampleKSTest
        Dim alpha As Double = 0.01

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Relative Humidity (-)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance) 'ratio
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound)) 'ratio
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance) 'ratio

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_RelativeHumidity(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f2}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist11)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist12)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist13)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist14)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RelativeHumidityToolStripMenuItem1_Click")
        End Try
    End Sub


    Private Sub FLEDToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for FLED
        '*  ==========================================================

        Dim param = "Fire Load Energy Density"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_FLED.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_FLED, tempdatain, length)

            xtitle = " Fire Load Energy Density (MJ/m2)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FLED(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FLEDToolStripMenuItem")
        End Try
    End Sub



    Private Sub HeatOfCombustionToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for heat of combustion
        '*  ==========================================================

        Dim param = "Heat of Combustion PFO"

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_HoC_fuel.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_HoC_fuel, tempdatain, length)

            xtitle = " Fuel Heat of Combustion (MJ/kg)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_HoC_fuel(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatofCombustionToolStripMenuItem")
        End Try
    End Sub

    Private Sub FireLoadEnergyDensityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the cdf for fled
        '*  ==========================================================
        Dim param = "Fire Load Energy Density"
        Dim variance As Double = 0
        Dim distname As String = ""
        Dim mean As Single
        Dim ubound As Single
        Dim lbound As Single
        Dim mode As Single
        ' Dim alpha As Single
        'Dim beta As Single

        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                variance = CDbl(odistribution.variance)
                mode = CDbl(odistribution.mode)
                mean = CDbl(odistribution.mean)
                ubound = CDbl(odistribution.ubound)
                lbound = CDbl(odistribution.lbound)
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim MaxYValue, temp As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " FLED (MJ/m2)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_FLED(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100)
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_FLED, dist11)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_FLED, dist12)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_FLED, dist13)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_FLED, dist14)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select


            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FireLoadEnergyDensityToolStripMenuItem1_Click")
        End Try
    End Sub



    Private Sub HeatOfCombustionToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the cdf for heat of combustion
        '*  ==========================================================

        Dim param = "Heat of Combustion PFO"
        Dim variance As Double = 0
        Dim distname As String = ""
        Dim mean As Single
        Dim ubound As Single
        Dim lbound As Single
        Dim mode As Single
        'Dim alpha As Single
        ' Dim beta As Single

        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                variance = CDbl(odistribution.variance)
                mode = CDbl(odistribution.mode)
                mean = CDbl(odistribution.mean)
                ubound = CDbl(odistribution.ubound)
                lbound = CDbl(odistribution.lbound)
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim MaxYValue, temp As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        If Convert.ToDouble(variance) <= 0 Then
            MsgBox("Check distributions have variances > 0. ", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Heat of Combustion (kJ/g)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_HoC_fuel(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100)
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist11)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist12)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist13)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist14)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatofCombustionToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub UpperLayerTemperatureToolStripMenuItem1_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for upper layer temperature - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Upper Layer Temperature (C)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            'plot multiple series
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_ULTemp(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in UpperLayerTemperatureToolStripMenuItem1_Click_1")
        End Try
    End Sub

    Private Sub LowerLayerTemperatureToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for lower layer temperature - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900

            ' Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Lower Layer Temperature (C)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_LLTemp(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub LayerHeightToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for layer height - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Layer Height (m)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))


            NumericUpDown1.Visible = False
            Label18.Visible = False

            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            Label19.Visible = True
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_LayerHeight(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LayerHeightToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub FEDGasesToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for FED gases - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 1

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED gases (-)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = MaxYValue
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_FEDgas(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub FEDThermalToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for FED thermal - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 1

            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED thermal (-)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = MaxYValue
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_FEDheat(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDThermalToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub VisibilityToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for visibility - output
        '
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined

            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Visibility (m)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = 20
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_visi(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem1_Click")
        End Try
    End Sub


    Private Sub ToolStripStatusLabel2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripStatusLabel2.Click

    End Sub

    Private Sub OpenToolStripButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        OpenBaseModelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub SaveToolStripButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        SaveBaseModelToolStripMenuItem1.PerformClick()
    End Sub
    Private Sub ToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem1.Click
        Try
            'get a temp name
            Dim tmp As String = My.Computer.FileSystem.GetTempFileName()

            If Chart1.Visible = True Then
                Me.Chart1.BackColor = Color.White
                'save chart as image in temp file
                Chart1.SaveImage(tmp, ChartImageFormat.Bmp)
                Me.Chart1.BackColor = Color.AliceBlue
            ElseIf Chart2.Visible = True Then
                Me.Chart2.BackColor = Color.White
                'save chart as image in temp file
                Chart2.SaveImage(tmp, ChartImageFormat.Bmp)
                Me.Chart2.BackColor = Color.AliceBlue
            ElseIf Chart3.Visible = True Then
                Me.Chart3.BackColor = Color.White
                'save chart as image in temp file
                Chart3.SaveImage(tmp, ChartImageFormat.Bmp)
                Me.Chart3.BackColor = Color.AliceBlue
            End If

            'copy the chart to the clipboard
            Clipboard.SetImage(Image.FromFile(tmp))

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in  CopyToClipboardToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem10_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem10.Click
        Try

            Clipboard.SetText(rtb_log.Text)

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in  CopyToClipboardToolStripMenuItem10_Click")
        End Try
    End Sub

    Private Sub PageToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PageToolStripMenuItem.Click

        If Chart1.Visible = True Then
            ' Show Page Setup dialog
            Me.Chart1.Printing.PrintDocument = PrintDocument1
            Me.Chart1.Printing.PageSetup()
        ElseIf Chart2.Visible = True Then
            ' Show Page Setup dialog
            Me.Chart2.Printing.PrintDocument = PrintDocument1
            Me.Chart2.Printing.PageSetup()
        ElseIf Chart3.Visible = True Then
            ' Show Page Setup dialog
            Me.Chart3.Printing.PrintDocument = PrintDocument1
            Me.Chart3.Printing.PageSetup()
        End If

    End Sub

    Private Sub PrintPreviewToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintPreviewToolStripMenuItem.Click

        PrintPreviewDialog1.ShowDialog()

    End Sub

    Private Sub PrintToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PrintToolStripMenuItem.Click
        Try
            If Chart1.Visible = True Then
                ' Print chart (with Printer dialog)
                Me.Chart1.Printing.PrintDocument = PrintDocument1
                Me.Chart1.BackColor = Color.White
                Me.Chart1.Printing.Print(True)
                Me.Chart1.BackColor = Color.AliceBlue
            ElseIf Chart2.Visible = True Then
                Me.Chart2.Printing.PrintDocument = PrintDocument1
                Me.Chart2.BackColor = Color.White
                Me.Chart2.Printing.Print(True)
                Me.Chart2.BackColor = Color.AliceBlue
            ElseIf Chart3.Visible = True Then
                Me.Chart3.Printing.PrintDocument = PrintDocument1
                Me.Chart3.BackColor = Color.White
                Me.Chart3.Printing.Print(True)
                Me.Chart3.BackColor = Color.AliceBlue
            End If

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in PrintToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub PrintToolStripButton_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        PrintToolStripMenuItem.PerformClick()
    End Sub
    Private Sub OpenToolStripButton_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenToolStripButton.Click
        OpenBaseModelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub SaveToolStripButton_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SaveToolStripButton.Click
        MDIFrmMain.SaveBaseToolStripMenuItem.PerformClick()
    End Sub

    Private Sub PrintToolStripButton_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        PrintToolStripMenuItem.PerformClick()
    End Sub

    Private Sub ToolStripButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StopToolStripButton1.Click
        FlagSimStop = True
        flagstop = 1
        If TalkToEVACNZ = True Then enzsimtime = SimTime
    End Sub
    Private Sub Item_locate(ByVal thisitem As Integer, ByVal oitems As Object, ByVal n As Integer)

        Try
            ReDim Preserve item_location(0 To 8, 0 To n_max)
            Dim x_max As Single = CSng(RoomLength(room)) 'room x-dimension
            Dim y_max As Single = CSng(RoomWidth(room))  'room y-dimension
            Dim delta_x As Single = CSng(gridsize) 'grid size in metres, objects will be centred on a grid coordinate 

            'item_location(1, n) = oitems(thisitem - 1).xleft + oitems(thisitem - 1).length / 2 'centre point x
            'item_location(2, n) = oitems(thisitem - 1).ybottom + oitems(thisitem - 1).width / 2 'centre point y
            item_location(3, n) = oitems(thisitem - 1).xleft  'x1 stored to reduce possible calculations
            item_location(4, n) = oitems(thisitem - 1).xleft + oitems(thisitem - 1).length    'x2 stored to reduce possible calculations  
            item_location(5, n) = oitems(thisitem - 1).ybottom  'y1 stored to reduce possible calculations
            item_location(6, n) = oitems(thisitem - 1).ybottom + oitems(thisitem - 1).width   'y2 stored to reduce possible calculations 

            FireLocation(n) = 0 'centre

            If item_location(3, n) < delta_x Then
                If item_location(5, n) < delta_x Or item_location(6, n) > y_max - delta_x Then
                    FireLocation(n) = 2 'corner
                Else
                    FireLocation(n) = 1 'wall
                End If
            End If
            If item_location(4, n) > x_max - delta_x Then
                If item_location(5, n) < delta_x Or item_location(6, n) > y_max - delta_x Then
                    FireLocation(n) = 2 'corner
                Else
                    FireLocation(n) = 1 'wall
                End If
            End If
            If item_location(5, n) < delta_x Then
                If item_location(3, n) < delta_x Or item_location(4, n) > x_max - delta_x Then
                    FireLocation(n) = 2 'corner
                Else
                    FireLocation(n) = 1 'wall
                End If
            End If
            If item_location(6, n) > y_max - delta_x Then
                If item_location(3, n) < delta_x Or item_location(4, n) > x_max - delta_x Then
                    FireLocation(n) = 2 'corner
                Else
                    FireLocation(n) = 1 'wall
                End If
            End If

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb Item_locate")
        End Try
    End Sub
    Public Sub wallventarrays(ByRef oVents, ByRef oVentDistributions, ByVal itcounter)
        Try

            ReDim NumberVents(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1)
            Dim maxvents As Integer = 0
            For Each oVent In oVents

                Dim id As Integer = oVent.id
                Dim vfrom As Integer = oVent.fromroom
                Dim vto As Integer = oVent.toroom

                NumberVents(vfrom, vto) = NumberVents(vfrom, vto) + 1
                NumberVents(vto, vfrom) = NumberVents(vfrom, vto)

                If maxvents < NumberVents(vfrom, vto) Then maxvents = NumberVents(vfrom, vto)

                ReDim Preserve soffitheight(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentSillHeight(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentOpenTime(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentCloseTime(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve AutoBreakGlass(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve spillplume(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve spillplumemodel(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve SpillPlumeBalc(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve spillbalconyprojection(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentCD(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentHeight(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentWidth(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve FRintegrity(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve FRMaxOpening(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve FRMaxOpeningTime(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve FRgastemp(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve FRcriteria(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve FRfaildata(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentProb(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve HOReliability(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve HOactive(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentCD(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentFace(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve VentOffset(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve WallLength1(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve WallLength2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve Downstand(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSconductivity(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSemissivity(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSexpansion(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSthickness(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSshading(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSbreakingstress(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSalpha(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GlassYoungsModulus(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GlassFlameFlux(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSdistance(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve GLASSFalloutTime(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve SDtriggerroom(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve HRR_threshold(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve HRR_ventopendelay(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve HRR_ventopenduration(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve trigger_ventopendelay(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve trigger_ventopenduration(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve AutoOpenVent(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)
                ReDim Preserve trigger_device(0 To 6, 0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxvents)

                trigger_device(0, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerSD
                trigger_device(1, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerHD
                trigger_device(2, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerHRR
                trigger_device(3, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerFO
                trigger_device(4, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerVL
                trigger_device(5, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerHO
                trigger_device(6, vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerFR
                SpillPlumeBalc(vfrom, vto, NumberVents(vfrom, vto)) = oVent.spillplumebalc
                Downstand(vfrom, vto, NumberVents(vfrom, vto)) = oVent.downstand
                spillbalconyprojection(vfrom, vto, NumberVents(vfrom, vto)) = oVent.spillbalconyprojection
                GLASSconductivity(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassconductivity
                GLASSemissivity(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassemissivity
                GLASSexpansion(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassexpansion
                GLASSthickness(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassthickness
                GLASSshading(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassshading
                GLASSbreakingstress(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassbreakingstress
                GLASSalpha(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassalpha
                GlassYoungsModulus(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassYoungsModulus
                GlassFlameFlux(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassflameflux
                GLASSdistance(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassdistance
                GLASSFalloutTime(vfrom, vto, NumberVents(vfrom, vto)) = oVent.glassfalloutime
                SDtriggerroom(vfrom, vto, NumberVents(vfrom, vto)) = oVent.sdtriggerroom
                HRR_threshold(vfrom, vto, NumberVents(vfrom, vto)) = oVent.HRRthreshold
                HRR_ventopendelay(vfrom, vto, NumberVents(vfrom, vto)) = oVent.HRRventopendelay
                HRR_ventopenduration(vfrom, vto, NumberVents(vfrom, vto)) = oVent.HRRventopenduration
                trigger_ventopendelay(vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerventopendelay
                trigger_ventopenduration(vfrom, vto, NumberVents(vfrom, vto)) = oVent.triggerventopenduration
                AutoOpenVent(vfrom, vto, NumberVents(vfrom, vto)) = oVent.autoopenvent

                WallLength1(vfrom, vto, NumberVents(vfrom, vto)) = oVent.walllength1
                WallLength2(vfrom, vto, NumberVents(vfrom, vto)) = oVent.walllength2
                VentSillHeight(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.sillheight)

                VentOpenTime(vfrom, vto, NumberVents(vfrom, vto)) = oVent.opentime
                VentCloseTime(vfrom, vto, NumberVents(vfrom, vto)) = oVent.closetime
                AutoBreakGlass(vfrom, vto, NumberVents(vfrom, vto)) = oVent.autobreakglass
                spillplume(vfrom, vto, NumberVents(vfrom, vto)) = oVent.spillplume
                spillplumemodel(vfrom, vto, NumberVents(vfrom, vto)) = oVent.spillplumemodel
                VentCD(vfrom, vto, NumberVents(vfrom, vto)) = oVent.cd
                VentFace(vfrom, vto, NumberVents(vfrom, vto)) = oVent.face
                VentOffset(vfrom, vto, NumberVents(vfrom, vto)) = oVent.offset
                VentHeight(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.height)
                VentWidth(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.width)
                VentProb(vfrom, vto, NumberVents(vfrom, vto)) = oVent.probventclosed
                HOReliability(vfrom, vto, NumberVents(vfrom, vto)) = oVent.HOreliability
                FRintegrity(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.integrity)
                FRMaxOpening(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.maxopening)
                FRMaxOpeningTime(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.maxopeningtime)
                FRgastemp(vfrom, vto, NumberVents(vfrom, vto)) = CDec(oVent.gastemp)
                FRcriteria(vfrom, vto, NumberVents(vfrom, vto)) = oVent.FRcriteria

                If itcounter > 0 Then
                    FRintegrity(vfrom, vto, NumberVents(vfrom, vto)) = mc_integrity(id - 1, itcounter - 1)
                    FRintegrity(vto, vfrom, NumberVents(vfrom, vto)) = mc_integrity(id - 1, itcounter - 1)
                    FRMaxOpening(vfrom, vto, NumberVents(vfrom, vto)) = mc_maxopening(id - 1, itcounter - 1)
                    FRMaxOpening(vto, vfrom, NumberVents(vfrom, vto)) = mc_maxopening(id - 1, itcounter - 1)
                    FRMaxOpeningTime(vfrom, vto, NumberVents(vfrom, vto)) = mc_maxopeningtime(id - 1, itcounter - 1)
                    FRMaxOpeningTime(vto, vfrom, NumberVents(vfrom, vto)) = mc_maxopeningtime(id - 1, itcounter - 1)
                    FRgastemp(vfrom, vto, NumberVents(vfrom, vto)) = mc_gastemp(id - 1, itcounter - 1)
                    FRgastemp(vto, vfrom, NumberVents(vfrom, vto)) = mc_gastemp(id - 1, itcounter - 1)
                    VentHeight(vfrom, vto, NumberVents(vfrom, vto)) = mc_vent_height(id - 1, itcounter - 1)
                    VentHeight(vto, vfrom, NumberVents(vfrom, vto)) = mc_vent_height(id - 1, itcounter - 1)
                    VentWidth(vfrom, vto, NumberVents(vfrom, vto)) = mc_vent_width(id - 1, itcounter - 1)
                    VentWidth(vto, vfrom, NumberVents(vfrom, vto)) = mc_vent_width(id - 1, itcounter - 1)
                    VentProb(vfrom, vto, NumberVents(vfrom, vto)) = mc_ventprob(id - 1, itcounter - 1)
                    VentProb(vto, vfrom, NumberVents(vfrom, vto)) = mc_ventprob(id - 1, itcounter - 1)
                    HOReliability(vfrom, vto, NumberVents(vfrom, vto)) = mc_HOreliability(id - 1, itcounter - 1)
                    HOReliability(vto, vfrom, NumberVents(vfrom, vto)) = mc_HOreliability(id - 1, itcounter - 1)
                End If

                'If vto <= NumberRooms Then VentSillHeight(vto, vfrom, NumberVents(vfrom, vto)) = VentSillHeight(vfrom, vto, NumberVents(vfrom, vto)) + FloorElevation(vfrom) - FloorElevation(vto)

                trigger_device(0, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerSD
                trigger_device(1, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerHD
                trigger_device(2, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerHRR
                trigger_device(3, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerFO
                trigger_device(4, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerVL
                trigger_device(5, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerHO
                trigger_device(6, vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerFR
                SpillPlumeBalc(vto, vfrom, NumberVents(vfrom, vto)) = oVent.spillplumebalc
                Downstand(vto, vfrom, NumberVents(vfrom, vto)) = oVent.downstand
                spillbalconyprojection(vto, vfrom, NumberVents(vfrom, vto)) = oVent.spillbalconyprojection
                GLASSconductivity(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassconductivity
                GLASSemissivity(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassemissivity
                GLASSexpansion(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassexpansion
                GLASSthickness(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassthickness
                GLASSshading(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassshading
                GLASSbreakingstress(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassbreakingstress
                GLASSalpha(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassalpha
                GlassYoungsModulus(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassYoungsModulus
                GlassFlameFlux(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassflameflux
                GLASSdistance(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassdistance
                GLASSFalloutTime(vto, vfrom, NumberVents(vfrom, vto)) = oVent.glassfalloutime
                SDtriggerroom(vto, vfrom, NumberVents(vfrom, vto)) = oVent.sdtriggerroom
                HRR_threshold(vto, vfrom, NumberVents(vfrom, vto)) = oVent.HRRthreshold
                HRR_ventopendelay(vto, vfrom, NumberVents(vfrom, vto)) = oVent.HRRventopendelay
                HRR_ventopenduration(vto, vfrom, NumberVents(vfrom, vto)) = oVent.HRRventopenduration
                trigger_ventopendelay(vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerventopendelay
                trigger_ventopenduration(vto, vfrom, NumberVents(vfrom, vto)) = oVent.triggerventopenduration
                AutoOpenVent(vto, vfrom, NumberVents(vfrom, vto)) = oVent.autoopenvent

                WallLength1(vto, vfrom, NumberVents(vfrom, vto)) = oVent.walllength1
                WallLength2(vto, vfrom, NumberVents(vfrom, vto)) = oVent.walllength2

                If vto < NumberRooms + 1 Then
                    VentSillHeight(vto, vfrom, NumberVents(vfrom, vto)) = VentSillHeight(vfrom, vto, NumberVents(vfrom, vto)) + FloorElevation(vfrom) - FloorElevation(vto)
                Else
                    VentSillHeight(vto, vfrom, NumberVents(vfrom, vto)) = 0
                End If

                VentOpenTime(vto, vfrom, NumberVents(vfrom, vto)) = oVent.opentime
                VentCloseTime(vto, vfrom, NumberVents(vfrom, vto)) = oVent.closetime
                AutoBreakGlass(vto, vfrom, NumberVents(vfrom, vto)) = oVent.autobreakglass
                spillplume(vto, vfrom, NumberVents(vfrom, vto)) = oVent.spillplume
                spillplumemodel(vto, vfrom, NumberVents(vfrom, vto)) = oVent.spillplumemodel
                VentCD(vto, vfrom, NumberVents(vfrom, vto)) = oVent.cd
                VentFace(vto, vfrom, NumberVents(vfrom, vto)) = oVent.face
                VentOffset(vto, vfrom, NumberVents(vfrom, vto)) = oVent.offset
                VentHeight(vto, vfrom, NumberVents(vfrom, vto)) = oVent.height
                VentWidth(vto, vfrom, NumberVents(vfrom, vto)) = oVent.width
                VentProb(vto, vfrom, NumberVents(vfrom, vto)) = oVent.probventclosed
                HOReliability(vto, vfrom, NumberVents(vfrom, vto)) = oVent.horeliability
                FRintegrity(vto, vfrom, NumberVents(vfrom, vto)) = oVent.integrity
                FRMaxOpening(vto, vfrom, NumberVents(vfrom, vto)) = oVent.maxopening
                FRMaxOpeningTime(vto, vfrom, NumberVents(vfrom, vto)) = oVent.maxopeningtime
                FRgastemp(vto, vfrom, NumberVents(vfrom, vto)) = oVent.gastemp
                FRcriteria(vto, vfrom, NumberVents(vfrom, vto)) = oVent.FRcriteria
            Next

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in wallventarrays")
        End Try
    End Sub
    Public Sub ceilingventarrays(ByRef ocVents, ByRef ocVentDistributions, ByVal itcounter)
        Try
            ReDim NumberCVents(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1)
            Dim maxcvents As Integer = 0
            For Each ocVent In ocVents

                Dim id As Integer = ocVent.id
                Dim vupper As Integer = ocVent.upperroom
                Dim vlower As Integer = ocVent.lowerroom

                NumberCVents(vupper, vlower) = NumberCVents(vupper, vlower) + 1

                If maxcvents < NumberCVents(vupper, vlower) Then maxcvents = NumberCVents(vupper, vlower)

                ReDim Preserve CVentOpenTime(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve CVentCloseTime(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve CVentArea(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve CVentAuto(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve CVentDC(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)

                ReDim Preserve trigger_device2(0 To 6, 0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve FRintegrity2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve FRMaxOpening2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve FRMaxOpeningTime2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve FRgastemp2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve FRcriteria2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve FRfaildata2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve SDtriggerroom2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve HRR_threshold2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve HRR_ventopendelay2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve HRR_ventopenduration2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve trigger_ventopendelay2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve trigger_ventopenduration2(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)
                ReDim Preserve AutoOpenCVent(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1, 0 To maxcvents)

                trigger_device2(0, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerSD
                trigger_device2(1, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerHD
                trigger_device2(2, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerHRR
                trigger_device2(3, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerFO
                trigger_device2(4, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerVL
                trigger_device2(5, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerHO
                trigger_device2(6, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerFR

                SDtriggerroom2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.sdtriggerroom
                HRR_threshold2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.HRRthreshold
                HRR_ventopendelay2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.HRRventopendelay
                HRR_ventopenduration2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.HRRventopenduration
                trigger_ventopendelay2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerventopendelay
                trigger_ventopenduration2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerventopenduration

                CVentAuto(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.autoopenvent
                CVentOpenTime(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.opentime
                CVentCloseTime(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.closetime
                CVentArea(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.area
                CVentDC(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.dischargecoeff

                FRintegrity2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.integrity
                FRMaxOpening2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.maxopening
                FRMaxOpeningTime2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.maxopeningtime
                FRgastemp2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.gastemp
                trigger_device2(6, vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.triggerFR
                FRcriteria2(vupper, vlower, NumberCVents(vupper, vlower)) = ocVent.FRcriteria

                If mc_vent_area IsNot Nothing Then
                    If itcounter > 0 Then
                        FRintegrity2(vupper, vlower, NumberCVents(vupper, vlower)) = mc_integrity2(id - 1, itcounter - 1)
                        FRMaxOpening2(vupper, vlower, NumberCVents(vupper, vlower)) = mc_maxopening2(id - 1, itcounter - 1)
                        FRMaxOpeningTime2(vupper, vlower, NumberCVents(vupper, vlower)) = mc_maxopeningtime2(id - 1, itcounter - 1)
                        FRgastemp2(vupper, vlower, NumberCVents(vupper, vlower)) = mc_gastemp2(id - 1, itcounter - 1)
                        CVentArea(vupper, vlower, NumberCVents(vupper, vlower)) = mc_vent_area(id - 1, itcounter - 1)
                    End If
                End If
            Next

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb ceilingventarrays, line - " & Err.Erl)
        End Try
    End Sub
    Private Sub ToolStripLabel1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StartToolStripLabel1.Click

        'start monte carlo simulations
        Dim numit As Integer = Convert.ToInt16(Me.txtNumberIterations.Text - 1)

        Dim sprfailcount As Integer = 0
        Dim oldfolder As String = RiskDataDirectory

        ReDim mc_InteriorTemp(0 To numit)
        ReDim mc_ExteriorTemp(0 To numit)
        ReDim mc_RelativeHumidity(0 To numit)
        ReDim mc_FLED(0 To numit)
        ReDim mc_FLED_actual(0 To numit)
        ReDim mc_HoC_fuel(0 To numit)
        ReDim mc_presoot(0 To numit)
        ReDim mc_preCO(0 To numit)
        ReDim mc_SprReliability(0 To numit)
        ReDim mc_SDReliability(0 To numit)
        ReDim mc_FanReliability(0 To numit)
        ReDim mc_SprSuppressProb(0 To numit)
        ReDim mc_SprCooling(0 To numit)
        ReDim mc_PeakHRR(0 To numit)
        ReDim mc_AlphaT(0 To numit)

        ReDim itemcount(0 To numit)
        ReDim sprmode_store(0 To numit)
        ReDim alphaTfitted(0 To 4, 0 To numit)
        ReDim timeequiv(0 To 4, 0 To numit)
        Dim sprink_mode_save As Integer = sprink_mode
        Dim oSprinklers As New List(Of oSprinkler)
        Dim osprdistributions As New List(Of oDistribution)
        Dim oSmokeDets As New List(Of oSmokeDet)
        Dim oSDdistributions As New List(Of oDistribution)
        Dim oItemDistributions As New List(Of oDistribution)
        Dim oItems As List(Of oItem)
        Dim oVentDistributions As New List(Of oDistribution)
        Dim oVents As List(Of oVent)
        Dim ocVentDistributions As New List(Of oDistribution)
        Dim ocVents As List(Of oCVent)
        Dim oFanDistributions As New List(Of oDistribution)
        Dim oFans As List(Of oFan)
        Dim oRoomDistributions As New List(Of oDistribution)
        Dim oRooms As List(Of oRoom)
        Dim response As Short
        Dim start As Double

        ReDim Item1X(0 To NumberIterations - 1)
        ReDim Item1Y(0 To NumberIterations - 1)
        ReDim itime(0 To n_max)
        ReDim ignmode(0 To n_max)

        Try

            'seek confirmation from the user that they want to run the simulation
            response = MsgBox("Do you want to run the simulation now?", MB_YESNO + MB_ICONQUESTION, ProgramTitle)
            If response = IDNO Then Exit Sub

            mc_go = True
            upgrade = False
            enzsimtime = 0
            brisksimtime = 0

            MDIFrmMain.SaveBaseToolStripMenuItem.PerformClick()

            'note start time of simulation
            start = VB.Timer()
            MDIFrmMain.Timer1.Enabled = True

            Dim abc As Double = 0
            Dim getfolder As String


            terminate_fo = chkTerminateFlashover.Checked
            terminate_fuelgone = chkTerminateFuel.Checked

            ToolStripStatusLabel3.Text = "Saving parameters ... please wait."
            Cursor = Cursors.WaitCursor

            Chart1.Hide()
            Chart2.Hide()
            NumericUpDown1.Hide()
            NumericUpDownRoom.Hide()
            IterationUpDown.Hide()

            If basefile = "" Then
                'basefile = UserAppDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_default\basemodel_default.xml"
                basefile = UserPersonalDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_default\basemodel_default.xml"
            End If

            getfolder = Convert.ToString(txtBaseName.Text)
            getfolder = getfolder.Replace(" ", "_")
            txtBaseName.Text = getfolder.ToString
            getfolder = "basemodel_" & getfolder

            If My.Computer.FileSystem.DirectoryExists(RiskDataDirectory) = False Then
                'create folder
                My.Computer.FileSystem.CreateDirectory(RiskDataDirectory)
            End If

            ProjectDirectory = RiskDataDirectory

            NumberIterations = Convert.ToInt16(Me.txtNumberIterations.Text)

            Call Save_BaseFile_xml(basefile)

            If Not My.Computer.FileSystem.FileExists(basefile) Then
                'create the file
                My.Computer.FileSystem.WriteAllText(basefile, "", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "items.xml") Then
                My.Computer.FileSystem.CopyFile(oldfolder & "items.xml", RiskDataDirectory & "items.xml", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "sprinklers.xml") Then
                My.Computer.FileSystem.CopyFile(oldfolder & "sprinklers.xml", RiskDataDirectory & "sprinklers.xml", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "distributions.xml") Then
                My.Computer.FileSystem.CopyFile(oldfolder & "distributions.xml", RiskDataDirectory & "distributions.xml", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "vents.xml") Then
                My.Computer.FileSystem.CopyFile(oldfolder & "vents.xml", RiskDataDirectory & "vents.xml", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "cvents.xml") Then
                My.Computer.FileSystem.CopyFile(oldfolder & "cvents.xml", RiskDataDirectory & "cvents.xml", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "smokedets.xml") Then
                My.Computer.FileSystem.CopyFile(oldfolder & "smokedets.xml", RiskDataDirectory & "smokedets.xml", True)
            End If
            If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "fans.xml") Then
                If My.Computer.FileSystem.FileExists(oldfolder & "fans.xml") Then
                    My.Computer.FileSystem.CopyFile(oldfolder & "fans.xml", RiskDataDirectory & "fans.xml", True)
                Else
                    'My.Computer.FileSystem.CopyFile(UserAppDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_default\fans.xml", RiskDataDirectory & "fans.xml", True)
                    My.Computer.FileSystem.CopyFile(DataFolder & "fans.xml", RiskDataDirectory & "fans.xml", True)
                End If
            End If

            'check to see if EvacuatioNZ is used
            If MDIFrmMain.TalkToEVACNZToolStripMenuItem.Checked = True Then
                TalkToEVACNZ = True
            Else
                TalkToEVACNZ = False
            End If

            'load room data
            oRoomDistributions = RoomDB.GetRoomDistributions
            oRooms = RoomDB.GetRooms
            NumberRooms = oRooms.Count
            If NumberRooms > 0 Then
                ReDim mc_room_length(0 To NumberRooms - 1, 0 To numit)
                ReDim mc_room_width(0 To NumberRooms - 1, 0 To numit)
            End If
            SampleRoomData_LHS(oRooms, oRoomDistributions)

            'load wall vent data
            oVentDistributions = VentDB.GetVentDistributions
            oVents = VentDB.GetVents
            NumVents = oVents.Count
            If NumVents > 0 Then
                ReDim mc_vent_height(0 To NumVents - 1, 0 To numit)
                ReDim mc_vent_width(0 To NumVents - 1, 0 To numit)
                ReDim mc_ventprob(0 To NumVents - 1, 0 To numit)
                ReDim mc_HOreliability(0 To NumVents - 1, 0 To numit)
                ReDim mc_integrity(0 To NumVents - 1, 0 To numit)
                ReDim mc_maxopening(0 To NumVents - 1, 0 To numit)
                ReDim mc_maxopeningtime(0 To NumVents - 1, 0 To numit)
                ReDim mc_gastemp(0 To NumVents - 1, 0 To numit)
            End If
            SampleVentData_LHS2(oVents, oVentDistributions)

            'load ceiling vent data
            ocVentDistributions = VentDB.GetCVentDistributions
            ocVents = VentDB.GetCVents
            NumCVents = ocVents.Count
            If NumCVents > 0 Then
                ReDim mc_vent_area(0 To NumCVents - 1, 0 To numit)
                ReDim mc_integrity2(0 To NumCVents - 1, 0 To numit)
                ReDim mc_maxopening2(0 To NumCVents - 1, 0 To numit)
                ReDim mc_maxopeningtime2(0 To NumCVents - 1, 0 To numit)
                ReDim mc_gastemp2(0 To NumCVents - 1, 0 To numit)
            End If
            SampleCVentData_LHS(ocVents, ocVentDistributions)

            'read and store sprinkler data for use in the simulatioms
            osprdistributions = SprinklerDB.GetSprDistributions
            oSprinklers = SprinklerDB.GetSprinklers2
            NumSprinklers = oSprinklers.Count

            'sprinkler parameters - change to 2D array to hold multiple sprinklers
            If NumSprinklers > 0 Then
                ReDim CJetTemp(0 To NumberTimeSteps, 2, NumSprinklers - 1)
                ReDim mc_RadialDist(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_RTI(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_cfactor(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_acttemp(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_dist(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_waterdensity(0 To NumSprinklers - 1, 0 To numit)
            Else
                ReDim CJetTemp(0 To NumberTimeSteps, 2, 0)
                ReDim mc_RadialDist(0, 0 To numit)
                ReDim mc_RTI(0, 0 To numit)
                ReDim mc_cfactor(0, 0 To numit)
                ReDim mc_acttemp(0, 0 To numit)
                ReDim mc_dist(0, 0 To numit)
                ReDim mc_waterdensity(0, 0 To numit)
            End If

            'read and store smoke detector data for use in the simulatioms
            oSDdistributions = SmokeDetDB.GetSDDistributions
            oSmokeDets = SmokeDetDB.GetSmokDets
            NumSmokeDetectors = oSmokeDets.Count

            'sd parameters - change to 2D array to hold multiple sd
            If NumSmokeDetectors > 0 Then
                ReDim mc_SDRadialDist(0 To NumSmokeDetectors - 1, 0 To numit)
                ReDim mc_SDOD(0 To NumSmokeDetectors - 1, 0 To numit)
                ReDim mc_SDZ(0 To NumSmokeDetectors - 1, 0 To numit)
                ReDim mc_SDcharlength(0 To NumSmokeDetectors - 1, 0 To numit)
            Else
                ReDim mc_SDRadialDist(0, 0 To numit)
                ReDim mc_SDOD(0, 0 To numit)
                ReDim mc_SDZ(0, 0 To numit)
                ReDim mc_SDcharlength(0, 0 To numit)
            End If

            'read and store fan data for use in the simulatioms
            oFanDistributions = FanDB.GetFanDistributions
            oFans = FanDB.GetFans
            NumFans = oFans.Count

            'fan parameters - change to 2D array to hold multiple fans
            If NumFans > 0 Then
                ReDim mc_fanflowrate(0 To NumFans - 1, 0 To numit)
                ReDim mc_fanstarttime(0 To NumFans - 1, 0 To numit)
                ReDim mc_fanpressurelimit(0 To NumFans - 1, 0 To numit)
                ReDim mc_fanIDreliability(0 To NumFans - 1, 0 To numit)
            Else
                ReDim mc_fanflowrate(0, 0 To numit)
                ReDim mc_fanstarttime(0, 0 To numit)
                ReDim mc_fanpressurelimit(0, 0 To numit)
                ReDim mc_fanIDreliability(0, 0 To numit)
            End If

            ToolStripStatusLabel3.Text = "Cleaning up old files ... please wait."
            If My.Computer.FileSystem.DirectoryExists(RiskDataDirectory) = True Then
                If My.Computer.FileSystem.FileExists(RiskDataDirectory & "input1.xml") = True Then
                    Kill(RiskDataDirectory & "*put*.xml")
                    Kill(RiskDataDirectory & "*.dat")
                End If

            Else
                MsgBox("Folder " & RiskDataDirectory & " does not exist.")
            End If

            Dim filename As String

            ToolStripStatusLabel2.Text = ""

            'read and store item distribution data for use in simulations
            oItemDistributions = ItemDB.GetItemDistributions
            oItems = ItemDB.GetItemsv2
            NumberObjects = oItems.Count

            If NumberObjects > 0 Then
                ReDim mc_item_hoc(0 To NumberObjects, 0 To numit)
                ReDim mc_item_soot(0 To NumberObjects, 0 To numit)
                ReDim mc_item_co2(0 To NumberObjects, 0 To numit)
                ReDim mc_item_lhog(0 To NumberObjects, 0 To numit)
                ReDim mc_item_RLF(0 To NumberObjects, 0 To numit)
                ReDim mc_item_hrrua(0 To NumberObjects, 0 To numit)
            End If

            ToolStripStatusLabel3.Text = "Sampling distributions ... please wait."
            Call SampleAllData_LHS2() 'from distributions.xml file

            Call SampleFireData_LHS2(oItems, oItemDistributions) 'from items.xml file, for each unique object in the item list

            Call SampleSprinklerData_LHS2(oSprinklers, osprdistributions) 'from sprinklers.xml file

            Call SampleSmokeDetData_LHS2(oSmokeDets, oSDdistributions) 'from smokedets.xml file

            Call SampleFanData_LHS2(oFans, oFanDistributions) 'from fans.xml file


            'to do: develop some code to check convergence to enable early termination of runs.
            ToolStripProgressBar1.Visible = True
            StopToolStripButton1.Visible = True
            StartToolStripLabel1.Visible = False
            counter = 1
            FlagSimStop = False
            rtb_log.Text = ""

            Dim PeakHRRsave As Single = PeakHRR
            Dim AlphaTsave = AlphaT

            Do
                itcounter = counter
                Dim fireload_count As Double = 0 'MJ
                Dim firemass_count As Double = 0 'kg

                ReDim fandata(0 To NumFans, 0 To 8)
                For Each oFan In oFans
                    fandata(oFan.fanid, 0) = oFan.fanroom
                    fandata(oFan.fanid, 1) = mc_fanflowrate(oFan.fanid - 1, itcounter - 1)
                    fandata(oFan.fanid, 2) = mc_fanpressurelimit(oFan.fanid - 1, itcounter - 1)
                    fandata(oFan.fanid, 3) = mc_fanstarttime(oFan.fanid - 1, itcounter - 1)
                    fandata(oFan.fanid, 4) = CSng(oFan.fanmanual)
                    fandata(oFan.fanid, 5) = oFan.fancurve
                    fandata(oFan.fanid, 6) = oFan.fanelevation
                    fandata(oFan.fanid, 7) = oFan.fanextract
                    fandata(oFan.fanid, 8) = oFan.fanreliability
                Next

                Dim randrel As Single
                Dim Ru As New RandGenUniform(0, 1) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number

                ReDim FANactive(0 To NumFans)
                For k = 1 To NumFans
                    FANactive(k) = True
                    randrel = Ru.Next 'gets random number 0-1
                    If randrel >= fandata(k, 8) Then
                        FANactive(k) = False
                    End If
                Next

                InitialFuelMass = 0

                rtb_log.Text = "Iteration " & itcounter.ToString & Chr(13) & rtb_log.Text
                VentilationLimitFlag = False
                SprinklerFlag = 0
                HDFlag = 0

                'find vent parameters for this iteration
                Call wallventarrays(oVents, oVentDistributions, itcounter)
                'use vent probability reliability to determine if vent is open/closed initally 

                'find ceiling vent parameters for this iteration
                Call ceilingventarrays(ocVents, ocVentDistributions, itcounter)

                For i = 1 To NumberRooms

                    RoomLength(i) = mc_room_length(i - 1, itcounter - 1)
                    RoomWidth(i) = mc_room_width(i - 1, itcounter - 1)

                    For j = 2 To NumberRooms + 1
                        For k = 1 To NumberVents(i, j)
                            randrel = Ru.Next 'gets random number 0-1
                            If randrel >= VentProb(i, j, k) Then
                                ' vent is open

                            Else
                                'vent is closed
                                VentCD(i, j, k) = 0
                            End If

                            randrel = Ru.Next 'gets random number 0-1
                            If randrel >= HOReliability(i, j, k) Then
                                HOactive(i, j, k) = False
                            Else
                                HOactive(i, j, k) = True
                            End If
                        Next
                    Next
                Next

                InteriorTemp = mc_InteriorTemp(counter - 1)
                ExteriorTemp = mc_ExteriorTemp(counter - 1)
                RelativeHumidity = CSng(mc_RelativeHumidity(counter - 1))

                FLED = CSng(mc_FLED(counter - 1))

                HoC_fuel = CDbl(mc_HoC_fuel(counter - 1))
                preSoot = CSng(mc_presoot(counter - 1))
                preCO = CSng(mc_preCO(counter - 1))
                SDReliability = mc_SDReliability(counter - 1)
                FanReliability = mc_FanReliability(counter - 1)
                SprReliability = mc_SprReliability(counter - 1)
                SprSuppressionProb = mc_SprSuppressProb(counter - 1)
                SprCooling = mc_SprCooling(counter - 1)
                PeakHRR = mc_PeakHRR(counter - 1)
                AlphaT = mc_AlphaT(counter - 1)

                If usepowerlawdesignfire = False Then

                    If autopopulate = True Then
                        'populate the room with fire objects
                        Call populate_items(n_max, counter, fireload_count, firemass_count)
                    Else
                        'what to do if auto room population module turned off
                        'manually place items in the room
                        Call populate_items_manual(n_max, counter, fireload_count, firemass_count)
                    End If

                    mc_FLED_actual(counter - 1) = fireload_count / RoomLength(fireroom) / RoomWidth(fireroom)

                    InitialFuelMass = firemass_count
                    If frmOptions1.optPostFlashover.Checked = False Then FLED = mc_FLED_actual(counter - 1)
                    'If g_post = False Then FLED = mc_FLED_actual(counter - 1)

                    'Call Target_distance()

                Else
                    'this is using power law fire
                    n_max = 1
                    NumberObjects = 1
                    mc_FLED_actual(counter - 1) = mc_FLED(counter - 1)

                    '===================
                    If autopopulate = True Then
                        'populate the room with fire objects
                        Call populate_items(n_max, counter, fireload_count, firemass_count)
                    Else
                        'what to do if auto room population module turned off
                        'manually place items in the room
                        Call populate_items_manual(n_max, counter, fireload_count, firemass_count)
                    End If
                    mc_FLED_actual(counter - 1) = fireload_count / RoomLength(fireroom) / RoomWidth(fireroom)

                    InitialFuelMass = firemass_count
                    If frmOptions1.optPostFlashover.Checked = False Then FLED = mc_FLED_actual(counter - 1)
                    'If g_post = False Then FLED = mc_FLED_actual(counter - 1)

                    'Call Target_distance()
                    '====================
                    EnergyYield(1) = CSng(mc_item_hoc(0, counter - 1))
                    SootYield(1) = CSng(mc_item_soot(0, counter - 1))
                    CO2Yield(1) = CSng(mc_item_co2(0, counter - 1))
                    ObjectLHoG(1) = CSng(mc_item_lhog(0, counter - 1))
                    ObjectRLF(1) = CSng(mc_item_RLF(0, counter - 1))
                    ObjectMLUA(2, 1) = CSng(mc_item_hrrua(0, counter - 1))

                End If

                If ISD_windspeed > 0 Then
                    'will call later
                Else
                    Call Target_distance()
                End If

                'n_max holds number of items in this iteration
                itemcount(counter - 1) = n_max

                'sprinkler radial distance calculations if auto room population is ON
                'need sprinkler x,y coordinates
                'need first item location centre coordinates
                'calculate radial distance between item and sprinkler
                For Each oSprinkler In oSprinklers
                    oSprinkler.responsetime = 0
                    If calc_sprdist = True Then
                        mc_RadialDist(oSprinkler.sprid - 1, itcounter - 1) = Sqrt((oSprinkler.sprx - Item1X(itcounter - 1)) ^ 2 + (oSprinkler.spry - Item1Y(itcounter - 1)) ^ 2)
                    End If
                    oSprinkler.sprr = mc_RadialDist(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.rti = mc_RTI(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.cfactor = mc_cfactor(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.sprz = mc_dist(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.sprdensity = mc_waterdensity(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.acttemp = mc_acttemp(oSprinkler.sprid - 1, itcounter - 1)
                Next

                For Each oSmokeDet In oSmokeDets
                    oSmokeDet.responsetime = 0
                    If calc_sddist = True Then
                        mc_SDRadialDist(oSmokeDet.sdid - 1, itcounter - 1) = Sqrt((oSmokeDet.sdx - Item1X(itcounter - 1)) ^ 2 + (oSmokeDet.sdy - Item1Y(itcounter - 1)) ^ 2)
                    End If
                    oSmokeDet.sdr = mc_SDRadialDist(oSmokeDet.sdid - 1, itcounter - 1)
                    oSmokeDet.od = mc_SDOD(oSmokeDet.sdid - 1, itcounter - 1)
                    oSmokeDet.sdz = mc_SDZ(oSmokeDet.sdid - 1, itcounter - 1)
                    oSmokeDet.charlength = mc_SDcharlength(oSmokeDet.sdid - 1, itcounter - 1)
                Next

                For Each oFan In oFans
                    oFan.fanreliability = mc_fanIDreliability(oFan.fanid - 1, itcounter - 1)
                    oFan.fanflowrate = mc_fanflowrate(oFan.fanid - 1, itcounter - 1)
                    oFan.fanstarttime = mc_fanstarttime(oFan.fanid - 1, itcounter - 1)
                    oFan.fanpressurelimit = mc_fanpressurelimit(oFan.fanid - 1, itcounter - 1)
                Next

                'save mc data to sampledata.dat file
                Call save_sampledata()

                'use sd reliability to determine if sd failure occurs 
                'system failure not individual detector
                sd_mode = True  'sd can operate
                randrel = Ru.Next 'gets random number 0-1
                If randrel > mc_SDReliability(itcounter - 1) Then
                    sd_mode = False 'sd inactive
                End If

                mv_mode = True  'mech vent system can operate
                randrel = Ru.Next 'gets random number 0-1
                If randrel > mc_FanReliability(itcounter - 1) Then
                    mv_mode = False 'mv system inactive
                End If

                'use sprinkler reliability to determine if sprinkler failure occurs 
                randrel = Ru.Next 'gets random number 0-1
                If randrel > mc_SprReliability(itcounter - 1) Then
                    sprink_mode = 0 'sprinkler has no effect on HRR
                Else
                    'sprinkler can operate
                    randrel = Ru.Next 'gets another random number 0-1
                    If randrel > mc_SprSuppressProb(itcounter - 1) Then
                        sprink_mode = 1 'sprinkler can control fire only
                    Else
                        sprink_mode = 2 'sprinkler can suppress fire
                    End If
                End If

                'number of sprinklers required for suppression/control
                randrel = Ru.Next() 'get a random  number between 0 and 1
                If randrel <= sprnum_prob(0) Then
                    NumOperatingSpr = 1
                ElseIf randrel <= sprnum_prob(0) + sprnum_prob(1) Then
                    NumOperatingSpr = 2
                ElseIf randrel <= sprnum_prob(0) + sprnum_prob(1) + sprnum_prob(2) Then
                    NumOperatingSpr = 3
                Else
                    NumOperatingSpr = 4
                End If

                If frmOptions1.optQuintiere.Checked = True Then
                    BurnerWidth = (ObjLength(1) + ObjWidth(1)) / 2
                End If

                'save input data file for current iteration
                filename = RiskDataDirectory & "input" & counter & ".xml"
                Call Save_File_xml(filename, counter, oSprinklers, oSmokeDets, oFans)

                'run the iteration
                DataFile = Dir(filename)
                ToolStripStatusLabel2.Text = DataFile
                ToolStripStatusLabel3.Text = "Iterations started: " & counter

                Call RunOnce(DataFile, counter, oSprinklers, osprdistributions, oSmokeDets, oSDdistributions, oFans, oFanDistributions)

                sprmode_store(counter - 1) = sprink_mode

                ToolStripProgressBar1.Value = 100 * (counter / CInt(txtNumberIterations.Text))

                'save the results from the iteration
                save_dumpfile(counter)

                'lblCompleted.Text = "Iterations completed: " & counter
                ToolStripStatusLabel3.Text = "Iterations completed: " & counter
                IterationsCompleted = counter
                counter = counter + 1

                If sprink_mode = 0 Then sprfailcount = sprfailcount + 1
                sprink_mode = sprink_mode_save

                'save results to pdf
                If autosavepdf = True Then
                    Call create_pdf()
                End If

                'save results to excel
                If autosaveXL = True Then
                    Call create_excel()
                End If

                If FlagSimStop = True Then Exit Do

                'Next counter
            Loop Until counter > numit + 1

            PeakHRR = PeakHRRsave
            AlphaT = AlphaTsave

            Call Read_OutputFile_xml(basefile)
            FlagSimStop = True

            If NumSprinklers > 0 Then
                Dim x As Single = (IterationsCompleted - sprfailcount) / IterationsCompleted
                x = FormatNumber(x, 3)
                rtb_log.Text = "Sprinkler Effectiveness " & x.ToString & Chr(13) & rtb_log.Text
            End If

            If NumberTimeSteps > 1 Then
                MDIFrmMain.mnuExcel.Enabled = True
            Else
                MDIFrmMain.mnuExcel.Enabled = False
            End If

            Call createsmokeviewdata()

            MsgBox("Iterations completed.", , )
            ToolStripStatusLabel2.Text = "Iterations Completed"
            rtb_log.Text = "Simulation Finished. " & Chr(13) & rtb_log.Text
            ToolStripProgressBar1.Value = 0
            ToolStripProgressBar1.Visible = False
            StopToolStripButton1.Visible = False
            StartToolStripLabel1.Visible = True
            Cursor = Cursors.Default
            mc_go = False

            'note end time of simulation
            runtime = VB.Timer() - start
            MDIFrmMain.Timer1.Enabled = False
            EvacTimer.Enabled = False
            MDIFrmMain.mnuExcel.Enabled = True
            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb ToolStripLabel1_Click")

            ToolStripStatusLabel2.Text = "Iterations Completed with Errors"
            rtb_log.Text = "Simulation Finished. " & Chr(13) & rtb_log.Text
            ToolStripProgressBar1.Value = 0
            ToolStripProgressBar1.Visible = False
            StopToolStripButton1.Visible = False
            StartToolStripLabel1.Visible = True
            Cursor = Cursors.Default
            MDIFrmMain.Timer1.Enabled = False
            EvacTimer.Enabled = False
            mc_go = False
        End Try
    End Sub

    Private Sub ToolStripButton1_MouseHover(ByVal sender As Object, ByVal e As System.EventArgs) Handles StopToolStripButton1.MouseHover
        Cursor = Cursors.Arrow
    End Sub

    Private Sub RadialDistanceToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for interior ambient temperature
        '*  ==========================================================

        'If lstDistribution7.Text = "None" Then
        '    MsgBox("No data distribution")
        '    Exit Sub
        'End If

        Dim Title As String = ""
        Dim length As Integer = 0
        Dim index As Integer = 0

        'room = 1

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_RadialDist.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_RadialDist, 0, tempdatain, 0, length)

            xtitle = " Radial Distance (m)"

            'define variables
            '  Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & lstDistribution7.Text & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_RadialDist(0, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RadialDistanceToolStripMenuItem")
        End Try
    End Sub

    Private Sub SprinklerActivationTimeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for the operating time of  sprinkler
        '*  ==========================================================

        If (mc_sat Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprid As Integer

        sprid = 1 'sprinkler 1

        Try

            length = mc_sat.GetLength(0) * mc_sat.GetLength(1) * mc_sat.GetLength(2)
            Array.Copy(mc_sat, tempdata_SPR, length)


            xtitle = " Sprinkler Activation Time (sec)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                'Chart1.Series("Series1").Points.AddY(mc_sat(room, 0, index))
                Chart1.Series("Series1").Points.AddY(mc_sat(sprid - 1, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

            NumericUpDown1.Visible = False
            Label18.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in SprinklerActivationTimeToolStripMenuItem2")
        End Try
    End Sub

    Private Sub SprinklerActivationTimToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'cdf for sprinkler activation time - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""
        Dim sprid As Integer = 1 'sprinkler 1

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False


            xtitle = " Sprinkler Activation Time (sec)"
            counter = 0
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumberRooms
            i = fireroom

            'For j = 1 To counter
            j = 0
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_sat(sprid - 1, k)
            Next k

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
            Chart2.Series("Room " & room).Points.Clear()

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            'Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty
            NumericUpDown1.Visible = False
            Label18.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub IterationUpDown_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles IterationUpDown.ValueChanged
        If Chart3.Visible Then Call Update_timeseries(1, 0)
    End Sub

    Private Sub HeatReleaseRateToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '
        ' time-series plot for hrr - output
        '
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined

            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Heat Release Rate (kW)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_HRR(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatReleaseRateToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub RateOfHeatReleaseToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for hrr
        '*  ==========================================================

        If (mc_HRR Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_HRR.GetLength(0) * mc_HRR.GetLength(1) * mc_HRR.GetLength(2)
            Array.Copy(mc_HRR, tempdata, length)

            xtitle = " Heat Release Rate (kw)"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_HRR(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RateOfHeatReleaseToolStripMenuItem2")
        End Try
    End Sub

    Private Sub HeatReleaseRateToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'cdf for hrr - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Heat Release Rate (kW)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_HRR(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatReleaseRateToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ResponseTimeIndexToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for rti
        '*  ==========================================================

        'If lstDistribution8.Text = "None" Then
        '    MsgBox("No data distribution")
        '    Exit Sub
        'End If

        Dim Title As String = ""
        Dim length As Integer = 0
        Dim index As Integer = 0

        'room = 1

        Try

            length = mc_RTI.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_RTI, tempdatain, length)

            xtitle = " Response Time Index"

            'define variables
            ' Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & lstDistribution8.Text & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")


            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_RTI(0, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ResponseTimeIndexToolStripMenuItem")
        End Try
    End Sub

   
    'Private Sub ResponseTimeIndexToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    '*  ==========================================================
    '    '*  Show a graph showing the cdf for RTI
    '    '*  ==========================================================

    '    Dim MaxYValue, temp As Double
    '    Dim k As Integer
    '    Dim j As Integer
    '    Dim i, index As Integer
    '    Dim Title As String = ""
    '    Dim distname As String = lstDistribution8.Text
    '    Dim variance As Double = CDbl(txtVariance8.Text)
    '    If variance <= 0 Then variance = 1 'make non-zero to avoid errors

    '    Dim ks As OneSampleKSTest
    '    Dim alpha As Double = 0.01

    '    If distname = "None" Then
    '        MsgBox("No data distribution")
    '        Exit Sub
    '    End If

    '    'if no data exists
    '    If NumberTimeSteps < 1 Then
    '        MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
    '        Exit Sub
    '    End If

    '    Try
    '        NumericUpDown1.Visible = False
    '        Label18.Visible = False
    '        NumericUpDownRoom.Visible = False
    '        Label19.Visible = False
    '        IterationUpDown.Visible = False
    '        Label40.Visible = False

    '        xtitle = " Response Time Index"
    '        counter = 1
    '        room = 1
    '        'DataShift = -273
    '        'DataMultiplier = 1
    '        MaxYValue = 0

    '        'sets various properties for displaying the CDF plot
    '        Call cdf_include_input(Title, MaxYValue, room)

    '        Chart2.Series.Add("theory")
    '        Chart2.Series("theory").Points.Clear()
    '        Chart2.Series("theory").ChartType = SeriesChartType.FastLine

    '        Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

    '        'from theoretical CDF()
    '        Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(txtMean8.Text), variance)
    '        Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(txtLBound8.Text), CDbl(txtUBound8.Text))
    '        Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(txtLBound8.Text), CDbl(txtUBound8.Text), CDbl(txtMean8.Text))
    '        Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(txtMean8.Text), variance)

    '        ReDim tempdatain(0 To IterationsCompleted - 1)
    '        For k = 0 To IterationsCompleted - 1
    '            tempdatain(k) = mc_RTI(0, k)
    '        Next

    '        tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

    '        For k = 0 To IterationsCompleted - 1

    '            cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
    '            Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

    '        Next k

    '        Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
    '        Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

    '        'need a 2-d array containing the variable value, and the percentile it represents
    '        For i = 0 To NumberRooms - 1

    '            For j = 0 To counter - 1

    '                For index = 0 To 100

    '                    If room - 1 = i And j = counter - 1 Then

    '                        Select Case distname
    '                            Case "Normal"
    '                                temp = dist11.InverseCDF(index / 100)
    '                                If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Uniform"
    '                                temp = dist12.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Triangular"
    '                                temp = dist13.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Log Normal"
    '                                temp = dist14.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                        End Select

    '                    End If
    '                Next index

    '            Next j
    '        Next i

    '        Select Case distname
    '            Case "Normal"
    '                ks = New OneSampleKSTest(mc_RTI, dist11)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Uniform"
    '                ks = New OneSampleKSTest(mc_RTI, dist12)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Triangular"
    '                ks = New OneSampleKSTest(mc_RTI, dist13)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Log Normal"
    '                ks = New OneSampleKSTest(mc_RTI, dist14)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '        End Select


    '        Chart2.Series("theory").LegendText = distname

    '    Catch ex As Exception
    '        MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ResponseTimeIndexToolStripMenuItem1_Click")
    '    End Try
    'End Sub

    'Private Sub CFactorToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    '*  ==========================================================
    '    '*  Show a graph showing the cdf for c-factor
    '    '*  ==========================================================

    '    Dim MaxYValue, temp As Double
    '    Dim k As Integer
    '    Dim j As Integer
    '    Dim i, index As Integer
    '    Dim Title As String = ""
    '    Dim distname As String = lstDistribution9.Text
    '    Dim variance As Double = CDbl(txtVariance9.Text)
    '    If variance <= 0 Then variance = 1 'make non-zero to avoid errors

    '    Dim ks As OneSampleKSTest
    '    Dim alpha As Double = 0.01

    '    If distname = "None" Then
    '        MsgBox("No data distribution")
    '        Exit Sub
    '    End If

    '    'if no data exists
    '    If NumberTimeSteps < 1 Then
    '        MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
    '        Exit Sub
    '    End If

    '    Try
    '        NumericUpDown1.Visible = False
    '        Label18.Visible = False
    '        NumericUpDownRoom.Visible = False
    '        Label19.Visible = False
    '        IterationUpDown.Visible = False
    '        Label40.Visible = False

    '        xtitle = " C-Factor"
    '        counter = 1
    '        room = 1
    '        'DataShift = -273
    '        'DataMultiplier = 1
    '        MaxYValue = 0

    '        'sets various properties for displaying the CDF plot
    '        Call cdf_include_input(Title, MaxYValue, room)

    '        Chart2.Series.Add("theory")
    '        Chart2.Series("theory").Points.Clear()
    '        Chart2.Series("theory").ChartType = SeriesChartType.FastLine

    '        Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

    '        'from theoretical CDF()
    '        Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(txtMean9.Text), variance)
    '        Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(txtLBound9.Text), CDbl(txtUBound9.Text))
    '        Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(txtLBound9.Text), CDbl(txtUBound9.Text), CDbl(txtMean9.Text))
    '        Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(txtMean9.Text), variance)

    '        ReDim tempdatain(0 To IterationsCompleted - 1)
    '        For k = 0 To IterationsCompleted - 1
    '            tempdatain(k) = mc_cfactor(0, k)
    '        Next

    '        tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

    '        For k = 0 To IterationsCompleted - 1

    '            cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
    '            Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

    '        Next k

    '        Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
    '        Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

    '        'need a 2-d array containing the variable value, and the percentile it represents
    '        For i = 0 To NumberRooms - 1

    '            For j = 0 To counter - 1

    '                For index = 0 To 100

    '                    If room - 1 = i And j = counter - 1 Then

    '                        Select Case distname
    '                            Case "Normal"
    '                                temp = dist11.InverseCDF(index / 100)
    '                                If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Uniform"
    '                                temp = dist12.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Triangular"
    '                                temp = dist13.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Log Normal"
    '                                temp = dist14.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                        End Select

    '                    End If
    '                Next index

    '            Next j
    '        Next i

    '        Select Case distname
    '            Case "Normal"
    '                ks = New OneSampleKSTest(mc_cfactor, dist11)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Uniform"
    '                ks = New OneSampleKSTest(mc_cfactor, dist12)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Triangular"
    '                ks = New OneSampleKSTest(mc_cfactor, dist13)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Log Normal"
    '                ks = New OneSampleKSTest(mc_cfactor, dist14)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '        End Select

    '        Chart2.Series("theory").LegendText = distname

    '    Catch ex As Exception
    '        MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in CFactorToolStripMenuItem1_Click")
    '    End Try
    'End Sub

    'Private Sub ActivationTemperatureToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    '*  ==========================================================
    '    '*  Show a graph showing the cdf for radial distance
    '    '*  ==========================================================

    '    Dim MaxYValue, datashift, temp As Double
    '    Dim k As Integer
    '    Dim j As Integer
    '    Dim i, index As Integer
    '    Dim Title As String = ""
    '    Dim distname As String = lstDistribution10.Text
    '    Dim variance As Double = CDbl(txtVariance10.Text)
    '    If variance <= 0 Then variance = 1 'make non-zero to avoid errors

    '    Dim ks As OneSampleKSTest
    '    Dim alpha As Double = 0.01

    '    If distname = "None" Then
    '        MsgBox("No data distribution")
    '        Exit Sub
    '    End If

    '    'if no data exists
    '    If NumberTimeSteps < 1 Then
    '        MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
    '        Exit Sub
    '    End If

    '    Try
    '        NumericUpDown1.Visible = False
    '        Label18.Visible = False
    '        NumericUpDownRoom.Visible = False
    '        Label19.Visible = False
    '        IterationUpDown.Visible = False
    '        Label40.Visible = False

    '        xtitle = " Activation Temperature (C)"
    '        counter = 1
    '        room = 1
    '        datashift = -273
    '        'DataMultiplier = 1
    '        MaxYValue = 0

    '        'sets various properties for displaying the CDF plot
    '        Call cdf_include_input(Title, MaxYValue, room)

    '        Chart2.Series.Add("theory")
    '        Chart2.Series("theory").Points.Clear()
    '        Chart2.Series("theory").ChartType = SeriesChartType.FastLine

    '        Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

    '        'from theoretical CDF()
    '        Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(txtMean10.Text), variance)
    '        Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(txtLBound10.Text), CDbl(txtUBound10.Text))
    '        Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(txtLBound10.Text), CDbl(txtUBound10.Text), CDbl(txtMean10.Text))
    '        Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(txtMean10.Text), variance)

    '        ReDim tempdatain(0 To IterationsCompleted - 1)
    '        For k = 0 To IterationsCompleted - 1
    '            tempdatain(k) = mc_acttemp(0, k)
    '        Next

    '        tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

    '        For k = 0 To IterationsCompleted - 1

    '            cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
    '            Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

    '        Next k

    '        Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
    '        Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

    '        'need a 2-d array containing the variable value, and the percentile it represents
    '        For i = 0 To NumberRooms - 1

    '            For j = 0 To counter - 1

    '                For index = 0 To 100

    '                    If room - 1 = i And j = counter - 1 Then

    '                        Select Case distname
    '                            Case "Normal"
    '                                temp = dist11.InverseCDF(index / 100)
    '                                If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Uniform"
    '                                temp = dist12.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Triangular"
    '                                temp = dist13.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Log Normal"
    '                                temp = dist14.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                        End Select

    '                    End If
    '                Next index

    '            Next j
    '        Next i

    '        Select Case distname
    '            Case "Normal"
    '                ks = New OneSampleKSTest(mc_acttemp, dist11)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Uniform"
    '                ks = New OneSampleKSTest(mc_acttemp, dist12)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Triangular"
    '                ks = New OneSampleKSTest(mc_acttemp, dist13)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Log Normal"
    '                ks = New OneSampleKSTest(mc_acttemp, dist14)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '        End Select

    '        Chart2.Series("theory").LegendText = distname

    '    Catch ex As Exception
    '        MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ActivationTemperatureToolStripMenuItem1_Click")
    '    End Try
    'End Sub

    'Private Sub DistanceBelowCeilingToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    '*  ==========================================================
    '    '*  Show a graph showing the cdf for radial distance
    '    '*  ==========================================================

    '    Dim MaxYValue, temp As Double
    '    Dim k As Integer
    '    Dim j As Integer
    '    Dim i, index As Integer
    '    Dim Title As String = ""
    '    Dim distname As String = lstDistribution11.Text
    '    Dim variance As Double = CDbl(txtVariance11.Text)
    '    If variance <= 0 Then variance = 1 'make non-zero to avoid errors

    '    Dim ks As OneSampleKSTest
    '    Dim alpha As Double = 0.01

    '    If distname = "None" Then
    '        MsgBox("No data distribution")
    '        Exit Sub
    '    End If

    '    'if no data exists
    '    If NumberTimeSteps < 1 Then
    '        MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
    '        Exit Sub
    '    End If

    '    Try
    '        NumericUpDown1.Visible = False
    '        Label18.Visible = False
    '        NumericUpDownRoom.Visible = False
    '        Label19.Visible = False
    '        IterationUpDown.Visible = False
    '        Label40.Visible = False

    '        xtitle = " Distance Below Ceiling (m)"
    '        counter = 1
    '        room = 1
    '        'DataShift = -273
    '        'DataMultiplier = 1
    '        MaxYValue = 0

    '        'sets various properties for displaying the CDF plot
    '        Call cdf_include_input(Title, MaxYValue, room)

    '        Chart2.Series.Add("theory")
    '        Chart2.Series("theory").Points.Clear()
    '        Chart2.Series("theory").ChartType = SeriesChartType.FastLine

    '        Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

    '        'from theoretical CDF()
    '        Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(txtMean11.Text), variance)
    '        Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(txtLBound11.Text), CDbl(txtUBound11.Text))
    '        Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(txtLBound11.Text), CDbl(txtUBound11.Text), CDbl(txtMean11.Text))
    '        Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(txtMean11.Text), variance)

    '        ReDim tempdatain(0 To IterationsCompleted - 1)
    '        For k = 0 To IterationsCompleted - 1
    '            tempdatain(k) = mc_dist(0, k)
    '        Next

    '        tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

    '        For k = 0 To IterationsCompleted - 1

    '            cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
    '            Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

    '        Next k

    '        Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
    '        Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

    '        'need a 2-d array containing the variable value, and the percentile it represents
    '        For i = 0 To NumberRooms - 1

    '            For j = 0 To counter - 1

    '                For index = 0 To 100

    '                    If room - 1 = i And j = counter - 1 Then

    '                        Select Case distname
    '                            Case "Normal"
    '                                temp = dist11.InverseCDF(index / 100)
    '                                If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Uniform"
    '                                temp = dist12.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Triangular"
    '                                temp = dist13.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Log Normal"
    '                                temp = dist14.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                        End Select

    '                    End If
    '                Next index

    '            Next j
    '        Next i

    '        Select Case distname
    '            Case "Normal"
    '                ks = New OneSampleKSTest(mc_dist, dist11)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Uniform"
    '                ks = New OneSampleKSTest(mc_dist, dist12)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Triangular"
    '                ks = New OneSampleKSTest(mc_dist, dist13)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Log Normal"
    '                ks = New OneSampleKSTest(mc_dist, dist14)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '        End Select


    '        Chart2.Series("theory").LegendText = distname

    '    Catch ex As Exception
    '        MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DistanceBelowCeilingToolStripMenuItem1_Click")
    '    End Try
    'End Sub

    'Private Sub WaterSprayDensityToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    '*  ==========================================================
    '    '*  Show a graph showing the cdf for radial distance
    '    '*  ==========================================================

    '    Dim MaxYValue, temp As Double
    '    Dim k As Integer
    '    Dim j As Integer
    '    Dim i, index As Integer
    '    Dim Title As String = ""
    '    Dim distname As String = lstDistribution12.Text
    '    Dim variance As Double = CDbl(txtVariance12.Text)
    '    If variance <= 0 Then variance = 1 'make non-zero to avoid errors

    '    Dim ks As OneSampleKSTest
    '    Dim alpha As Double = 0.01

    '    If distname = "None" Then
    '        MsgBox("No data distribution")
    '        Exit Sub
    '    End If

    '    'if no data exists
    '    If NumberTimeSteps < 1 Then
    '        MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
    '        Exit Sub
    '    End If

    '    Try
    '        NumericUpDown1.Visible = False
    '        Label18.Visible = False
    '        NumericUpDownRoom.Visible = False
    '        Label19.Visible = False
    '        IterationUpDown.Visible = False
    '        Label40.Visible = False

    '        xtitle = " Water Spray Density (mm/min)"
    '        counter = 1
    '        room = 1
    '        'DataShift = -273
    '        'DataMultiplier = 1
    '        MaxYValue = 0

    '        'sets various properties for displaying the CDF plot
    '        Call cdf_include_input(Title, MaxYValue, room)

    '        Chart2.Series.Add("theory")
    '        Chart2.Series("theory").Points.Clear()
    '        Chart2.Series("theory").ChartType = SeriesChartType.FastLine

    '        Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

    '        'from theoretical CDF()
    '        Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(txtMean12.Text), variance)
    '        Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(txtLBound12.Text), CDbl(txtUBound12.Text))
    '        Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(txtLBound12.Text), CDbl(txtUBound12.Text), CDbl(txtMean12.Text))
    '        Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(txtMean12.Text), variance)

    '        ReDim tempdatain(0 To IterationsCompleted - 1)
    '        For k = 0 To IterationsCompleted - 1
    '            tempdatain(k) = mc_waterdensity(0, k)
    '        Next

    '        tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

    '        For k = 0 To IterationsCompleted - 1

    '            cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
    '            Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

    '        Next k
    '        Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
    '        Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

    '        'need a 2-d array containing the variable value, and the percentile it represents
    '        For i = 0 To NumberRooms - 1

    '            For j = 0 To counter - 1

    '                For index = 0 To 100

    '                    If room - 1 = i And j = counter - 1 Then

    '                        Select Case distname
    '                            Case "Normal"
    '                                temp = dist11.InverseCDF(index / 100)
    '                                If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Uniform"
    '                                temp = dist12.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Triangular"
    '                                temp = dist13.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                            Case "Log Normal"
    '                                temp = dist14.InverseCDF(index / 100)
    '                                Chart2.Series("theory").Points.AddXY(temp, index / 100)
    '                        End Select

    '                    End If
    '                Next index

    '            Next j
    '        Next i

    '        Select Case distname
    '            Case "Normal"
    '                ks = New OneSampleKSTest(mc_waterdensity, dist11)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Uniform"
    '                ks = New OneSampleKSTest(mc_waterdensity, dist12)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Triangular"
    '                ks = New OneSampleKSTest(mc_waterdensity, dist13)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '            Case "Log Normal"
    '                ks = New OneSampleKSTest(mc_waterdensity, dist14)
    '                ks.Alpha = alpha
    '                Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
    '        End Select


    '        Chart2.Series("theory").LegendText = distname

    '    Catch ex As Exception
    '        MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in WaterSprayDensityToolStripMenuItem1_Click")
    '    End Try
    'End Sub


    Private Sub NumericUpDown_Bins_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericUpDown_Bins.ValueChanged

        Select Case xtitle
            Case " Interior Ambient Temperature (K)"
                ToolStripMenuItem5.PerformClick()
            Case " Exterior Ambient Temperature (K)"
                ToolStripMenuItem6.PerformClick()
            Case "Ambient Relative Humidity"
                ToolStripMenuItem7.PerformClick()
            Case " Fire Load Energy Density (MJ/m2)"
                ToolStripMenuItem9.PerformClick()
            Case " Fuel Heat of Combustion (MJ/kg)"
                ToolStripMenuItem11.PerformClick()
            Case " Radial Distance (m)"
                RadialDistanceToolStripMenuItem.PerformClick()
            Case " Response Time Index"
                ToolStripMenuItem14.PerformClick()
            Case " C-Factor"
                ToolStripMenuItem15.PerformClick()
            Case " Activation Temperature (C)"
                ToolStripMenuItem16.PerformClick()
            Case " Distance Below Ceiling (m)"
                ToolStripMenuItem17.PerformClick()
            Case " Water Spray Density (mm/min)"
                ToolStripMenuItem18.PerformClick()
            Case " Heat of Combustion (kJ/g)"
                'ToolStripMenuItem20.PerformClick()
            Case " Upper Layer Temperature (C)"
                ToolStripMenuItem24.PerformClick()
            Case " Lower Layer Temperature (C)"
                ToolStripMenuItem25.PerformClick()
            Case " Layer Height (m)"
                ToolStripMenuItem26.PerformClick()
            Case " FED gases"
                ToolStripMenuItem27.PerformClick()
            Case " FED thermal"
                ToolStripMenuItem28.PerformClick()
            Case " Visibility (m)"
                ToolStripMenuItem29.PerformClick()
            Case " Heat Release Rate (kw)"
                ToolStripMenuItem30.PerformClick()
            Case " Sprinkler Activation Time (sec)"
                ToolStripMenuItem31.PerformClick()
            Case " Preflashover Soot Yield (g/g)"
                ToolStripMenuItem21.PerformClick()
            Case " Preflashover CO Yield (g/g)"
                ToolStripMenuItem22.PerformClick()
            Case " Fan Flow Rate (m3/s)"
                FlowRateToolStripMenuItem.PerformClick()
            Case " Fan Start Time (s)"
                StartTimeToolStripMenuItem.PerformClick()
            Case " Fan Max Pressure Diff (Pa)"
                PressureLimitToolStripMenuItem.PerformClick()
            Case "Mechanical Ventilation System Reliability (-)"
                SystemReliabilityToolStripMenuItem.PerformClick()
        End Select

        'If Chart1.Visible Then Call Update_Histogram()



    End Sub

    Private Sub PreflashoverSootYieldToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for preflashover soot yield
        '*  ==========================================================

        Dim id As Integer = 0
        Dim distname As String = ""

        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Soot Preflashover Yield" Then
                id = oDistribution.id
                distname = oDistribution.distribution
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_presoot.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_presoot, tempdatain, length)

            xtitle = " Preflashover Soot Yield (g/g)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")
            Chart1.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_presoot(index))
            Next index

            Call show_histogram_input()
            Chart1.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in PreflashoverSootYieldToolStripMenuItem")
        End Try
    End Sub



    Private Sub SprinklersToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SprinklersToolStripMenuItem2.Click

        ProjectDirectory = RiskDataDirectory
        
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Sprinkler Reliability" Then
                frmSprinklerList.txtSprReliability.Text = oDistribution.varvalue
            End If
            If oDistribution.varname = "Sprinkler Suppression Probability" Then
                frmSprinklerList.txtSprSuppressProb.Text = oDistribution.varvalue
            End If
            If oDistribution.varname = "Sprinkler Cooling Coefficient" Then
                frmSprinklerList.txtSprCoolingCoeff.Text = oDistribution.varvalue
            End If
        Next

        frmSprinklerList.Show()
        frmSprinklerList.BringToFront()
    End Sub

    Private Sub PopulateRoomObjectsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PopulateRoomObjectsToolStripMenuItem.Click

        If autopopulate = True Then
            frmPopulate.RadioButton1.Checked = True
        Else
            frmPopulate.RadioButton2.Checked = True
        End If
       
        frmPopulate.Show()
    End Sub

    Private Sub ToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem2.Click
        Dim numfiles As Integer

        numfiles = My.Computer.FileSystem.GetFiles(RiskDataDirectory, VB.FileIO.SearchOption.SearchTopLevelOnly, "input*.xml").Count
        frmPopulate.updown_itcounter.Maximum = numfiles
        frmPopulate.txtGridSize.Text = gridsize.ToString
        frmPopulate.txtVentClearance.Text = ventclearance.ToString
        frmPopulate.Show()
        frmPopulate.BringToFront()
        frmPopulate.cmdPopulate.PerformClick()
    End Sub

    Private Sub ToolStripMenuItem5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem5.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for interior ambient temperature
        '*  ==========================================================

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Interior Temperature" Then
                id = oDistribution.id
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try
            If mc_InteriorTemp Is Nothing Then
                MsgBox("No data")
                Exit Sub
            End If

            length = mc_InteriorTemp.GetLength(0)
            ' ReDim tempdatain(0 To length - 1)
            ' Array.Copy(mc_InteriorTemp, tempdatain, length)

            xtitle = " Interior Ambient Temperature (K)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & oDistributions(id - 1).distribution & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_InteriorTemp(index))
            Next index

            Call show_histogram_input()

            Chart1.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in InteriorTempToolStripMenuItem")
        End Try
    End Sub

    Private Sub ToolStripMenuItem6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem6.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for exterior ambient temperature
        '*  ==========================================================

        If mc_ExteriorTemp Is Nothing Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Exterior Temperature" Then
                id = oDistribution.id
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_ExteriorTemp.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_ExteriorTemp, tempdatain, length)

            xtitle = " Exterior Ambient Temperature (K)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & oDistributions(id - 1).distribution & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_ExteriorTemp(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ExteriorTempToolStripMenuItem")
        End Try
    End Sub

    Private Sub ToolStripMenuItem7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem7.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for ambient RH
        '*  ==========================================================


        If mc_RelativeHumidity Is Nothing Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim id As Integer
        Dim distname As String = ""
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Relative Humidity" Then
                id = oDistribution.id
                distname = oDistribution.distribution
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_RelativeHumidity.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_RelativeHumidity, tempdatain, length)

            xtitle = "Ambient Relative Humidity"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_RelativeHumidity(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RelativeHumidityToolStripMenuItem")
        End Try
    End Sub

    Private Sub ToolStripMenuItem9_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem9.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for FLED
        '*  ==========================================================

        If mc_FLED Is Nothing Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim id As Integer
        Dim distname As String = ""
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Fire Load Energy Density" Then
                id = oDistribution.id
                distname = oDistribution.distribution
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_FLED.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_FLED, tempdatain, length)

            xtitle = " Fire Load Energy Density (MJ/m2)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FLED(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FLEDToolStripMenuItem")
        End Try
    End Sub



    Private Sub ToolStripMenuItem11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem11.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for heat of combustion
        '*  ==========================================================


        If mc_HoC_fuel Is Nothing Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim id As Integer
        Dim distname As String = ""
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Heat of Combustion PFO" Then
                id = oDistribution.id
                distname = oDistribution.distribution
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        'room = 1

        Try

            length = mc_HoC_fuel.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_HoC_fuel, tempdatain, length)

            xtitle = " Fuel Heat of Combustion (MJ/kg)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_HoC_fuel(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatofCombustionToolStripMenuItem")
        End Try
    End Sub

    Private Sub ToolStripMenuItem13_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadialDistanceToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for sprinkler radial distance
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprinkid As Integer
        Dim i As Integer

        sprinkid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_RadialDist.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_RadialDist(sprinkid, i - 1)
            Next

            xtitle = " Radial Distance (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Sprinkler " & sprinkid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_RadialDist(sprinkid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RadialDistanceToolStripMenuItem")
        End Try
    End Sub

    Private Sub ToolStripMenuItem14_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem14.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for RTI
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprinkid As Integer
        Dim i As Integer

        sprinkid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_RTI.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_RTI(sprinkid, i - 1)
            Next

            xtitle = " Response Time Index"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Sprinkler " & sprinkid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_RTI(sprinkid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem14_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem15.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for cfactor
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprinkid As Integer
        Dim i As Integer

        sprinkid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_cfactor.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_cfactor(sprinkid, i - 1)
            Next

            xtitle = " Conduction Factor"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Sprinkler " & sprinkid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_cfactor(sprinkid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem15_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem16_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem16.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for activation temp
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprinkid As Integer
        Dim i As Integer

        sprinkid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_acttemp.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_acttemp(sprinkid, i - 1)
            Next

            xtitle = " Activation Temperature"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Sprinkler " & sprinkid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_acttemp(sprinkid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem16_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem17_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem17.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for sprinkler distance below ceiling
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprinkid As Integer
        Dim i As Integer

        sprinkid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_dist.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_dist(sprinkid, i - 1)
            Next

            xtitle = " Distance Below Ceiling (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Sprinkler " & sprinkid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_dist(sprinkid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem17_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem18_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem18.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for water density
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprinkid As Integer
        Dim i As Integer

        sprinkid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_waterdensity.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_waterdensity(sprinkid, i - 1)
            Next

            xtitle = " Water Density"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Sprinkler " & sprinkid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_waterdensity(sprinkid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem18_Click")
        End Try
    End Sub


    Private Sub ToolStripMenuItem21_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem21.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for preflashover soot yield
        '*  ==========================================================

        Dim param As String = "Soot Preflashover Yield"
        Dim xtitle As String = "Soot Preflashover Yield (g/g)"

        Call graph_histogram(param, xtitle, mc_presoot)
  
    End Sub

    Private Sub ToolStripMenuItem24_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem24.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for upper layer temperature
        '*  ==========================================================

        If (mc_ULTemp Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_ULTemp.GetLength(0) * mc_ULTemp.GetLength(1) * mc_ULTemp.GetLength(2)
            Array.Copy(mc_ULTemp, tempdata, length)

            xtitle = " Upper Layer Temperature (C)"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_ULTemp(room, counter, index))
            Next index

            NumericUpDown1.Minimum = 0
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in UpperLayerTemperatureToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem25_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem25.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for lower layer temperature
        '*  ==========================================================

        If (mc_LLTemp Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try
            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            length = mc_LLTemp.GetLength(0) * mc_LLTemp.GetLength(1) * mc_LLTemp.GetLength(2)
            Array.Copy(mc_LLTemp, tempdata, length)

            xtitle = " Lower Layer Temperature (C)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_LLTemp(room, counter, index))
            Next index

            NumericUpDown1.Minimum = 0
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem26_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem26.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for lower layer temperature
        '*  ==========================================================

        If (mc_LayerHeight Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try
            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            length = mc_LayerHeight.GetLength(0) * mc_LayerHeight.GetLength(1) * mc_LayerHeight.GetLength(2)
            Array.Copy(mc_LayerHeight, tempdata, length)

            xtitle = " Layer Height (m)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_LayerHeight(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LayerheightToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem27_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem27.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for FED Gases
        '*  ==========================================================

        If (mc_FEDgas Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_FEDgas.GetLength(0) * mc_FEDgas.GetLength(1) * mc_FEDgas.GetLength(2)
            Array.Copy(mc_FEDgas, tempdata, length)
            Chart1.Visible = True 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " FED gases"

            'define variables
            ' Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            ' For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FEDgas(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem28_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem28.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for FED thermal
        '*  ==========================================================

        If (mc_FEDheat Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_FEDheat.GetLength(0) * mc_FEDheat.GetLength(1) * mc_FEDheat.GetLength(2)
            Array.Copy(mc_FEDheat, tempdata, length)


            xtitle = " FED thermal"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FEDheat(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDHeatToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem29_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem29.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for visibility
        '*  ==========================================================

        If (mc_visi Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_visi.GetLength(0) * mc_visi.GetLength(1) * mc_visi.GetLength(2)
            Array.Copy(mc_visi, tempdata, length)


            xtitle = " Visibility (m)"

            'define variables
            'Title = "Output Data - Frequency Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_visi(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem30_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem30.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for hrr
        '*  ==========================================================

        If (mc_HRR Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_HRR.GetLength(0) * mc_HRR.GetLength(1) * mc_HRR.GetLength(2)
            Array.Copy(mc_HRR, tempdata, length)

            xtitle = " Heat Release Rate (kw)"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            'For index = 0 To NumberIterations - 1
            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_HRR(room, counter, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RateOfHeatReleaseToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem31_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem31.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for sprinkler activation time
        '*  ==========================================================

        If (mc_sat Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sprid As Integer

        sprid = 1 'sprinkler to show

        Try

            length = mc_sat.GetLength(0) * mc_sat.GetLength(1)
            Array.Copy(mc_sat, tempdata_SPR, length)

            If sprid = 1 Then
                xtitle = " Sprinkler Activation Time (sec) for first operating sprinkler"
            ElseIf sprid = 2 Then
                xtitle = " Sprinkler Activation Time (sec) for second operating sprinkler"
            ElseIf sprid = 3 Then
                xtitle = " Sprinkler Activation Time (sec) for third operating sprinkler"
            ElseIf sprid > 3 Then
                xtitle = " Sprinkler Activation Time (sec) for " & sprid & "th operating sprinkler"
            End If


            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_sat(sprid - 1, index))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            Call show_histogram_output()

            NumericUpDown1.Visible = False
            Label18.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in SprinklerActivationTimeToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem34_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem34.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for interior ambient temperature
        '*  ==========================================================

        Dim MaxYValue, temp As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Interior Temperature" Then
                id = oDistribution.id - 1
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim distname As String = oDistributions(id).distribution
        Dim variance As Double = CDbl(oDistributions(id).variance)
        Dim mean As Double = CDbl(oDistributions(id).mean)
        Dim ubound As Double = CDbl(oDistributions(id).ubound)
        Dim lbound As Double = CDbl(oDistributions(id).lbound)
        Dim mode As Double = CDbl(oDistributions(id).mode)
        Dim alpha As Double = CDbl(oDistributions(id).alpha)
        Dim beta As Double = CDbl(oDistributions(id).beta)

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Interior Temperature (K)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

             
            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_InteriorTemp(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select
                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(tempdatain, dist11)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(tempdatain, dist14)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(tempdatain, dist12)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(tempdatain, dist13)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select


            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in InteriorTempToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem35_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem35.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for exterior ambient temperature
        '*  ==========================================================

        Dim DataShift, MaxYValue, temp As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Exterior Temperature" Then
                id = oDistribution.id - 1
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim distname As String = oDistributions(id).distribution
        Dim variance As Double = CDbl(oDistributions(id).variance)
        Dim mean As Double = CDbl(oDistributions(id).mean)
        Dim ubound As Double = CDbl(oDistributions(id).ubound)
        Dim lbound As Double = CDbl(oDistributions(id).lbound)
        Dim mode As Double = CDbl(oDistributions(id).mode)
        Dim alpha As Double = CDbl(oDistributions(id).alpha)
        Dim beta As Double = CDbl(oDistributions(id).beta)

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " External Temperature (K)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_ExteriorTemp(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist11)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist12)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist13)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_ExteriorTemp, dist14)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ExteriorTempToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem36_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem36.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for ambient relative humidity
        '*  ==========================================================

        Dim DataShift, MaxYValue, temp As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Relative Humidity" Then
                id = oDistribution.id - 1
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim distname As String = oDistributions(id).distribution
        Dim variance As Double = CDbl(oDistributions(id).variance)
        Dim mean As Double = CDbl(oDistributions(id).mean)
        Dim ubound As Double = CDbl(oDistributions(id).ubound)
        Dim lbound As Double = CDbl(oDistributions(id).lbound)
        Dim mode As Double = CDbl(oDistributions(id).mode)
        Dim alpha As Double = CDbl(oDistributions(id).alpha)
        Dim beta As Double = CDbl(oDistributions(id).beta)
        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Relative Humidity (-)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance) 'ratio
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound)) 'ratio
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance) 'ratio

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_RelativeHumidity(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f2}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist11)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist12)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist13)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_RelativeHumidity, dist14)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RelativeHumidityToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem38_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem38.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for fled
        '*  ==========================================================
        Dim MaxYValue, temp As Double
        'Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Fire Load Energy Density" Then
                id = oDistribution.id - 1
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim distname As String = oDistributions(id).distribution
        Dim variance As Double = CDbl(oDistributions(id).variance)
        Dim mean As Double = CDbl(oDistributions(id).mean)
        Dim ubound As Double = CDbl(oDistributions(id).ubound)
        Dim lbound As Double = CDbl(oDistributions(id).lbound)
        Dim mode As Double = CDbl(oDistributions(id).mode)
        Dim alpha As Double = CDbl(oDistributions(id).alpha)
        Dim beta As Double = CDbl(oDistributions(id).beta)
        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " FLED (MJ/m2)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_FLED(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100)
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_FLED, dist11)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_FLED, dist12)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_FLED, dist13)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_FLED, dist14)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FireLoadEnergyDensityToolStripMenuItem1_Click")
        End Try

    End Sub



    Private Sub ToolStripMenuItem40_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem40.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for heat of combustion
        '*  ==========================================================

        Dim MaxYValue, temp As Double
        'Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = "Heat of Combustion PFO" Then
                id = oDistribution.id - 1
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim distname As String = oDistributions(id).distribution
        Dim variance As Double = CDbl(oDistributions(id).variance)
        Dim mean As Double = CDbl(oDistributions(id).mean)
        Dim ubound As Double = CDbl(oDistributions(id).ubound)
        Dim lbound As Double = CDbl(oDistributions(id).lbound)
        Dim mode As Double = CDbl(oDistributions(id).mode)
        Dim alpha As Double = CDbl(oDistributions(id).alpha)
        Dim beta As Double = CDbl(oDistributions(id).beta)
        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If


        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        If Convert.ToDouble(variance) <= 0 Then
            MsgBox("Check distributions have variances > 0. ", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Heat of Combustion (kJ/g)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_HoC_fuel(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100)
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select

                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist11)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist12)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist13)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(mc_HoC_fuel, dist14)
                    ks.Alpha = alpha
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select

            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatofCombustionToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem42_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem42.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for radial distance
        '*  ==========================================================

        Dim MaxYValue As Double
        'Dim temp As Double
        Dim k As Integer
        'Dim j As Integer
        'Dim i As Integer
        'Dim index As Integer
        Dim Title As String = ""
        'Dim distname As String = lstDistribution7.Text
        'Dim variance As Double = CDbl(txtVariance7.Text)
        ' If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        'Dim ks As OneSampleKSTest
        Dim alpha As Double = 0.01

        'If distname = "None" Then
        '    MsgBox("No data distribution")
        '    Exit Sub
        'End If
        Dim sprinkid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        oDistributions = SprinklerDB.GetSprDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "sprr" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Radial Distance (m)" & " - Sprinkler " & sprinkid + 1
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            'Chart2.Series.Add("theory")
            'Chart2.Series("theory").Points.Clear()
            'Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            'from theoretical CDF()
            'Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(txtMean7.Text), variance)
            'Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(txtLBound7.Text), CDbl(txtUBound7.Text))
            'Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(txtLBound7.Text), CDbl(txtUBound7.Text), CDbl(txtMean7.Text))
            'Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(txtMean7.Text), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_RadialDist(sprinkid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            'For i = 0 To NumberRooms - 1

            'For j = 0 To counter - 1

            'For index = 0 To 100

            '    If room - 1 = i And j = counter - 1 Then

            '        Select Case distname
            '            Case "Normal"
            '                temp = dist11.InverseCDF(index / 100)
            '                If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
            '            Case "Uniform"
            '                temp = dist12.InverseCDF(index / 100)
            '                Chart2.Series("theory").Points.AddXY(temp, index / 100)
            '            Case "Triangular"
            '                temp = dist13.InverseCDF(index / 100)
            '                Chart2.Series("theory").Points.AddXY(temp, index / 100)
            '            Case "Log Normal"
            '                temp = dist14.InverseCDF(index / 100)
            '                Chart2.Series("theory").Points.AddXY(temp, index / 100)
            '        End Select

            '    End If
            'Next index

            'Next j
            'Next i

            'Select Case distname
            '    Case "Normal"
            '        ks = New OneSampleKSTest(mc_RadialDist, dist11)
            '        ks.Alpha = alpha
            '        Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            '    Case "Uniform"
            '        ks = New OneSampleKSTest(mc_RadialDist, dist12)
            '        ks.Alpha = alpha
            '        Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            '    Case "Triangular"
            '        ks = New OneSampleKSTest(mc_RadialDist, dist13)
            '        ks.Alpha = alpha
            '        Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            '    Case "Log Normal"
            '        ks = New OneSampleKSTest(mc_RadialDist, dist14)
            '        ks.Alpha = alpha
            '        Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            'End Select


            'Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem42_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem43_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem43.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for RTI
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sprinkid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SprinklerDB.GetSprDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "rti" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " RTI" & " - Sprinkler " & sprinkid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_RTI(sprinkid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

       
        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem43_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem44_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem44.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for cfactor
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sprinkid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SprinklerDB.GetSprDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "cfactor" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " C-Factor" & " - Sprinkler " & sprinkid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_cfactor(sprinkid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem44_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem45_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem45.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for activation temp
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""

        Dim alpha As Double = 0.01

        Dim sprinkid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SprinklerDB.GetSprDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "acttemp" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " C-Factor" & " - Sprinkler " & sprinkid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_acttemp(sprinkid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem45_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem46_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem46.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for distance below ceiling
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sprinkid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SprinklerDB.GetSprDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "sprz" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Distance below ceiling (m)" & " - Sprinkler " & sprinkid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_dist(sprinkid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem46_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem47_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem47.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for water spray density
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sprinkid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SprinklerDB.GetSprDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "sprdensity" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Water Spray Density (mm/min)" & " - Sprinkler " & sprinkid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_waterdensity(sprinkid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem47_Click")
        End Try
    End Sub


    Private Sub ToolStripMenuItem50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem50.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for preflashover soot yield
        '*  ==========================================================

        Dim param As String = "Soot Preflashover Yield"
        Dim xtitle As String = "Soot Preflashover Yield (g/g)"

        Call graph_CDF(param, xtitle, mc_presoot)

    End Sub

    Private Sub ToolStripMenuItem51_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem51.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for preflashover CO yield
        '*  ==========================================================

        Dim param As String = "CO Preflashover Yield"
        Dim xtitle As String = "CO Preflashover Yield (g/g)"

        Call graph_CDF(param, xtitle, mc_preCO)
    End Sub

    Private Sub ToolStripMenuItem53_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem53.Click
        'cdf for upper layer temperature - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Upper Layer Temperature (C)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_ULTemp(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in UpperLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem54_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem54.Click
        'cdf for lower layer temperature - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Lower Layer Temperature (C)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_LLTemp(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem55_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem55.Click

        'cdf for layer height

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Layer Height (m)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_LayerHeight(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty


        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LayerheightToolStripMenuItem2")
        End Try
    End Sub

    Private Sub ToolStripMenuItem56_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem56.Click
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " FED Gases"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_FEDgas(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem57_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem57.Click
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " FED Heat"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_FEDheat(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDThermalToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem58_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem58.Click
        'cdf for visibility - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Visibility (m)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_visi(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem59_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem59.Click
        'cdf for hrr - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = True
            Label18.Visible = True

            xtitle = " Heat Release Rate (kW)"
            counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            For i = 1 To NumberRooms

                For j = 1 To counter
                    For k = 0 To IterationsCompleted - 1
                        tempdatain(k) = mc_HRR(i, j, k)
                    Next k

                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                    Chart2.Series("Room " & room).Points.Clear()

                    For k = 0 To IterationsCompleted - 1

                        cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                        Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                    Next k

                Next j
            Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatReleaseRateToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem60_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem60.Click
        'cdf for sprinkler activation time - output

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""
        Dim sprid As Integer

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            xtitle = " Sprinkler Activation Time (sec)"
            counter = 0
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumSprinklers
            i = fireroom
            'i = 1
            'For j = 1 To counter
            j = 0
            For k = 0 To IterationsCompleted - 1
                For sprid = 1 To NumSprinklers
                    'find the first operating sprinkler
                    'If sprid = 1 Then
                    tempdatain(k) = mc_sat(sprid - 1, k)
                    'Else
                    'If mc_sat(sprid - 1, k) < tempdatain(k) Then tempdatain(k) = mc_sat(sprid - 1, k)
                    'End If
                Next
            Next k

            'sort
            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
            Chart2.Series("Room " & room).Points.Clear()

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            'Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = "First Sprinkler to Operate."
            NumericUpDown1.Visible = False
            Label18.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ToolStripMenuItem60_Click")
        End Try
    End Sub

    Private Sub TimeSeriesPlotToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

    End Sub

    Private Sub ToolStripMenuItem62_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem62.Click
        '
        ' time-series plot for upper layer temperature - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier, XMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()

            ToolStrip1.Visible = False

            xtitle = " Time (minutes)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900
            XMultiplier = 1 / 60

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & "Room " & NumericUpDownRoom.Value & ". " & IterationsCompleted & " iterations"
            Chart3.Titles("Title1").Text = Title

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Upper Layer Temperature (C)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (minutes)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False


            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label18.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            'plot multiple series
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    If mc_ULTemp(1, j, k - 1) = 0 And j > 1 Then Exit For
                    ydata(j) = mc_ULTemp(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval * XMultiplier, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb ToolStripMenuItem62_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem63_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem63.Click
        '
        ' time-series plot for lower layer temperature - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()
            ToolStrip1.Visible = False
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900

            ' Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Lower Layer Temperature (C)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True

            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_LLTemp(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem64_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem64.Click
        '
        ' time-series plot for layer height - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()
            ToolStrip1.Visible = False
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Layer Height (m)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False

            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            Label19.Visible = True
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_LayerHeight(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LayerHeightToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem65_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem65.Click
        '
        ' time-series plot for FED gases - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()
            ToolStrip1.Visible = False

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 1

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED gases (-)"
            'Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            'Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            'Chart3.ChartAreas("ChartArea1").AxisY.Maximum = MaxYValue
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title & " for the egress path."

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = False
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Hide()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_FEDgas(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = Ceiling(ydata.Max)
            If ydata.Max <= 0.1 Then
                Chart3.ChartAreas("ChartArea1").AxisY.Maximum = 0.1
                Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.00"
            Else
                Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            End If

            'Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            'Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            'Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED gases (-)"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            'Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            'Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            'Chart3.Titles("Title1").Text = Title & " for the egress path."

            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem66_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem66.Click
        '
        ' time-series plot for FED thermal - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True
            Panel1.BringToFront()
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 1

            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
           

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = False
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Hide()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_FEDheat(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = Ceiling(ydata.Max)
            If ydata.Max <= 0.1 Then
                Chart3.ChartAreas("ChartArea1").AxisY.Maximum = 0.1
                Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.00"
            Else
                Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            End If

            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED thermal (-)"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title & " for the egress path."

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDThermalToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem67_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem67.Click
        '
        ' time-series plot for visibility - output
        '
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True
            Panel1.BringToFront()
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined

            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Visibility (m)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = 20
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_visi(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in VisibilityToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ToolStripMenuItem68_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem68.Click
        '
        ' time-series plot for hrr - output
        '
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True
            Panel1.BringToFront()
            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined

            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Heat Release Rate (kW)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            Label3.Visible = False
            NumericUpDownCounter.Visible = False
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = mc_HRR(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatReleaseRateToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ItemsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ItemsToolStripMenuItem.Click
        frmItemList.Show()
        frmItemList.BringToFront()
    End Sub

    Private Sub CloseGraphToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CloseGraphToolStripMenuItem.Click
        Chart1.Visible = False
        Chart2.Visible = False
        Chart3.Visible = False

        Panel1.SendToBack()
        ToolStrip1.Show()
        MenuStrip1.Show()
        Label19.Visible = False
        Label40.Visible = False
        Label45.Visible = False
        Label18.Visible = False
        PercentileUpDown.Visible = False
        Label2.Visible = False
        Label4.Visible = True
        Label5.Visible = True
        NumericUpDown1.Visible = False
        NumericUpDownRoom.Visible = False
        NumericUpDown_Bins.Visible = False
        IterationUpDown.Visible = False
        Label3.Visible = False
        NumericUpDownCounter.Visible = False
        ChkAutosavePdf.Visible = True
        chkAutosaveXL.Visible = True
    End Sub

    Private Sub NoOfSprinklersOperatedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NoOfSprinklersOperatedToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the frequency chart for the number of sprinklers operated
        '*  ==========================================================

        If (mc_sprnum Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            length = mc_sprnum.GetLength(0) * mc_sprnum.GetLength(1) * mc_sprnum.GetLength(2)
            Array.Copy(mc_sprnum, tempdata, length)

            xtitle = " No. Sprinklers Operated"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(CInt(mc_sprnum(room, mc_sprnum.GetLength(1) - 2, index)))
            Next index

            NumericUpDown1.Minimum = OutputInterval
            NumericUpDown1.Maximum = mc_sprnum.GetLength(1) - 2
            NumericUpDown1.Value = mc_sprnum.GetLength(1) - 2
            Call show_histogram_output()

            Chart1.ChartAreas("ChartArea1").AxisX.Minimum = 0
            Chart1.ChartAreas("ChartArea1").AxisX.Maximum = NumSprinklers + 1
            NumericUpDown1.Visible = True
            Label18.Visible = True
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in NoOfSprinklersOperatedToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub NoSprinklersActivatedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NoSprinklersActivatedToolStripMenuItem.Click
        'cdf for no. of sprinklers operated

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False

            xtitle = " No. Sprinklers Activated"
            'counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumberRooms
            i = fireroom

            For j = 1 To counter
                'j = counter
                For k = 0 To IterationsCompleted - 1
                    tempdatain(k) = CInt(mc_sprnum(i, j, k))
                Next k

                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                Chart2.Series("Room " & room).Points.Clear()

                For k = 0 To IterationsCompleted - 1

                    cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                    Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

                Next k

            Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty
            NumericUpDown1.Visible = True
            Label18.Visible = True
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in NoSprinklersActivatedToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub NoOfSprinklersActivatedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NoOfSprinklersActivatedToolStripMenuItem.Click
        '
        ' time-series plot for upper layer temperature - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()

            ToolStrip1.Visible = False

            xtitle = " Time (sec)"
            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900

            'Title = "Output Data - Time-series Plot: " & NumberIterations & " iterations"
            Title = "Output Data - Time-series Plot: " & IterationsCompleted & " iterations"

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "No. Sprinklers Activated"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False
            Chart3.Titles("Title1").Text = Title

            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            'plot multiple series
            For k = 1 To IterationsCompleted

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    ydata(j) = CInt(mc_sprnum(room, j, k - 1)) * DataMultiplier + DataShift 'data to be plotted
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

            ' Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in NoOfSprinklersActivatedToolStripMenuItem_Click")
        End Try
    End Sub


    Private Sub ExportOutputToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportOutputToolStripMenuItem.Click


    End Sub

    Private Sub RateOfHeatReleaseToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs)
        'export HRR output to excel

        Dim i, j, k As Integer
        Dim tcounter As Integer = Ceiling(SimTime / OutputInterval)

        Dim oExcel As Object
        Dim oBook As Object
        Dim oSheet As Object

        'Start a new workbook in Excel
        oExcel = CreateObject("Excel.Application")

        oBook = oExcel.Workbooks.Add

        'Create an array
        Dim DataArray(0 To tcounter + 2, 0 To NumberIterations + 1) As Object

        For i = 1 To NumberRooms
            'i = 1

            'Add headers to the worksheet on row 1
            oSheet = oBook.Worksheets(i)

            oSheet.Range("A1").Value = "time (sec)"
            oSheet.Range("B1").Value = "iterations --->"

            oSheet.name = "Room " & i.ToString

            For j = 0 To tcounter + 1
                For k = 1 To NumberIterations
                    DataArray(j + 1, 0) = OutputInterval * j

                    DataArray(j + 1, k) = mc_HRR(i, j, k - 1)

                    DataArray(0, k) = k
                Next
            Next

            'Transfer the array to the worksheet starting at cell A2
            oSheet.Range("A2").Resize(tcounter + 2, NumberIterations + 1).Value = DataArray
        Next

        Dim getname As String
        getname = RiskDataDirectory & "excel_HRR_" & Convert.ToString(txtBaseName.Text)

        'Save the Workbook and Quit Excel
        oBook.SaveAs(getname)
        oExcel.Quit()

        MsgBox("File Saved.", MsgBoxStyle.Information)
    End Sub
    Public Sub ExportDataToExcel_SRT()

        If OutputInterval = 0 Then Exit Sub
        Dim i, j, k As Integer

        Dim oExcel As Object = Empty
        Dim oBook As Object = Empty
        Dim oSheet As Object = Empty
        Chart3.Visible = False
        Try
            Dim getname As String = ""
            getname = RiskDataDirectory & "excel_SRT_" & Convert.ToString(txtBaseName.Text)

            'Start a new workbook in Excel
            oExcel = CreateObject("Excel.Application")

            oBook = oExcel.Workbooks.Add

            'oBook.worksheets.add()
            oSheet = oBook.ActiveSheet

            'Create an array
            Dim DataArray(0 To NumberIterations + 1, 0 To NumSprinklers + 1) As Object
            DataArray(0, 0) = "Iteration"

            For k = 1 To IterationsCompleted

                DataArray(k, 0) = k

                'Dim temp = mc_sat(0, k - 1)
                For m = 1 To NumSprinklers
                    'If mc_sat(m, k - 1) < temp Then
                    'temp = mc_sat(m, k - 1)
                    'End If
                    DataArray(k, m) = mc_sat(m - 1, k - 1)

                Next
                DataArray(0, 1) = "Sprinkler response times in sequence (sec) "

            Next

            'Transfer the array to the worksheet starting at cell A2
            oSheet.Range("A1").Resize(NumberIterations + 1, NumSprinklers + 1).Value = DataArray

            'oSheet.Range("A1").Value = "Iteration"

            'oSheet.Range("B1").Value = "Sprinkler response time (s)"

            If Not IsNullOrEmpty(getname) Then oBook.SaveAs(getname)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

            MsgBox("File " & getname & " saved.", MsgBoxStyle.Information)
            Exit Sub

        Catch ex As Exception

            MsgBox(Err.Description, MsgBoxStyle.Critical)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing
        End Try
    End Sub
    Public Sub ExportDataToExcel_SDRT()

        If OutputInterval = 0 Then Exit Sub
        Dim i, j, k As Integer

        Dim oExcel As Object = Empty
        Dim oBook As Object = Empty
        Dim oSheet As Object = Empty
        Chart3.Visible = False
        Try
            Dim getname As String = ""
            getname = RiskDataDirectory & "excel_SDRT_" & Convert.ToString(txtBaseName.Text)

            'Start a new workbook in Excel
            oExcel = CreateObject("Excel.Application")

            oBook = oExcel.Workbooks.Add

            'oBook.worksheets.add()
            oSheet = oBook.ActiveSheet

            'Create an array
            Dim DataArray(0 To NumberIterations + 1, 0 To NumSmokeDetectors + 1) As Object
            DataArray(0, 0) = "Iteration"

            For k = 1 To IterationsCompleted

                DataArray(k, 0) = k

                'Dim temp = mc_sat(0, k - 1)
                For m = 1 To NumSmokeDetectors
                    'If mc_sat(m, k - 1) < temp Then
                    'temp = mc_sat(m, k - 1)
                    'End If
                    DataArray(k, m) = mc_sdat(m - 1, k - 1)
                    DataArray(0, m) = "SD " & m.ToString & " response time (s)"
                Next
                'DataArray(0, 1) = "Sprinkler response times in sequence (sec) "

            Next

            'Transfer the array to the worksheet starting at cell A2
            oSheet.Range("A1").Resize(NumberIterations + 1, NumSmokeDetectors + 1).Value = DataArray

            'oSheet.Range("A1").Value = "Iteration"

            'oSheet.Range("B1").Value = "Sprinkler response time (s)"

            If Not IsNullOrEmpty(getname) Then oBook.SaveAs(getname)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

            MsgBox("File " & getname & " saved.", MsgBoxStyle.Information)
            Exit Sub

        Catch ex As Exception

            MsgBox(Err.Description, MsgBoxStyle.Critical)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing
        End Try
    End Sub

    Public Sub ExportDataToExcelToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportDataToExcelToolStripMenuItem.Click
        If OutputInterval = 0 Then Exit Sub
        Dim i, j, k As Integer
        Dim tcounter As Integer = Ceiling(SimTime / OutputInterval)

        Dim oExcel As Object = Empty
        Dim oBook As Object = Empty
        Dim oSheet As Object = Empty
        Chart3.Visible = False

        Try
            Dim getname As String = ""
            Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                Case "Upper Layer Temperature (C)"
                    getname = RiskDataDirectory & "excel_UT_" & Convert.ToString(txtBaseName.Text)
                Case "Heat Release Rate (kW)"
                    getname = RiskDataDirectory & "excel_HRR_" & Convert.ToString(txtBaseName.Text)
                Case "Lower Layer Temperature (C)"
                    getname = RiskDataDirectory & "excel_LT_" & Convert.ToString(txtBaseName.Text)
                Case "Layer Height (m)"
                    getname = RiskDataDirectory & "excel_LH_" & Convert.ToString(txtBaseName.Text)
                Case "FED gases (-)"
                    getname = RiskDataDirectory & "excel_FEDGases_" & Convert.ToString(txtBaseName.Text)
                Case "FED thermal (-)"
                    getname = RiskDataDirectory & "excel_FEDThermal_" & Convert.ToString(txtBaseName.Text)
                Case "Visibility (m)"
                    getname = RiskDataDirectory & "excel_Visi_" & Convert.ToString(txtBaseName.Text)
                Case "No. Sprinklers Activated"
                    getname = RiskDataDirectory & "excel_SPR_" & Convert.ToString(txtBaseName.Text)
                Case "Sprinkler Response Time"
                    getname = RiskDataDirectory & "excel_SRT_" & Convert.ToString(txtBaseName.Text)
                Case "FLED (Actual) MJ/m2"
                    getname = RiskDataDirectory & "excel_FLEDactual_" & Convert.ToString(txtBaseName.Text)
                Case "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                    getname = RiskDataDirectory & "excel_misc_" & Convert.ToString(txtBaseName.Text)
            End Select

            'Start a new workbook in Excel
            oExcel = CreateObject("Excel.Application")

            oBook = oExcel.Workbooks.Add


            If InStr(Chart3.Titles("Title1").Text, "Time-series Plot: Upper") Then
                Dim DataArray2(0 To tcounter + 1, 0 To 101) As Object
                Dim room_id = 1
                '    'Dim percentile(0 To 100, 0 To tcounter) As Double
                'Add headers to the worksheet on row 1
                oSheet = oBook.Worksheets(1)
                oSheet.Range("A1").Value = "time (sec)"
                oSheet.Range("B1").Value = "percentiles --->"
                For j = 0 To 100
                    DataArray2(0, j + 1) = j
                Next
                For j = 0 To tcounter
                    'If j = tcounter Then Stop

                    For k = 0 To IterationsCompleted - 1
                        Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                            Case "Upper Layer Temperature (C)"
                                tempdatain(k) = mc_ULTemp(room_id, j, k)
                            Case "Heat Release Rate (kW)"
                                tempdatain(k) = mc_HRR(room_id, j, k)
                            Case "Lower Layer Temperature (C)"
                                tempdatain(k) = mc_LLTemp(room_id, j, k)
                            Case "FED gases (-)"
                                tempdatain(k) = mc_FEDgas(room_id, j, k)
                        End Select

                    Next k
                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

                    For i = 0 To 100
                        DataArray2(j + 1, i + 1) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                    Next
                    DataArray2(j + 1, 0) = OutputInterval * j
                Next j
                oSheet.Range("A2").Resize(tcounter + 2, 102).Value = DataArray2
                getname = getname & "_percentile"
                If Not IsNullOrEmpty(getname) Then oBook.SaveAs(getname)
                oBook.Close(SaveChanges:=False)
                oExcel.Quit()
                oExcel = Nothing
                oBook = Nothing
                oSheet = Nothing

                MsgBox("File " & getname & " saved.", MsgBoxStyle.Information)
                Exit Sub
            End If

            'oBook.worksheets.add()
            oSheet = oBook.ActiveSheet

            'Create an array
            Dim DataArray(0 To tcounter + 4, 0 To NumberIterations + 1) As Object

            For i = 1 To NumberRooms
                'i = 1


                'Add headers to the worksheet on row 1
                'oSheet = oBook.Worksheets(i)

                If Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED gases (-)" Then
                    oSheet.name = "Egress Path"
                ElseIf Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED thermal (-)" Then
                    oSheet.name = "Egress Path"
                Else
                    oSheet.name = "Room " & i.ToString
                End If

                oSheet.Range("A1").Value = "time (sec)"
                oSheet.Range("B1").Value = "iterations --->" & oSheet.name

                For j = 0 To tcounter + 1
                    For k = 1 To IterationsCompleted
                        DataArray(j + 1, 0) = OutputInterval * j
                        DataArray(0, k) = k

                        Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                            Case "Upper Layer Temperature (C)"
                                DataArray(j + 1, k) = mc_ULTemp(i, j, k - 1)
                            Case "Heat Release Rate (kW)"
                                DataArray(j + 1, k) = mc_HRR(i, j, k - 1)

                            Case "Lower Layer Temperature (C)"
                                DataArray(j + 1, k) = mc_LLTemp(i, j, k - 1)
                            Case "Layer Height (m)"
                                DataArray(j + 1, k) = mc_LayerHeight(i, j, k - 1)
                            Case "FED gases (-)"
                                DataArray(j + 1, k) = mc_FEDgas(i, j, k - 1)
                            Case "FED thermal (-)"
                                DataArray(j + 1, k) = mc_FEDheat(i, j, k - 1)
                            Case "Visibility (m)"
                                DataArray(j + 1, k) = mc_visi(i, j, k - 1)
                            Case "No. Sprinklers Activated"
                                DataArray(j + 1, k) = mc_sprnum(i, j, k - 1)
                            Case "Sprinkler Response Time"
                                Dim temp = mc_sat(0, k - 1)
                                For m = 1 To NumSprinklers - 1
                                    If mc_sat(m, k - 1) < temp Then
                                        temp = mc_sat(m, k - 1)
                                    End If
                                Next
                                DataArray(1, k) = temp

                            Case "FLED (Actual) MJ/m2"
                                DataArray(1, k) = mc_FLED_actual(k - 1)
                            Case "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                                DataArray(1, k) = alphaTfitted(0, k - 1)
                                DataArray(2, k) = alphaTfitted(1, k - 1)
                                DataArray(3, k) = alphaTfitted(2, k - 1)
                                DataArray(4, k) = alphaTfitted(3, k - 1)
                                DataArray(5, k) = alphaTfitted(4, k - 1)
                                DataArray(1, 0) = "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                                DataArray(2, 0) = "HRR at Flashover (kW)"
                                DataArray(3, 0) = "Time at Flashover (sec)"
                                DataArray(4, 0) = "Ventilation Limit (kW)"
                                DataArray(5, 0) = "Time at Ventilation Limit (sec)"

                                oSheet.Range("A1").Value = ""

                        End Select

                    Next

                    If Chart3.ChartAreas("ChartArea1").AxisY.Title = "Sprinkler Response Time" Then
                        Exit For
                    End If

                    If Chart3.ChartAreas("ChartArea1").AxisY.Title = "Fire Growth Alpha Coefficient Fitted (kW/s2)" Then

                        'Check through the entire set to find the highest value
                        Dim intFoundOutter As Integer
                        Dim intFoundInner As Integer


                        For intInnnerIndex As Integer = 0 To mc_HRR.GetUpperBound(2)  'each iteration
                            Dim intCurrentHighestValue As Integer = -1
                            For intIndex As Integer = 0 To mc_HRR.GetUpperBound(1) 'each timestep
                                If mc_HRR(i, intIndex, intInnnerIndex) > intCurrentHighestValue Then
                                    intCurrentHighestValue = mc_HRR(i, intIndex, intInnnerIndex)
                                    intFoundOutter = intIndex
                                    intFoundInner = intInnnerIndex
                                End If
                            Next
                            DataArray(6, intInnnerIndex + 1) = intCurrentHighestValue
                            DataArray(6, 0) = "Peak HRR (kW)"
                            DataArray(7, intInnnerIndex + 1) = intFoundOutter * OutputInterval
                            DataArray(7, 0) = "Time at Peak HRR (sec)"


                        Next

                        Exit For

                    End If



                Next

                Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                    Case "FLED (actual) MJ/m2"
                        oSheet.Range("A2").Resize(2, NumberIterations + 1).Value = DataArray
                    Case "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                        oSheet.Range("A2").Resize(8, NumberIterations + 1).Value = DataArray
                    Case Else
                        'Transfer the array to the worksheet starting at cell A2
                        oSheet.Range("A2").Resize(tcounter + 2, NumberIterations + 1).Value = DataArray
                End Select

                If i = fireroom And Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED gases (-)" Then
                    Exit For
                End If
                If i = fireroom And Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED thermal (-)" Then
                    Exit For
                End If

                If i < NumberRooms Then
                    oBook.worksheets.add()
                    oSheet = oBook.ActiveSheet
                End If

            Next

            'On Error GoTo L1
            'Save the Workbook and Quit Excel
            If Not IsNullOrEmpty(getname) Then oBook.SaveAs(getname)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

            MsgBox("File " & getname & " saved.", MsgBoxStyle.Information)
            Exit Sub

        Catch ex As Exception

            MsgBox(Err.Description, MsgBoxStyle.Critical)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

        End Try
    End Sub


    Private Sub RateOfHeatReleaseToolStripMenuItem_Click_2(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RateOfHeatReleaseToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "Heat Release Rate (kW)"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub UpperLayerTemperatureToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UpperLayerTemperatureToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "Upper Layer Temperature (C)"
        ExportDataToExcelToolStripMenuItem.PerformClick()

    End Sub

    Private Sub LowerLayerTemperatureToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LowerLayerTemperatureToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "Lower Layer Temperature (C)"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub LayerHeightToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LayerHeightToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "Layer Height (m)"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub FEDGasesToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FEDGasesToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED gases (-)"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub FEDThermalToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FEDThermalToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "FED thermal (-)"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub VisibilityToolStripMenuItem_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles VisibilityToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        ChkAutosavePdf.Visible = False
        chkAutosaveXL.Visible = False
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "Visibility (m)"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub NumberSprinklersActivatedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumberSprinklersActivatedToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots

        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "No. Sprinklers Activated"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub Chart3_VisibleChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Chart3.VisibleChanged
        If Chart3.Visible = True Then
            ContextMenuStrip1.Items(1).Visible = True
            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
        End If
        If Chart3.Visible = False Then
            ContextMenuStrip1.Items(1).Visible = False
            ChkAutosavePdf.Visible = True
            chkAutosaveXL.Visible = True
        End If

    End Sub

    Private Sub chkIgniteTargets_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkIgniteTargets.CheckedChanged
        If chkIgniteTargets.Checked = True Then
            ignitetargets = True
        Else
            ignitetargets = False
        End If
    End Sub
    Public Sub save_dumpfile(ByVal counter As Integer)

        Try

            'save data on disk in a binary file
            Dim j As Integer, room As Integer
            Dim binfile As String = RiskDataDirectory & "dumpdata.dat"

            If My.Computer.FileSystem.FileExists(binfile) And counter = 1 Then
                My.Computer.FileSystem.DeleteFile(binfile)
            End If

            Dim binaryout As New BinaryWriter(New FileStream(binfile, FileMode.Append, FileAccess.Write))

            ProjectDirectory = RiskDataDirectory

            binaryout.Write("START")

            binaryout.Write(CStr(Version))

            binaryout.Write(CInt(counter))

            binaryout.Write(CInt(NumSprinklers))

            binaryout.Write(CInt(NumberTimeSteps))

            binaryout.Write(CInt(NumberRooms))

            binaryout.Write(CInt(fireroom))
            For room = 1 To NumberRooms
                For j = 1 To NumberTimeSteps + 1


                    binaryout.Write(CDbl(tim(j, 1))) '0

                    binaryout.Write(CDbl(layerheight(room, j))) '1

                    binaryout.Write(CDbl(uppertemp(room, j))) '2

                    binaryout.Write(CDbl(HeatRelease(room, j, 1))) '52

                    binaryout.Write(CDbl(HeatRelease(room, j, 2))) '3

                    binaryout.Write(CDbl(FuelMassLossRate(j, 1))) '4

                    binaryout.Write(CDbl(massplumeflow(j, room))) '5

                    binaryout.Write(CDbl(ventfire(room, j))) '6

                    binaryout.Write(CDbl(CO2MassFraction(room, j, 1))) '7

                    binaryout.Write(CDbl(COMassFraction(room, j, 1))) '8

                    binaryout.Write(CDbl(O2MassFraction(room, j, 1))) '9

                    binaryout.Write(CDbl(CO2MassFraction(room, j, 2))) '10

                    binaryout.Write(CDbl(COMassFraction(room, j, 2))) '11

                    binaryout.Write(CDbl(O2MassFraction(room, j, 2))) '12

                    binaryout.Write(CDbl(FEDSum(room, j))) '13

                    binaryout.Write(CDbl(Upperwalltemp(room, j))) '14

                    binaryout.Write(CDbl(CeilingTemp(room, j))) '15

                    binaryout.Write(CDbl(Target(room, j))) '16 floor

                    binaryout.Write(CDbl(lowertemp(room, j))) '17

                    binaryout.Write(CDbl(LowerWallTemp(room, j))) '18

                    binaryout.Write(CDbl(FloorTemp(room, j))) '19

                    binaryout.Write(CDbl(Y_pyrolysis(room, j))) '20

                    binaryout.Write(CDbl(X_pyrolysis(room, j))) '21

                    binaryout.Write(CDbl(Z_pyrolysis(room, j))) '22

                    binaryout.Write(CDbl(FlameVelocity(room, 1, j))) '23

                    binaryout.Write(CDbl(FlameVelocity(room, 2, j))) '24

                    binaryout.Write(CDbl(RoomPressure(room, j))) '25

                    binaryout.Write(CDbl(Visibility(room, j))) '26

                    binaryout.Write(CDbl(FlowToUpper(room, j))) '27

                    binaryout.Write(CDbl(FlowToLower(room, j))) '28

                    binaryout.Write(CDbl(SurfaceRad(room, j))) '29 rad on target

                    binaryout.Write(CDbl(FEDRadSum(room, j))) '30

                    binaryout.Write(CDbl(OD_upper(room, j))) '31

                    binaryout.Write(CDbl(OD_lower(room, j))) '32

                    binaryout.Write(CDbl(UFlowToOutside(room, j))) '35

                    binaryout.Write(CDbl(HCNMassFraction(room, j, 1))) '36

                    binaryout.Write(CDbl(HCNMassFraction(room, j, 2))) '37

                    binaryout.Write(CDbl(SPR(room, j))) '38

                    binaryout.Write(CDbl(UnexposedUpperwalltemp(room, j))) '39

                    binaryout.Write(CDbl(UnexposedLowerwalltemp(room, j))) '40

                    binaryout.Write(CDbl(UnexposedCeilingtemp(room, j))) '41

                    binaryout.Write(CDbl(UnexposedFloortemp(room, j))) '42

                    binaryout.Write(CDbl(upperemissivity(room, j))) '43

                    binaryout.Write(CDbl(NHL(1, room, j))) '53

                    If room = fireroom Then
                        binaryout.Write(CDbl(CJetTemp(j, 0, 0))) '44

                        binaryout.Write(CDbl(CJetTemp(j, 1, 0))) '45

                        binaryout.Write(CDbl(CJetTemp(j, 2, 0))) '50

                        binaryout.Write(CDbl(GlobalER(j))) '46

                        binaryout.Write(CDbl(OD_outside(room, j))) '47

                        binaryout.Write(CDbl(OD_inside(room, j))) '48

                        If NumSprinklers > 0 Then
                            binaryout.Write(CDbl(SprinkTemp(1, j))) 'save temp for sprinkler 1 only 49
                        Else
                            binaryout.Write(InteriorTemp)
                        End If
                    End If

                    'outside

                    binaryout.Write(CDbl(ventfire(NumberRooms + 1, j))) '51

                Next
            Next

            binaryout.Close()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb save_dumpfile")

        End Try
    End Sub
    Public Sub save_sampledata()

        Try


            'save sampled data on disk in a binary file
            Dim i As Short
            Dim binfile As String = RiskDataDirectory & "sampledata.dat"
            Dim binaryout As New BinaryWriter(New FileStream(binfile, FileMode.Create, FileAccess.Write))

            ProjectDirectory = RiskDataDirectory

            Dim osprinklers As New List(Of oSprinkler)
            osprinklers = SprinklerDB.GetSprinklers2
            NumSprinklers = osprinklers.Count

            Dim oSmokeDets As New List(Of oSmokeDet)
            oSmokeDets = SmokeDetDB.GetSmokDets
            NumSmokeDetectors = oSmokeDets.Count

            Dim oFans As New List(Of oFan)
            oFans = FanDB.GetFans
            NumFans = oFans.Count

            Dim ovents As New List(Of oVent)
            ovents = VentDB.GetVents
            number_vents = ovents.Count

            Dim ocvents As New List(Of oCVent)
            ocvents = VentDB.GetCVents
            number_cvents = ocvents.Count

            Dim oitems As New List(Of oItem)
            oitems = ItemDB.GetItemsv2
            NumItems = oitems.Count

            Dim oRooms As New List(Of oRoom)
            oRooms = RoomDB.GetRooms

            binaryout.Write(CDbl(Version))
            binaryout.Write(CDbl(NumSprinklers))
            binaryout.Write(CDbl(number_vents))
            binaryout.Write(CDbl(number_cvents))
            binaryout.Write(CDbl(NumItems))

            For i = 1 To NumberIterations
                binaryout.Write(mc_InteriorTemp(i - 1))
                binaryout.Write(mc_ExteriorTemp(i - 1))
                binaryout.Write(mc_RelativeHumidity(i - 1))
                binaryout.Write(mc_FLED(i - 1))
                binaryout.Write(mc_FLED_actual(i - 1))

                binaryout.Write(mc_HoC_fuel(i - 1))
                binaryout.Write(mc_presoot(i - 1))
                binaryout.Write(mc_preCO(i - 1))
                'binaryout.Write(0)
                binaryout.Write(mc_SDReliability(i - 1))
                binaryout.Write(mc_FanReliability(i - 1))
                binaryout.Write(mc_SprReliability(i - 1))

                binaryout.Write(mc_SprSuppressProb(i - 1))
                binaryout.Write(mc_SprCooling(i - 1))
                binaryout.Write(mc_PeakHRR(i - 1))
                binaryout.Write(mc_AlphaT(i - 1))

                If NumSprinklers > 0 Then
                    For Each oSprinkler In osprinklers
                        binaryout.Write(mc_RadialDist(oSprinkler.sprid - 1, i - 1))
                        binaryout.Write(mc_RTI(oSprinkler.sprid - 1, i - 1))
                        binaryout.Write(mc_cfactor(oSprinkler.sprid - 1, i - 1))
                        binaryout.Write(mc_acttemp(oSprinkler.sprid - 1, i - 1))
                        binaryout.Write(mc_dist(oSprinkler.sprid - 1, i - 1))
                        binaryout.Write(mc_waterdensity(oSprinkler.sprid - 1, i - 1))
                    Next
                End If

                If NumSmokeDetectors > 0 Then
                    For Each oSmokeDet In oSmokeDets
                        binaryout.Write(mc_SDRadialDist(oSmokeDet.sdid - 1, i - 1))
                        binaryout.Write(mc_SDOD(oSmokeDet.sdid - 1, i - 1))
                        binaryout.Write(mc_SDZ(oSmokeDet.sdid - 1, i - 1))
                        binaryout.Write(mc_SDcharlength(oSmokeDet.sdid - 1, i - 1))
                    Next
                End If

                If NumFans > 0 Then
                    For Each ofan In oFans
                        binaryout.Write(mc_fanflowrate(ofan.fanid - 1, i - 1))
                        binaryout.Write(mc_fanstarttime(ofan.fanid - 1, i - 1))
                        binaryout.Write(mc_fanpressurelimit(ofan.fanid - 1, i - 1))
                        binaryout.Write(mc_fanIDreliability(ofan.fanid - 1, i - 1))
                    Next
                End If

                If number_vents > 0 Then
                    For Each ovent In ovents
                        binaryout.Write(mc_vent_height(ovent.id - 1, i - 1))
                        binaryout.Write(mc_vent_width(ovent.id - 1, i - 1))
                        binaryout.Write(mc_ventprob(ovent.id - 1, i - 1))
                        binaryout.Write(mc_HOreliability(ovent.id - 1, i - 1))
                        binaryout.Write(mc_integrity(ovent.id - 1, i - 1))
                        binaryout.Write(mc_maxopening(ovent.id - 1, i - 1))
                        binaryout.Write(mc_maxopeningtime(ovent.id - 1, i - 1))
                        binaryout.Write(mc_gastemp(ovent.id - 1, i - 1))
                    Next
                End If

                If number_cvents > 0 Then
                    For Each ocvent In ocvents
                        binaryout.Write(mc_vent_area(ocvent.id - 1, i - 1))
                        binaryout.Write(mc_integrity2(ocvent.id - 1, i - 1))
                        binaryout.Write(mc_maxopening2(ocvent.id - 1, i - 1))
                        binaryout.Write(mc_maxopeningtime2(ocvent.id - 1, i - 1))
                        binaryout.Write(mc_gastemp2(ocvent.id - 1, i - 1))
                    Next
                End If

                If NumberRooms > 0 Then
                    For Each oRoom In oRooms
                        binaryout.Write(mc_room_length(oRoom.num - 1, i - 1))
                        binaryout.Write(mc_room_width(oRoom.num - 1, i - 1))
                    Next
                End If

                If NumItems > 0 Then
                    For Each oitem In oitems
                        binaryout.Write(mc_item_co2(oitem.id - 1, i - 1))
                        binaryout.Write(mc_item_hoc(oitem.id - 1, i - 1))
                        binaryout.Write(mc_item_hrrua(oitem.id - 1, i - 1))
                        binaryout.Write(mc_item_lhog(oitem.id - 1, i - 1))
                        binaryout.Write(mc_item_RLF(oitem.id - 1, i - 1))
                        binaryout.Write(mc_item_soot(oitem.id - 1, i - 1))
                    Next
                End If

            Next

            binaryout.Close()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb save_sampledata")

        End Try

    End Sub


    Public Sub ShowDistributionForm(ByVal param As String)

        Dim NewDistributionForm As New frmDistParam
        NewDistributionForm.Text = "Edit Distribution"

        Dim odistributions As List(Of oDistribution)

        odistributions = DistributionClass.GetDistributions()

        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                NewDistributionForm.oDistribution = odistribution
                NewDistributionForm.lblDistName.Text = param.ToString & " (" & odistribution.units.ToString & ")"
                NewDistributionForm.Tag = odistribution.varname
                NewDistributionForm.lstDistribution.Text = odistribution.distribution

                Select Case param
                    Case "Relative Humidity"
                        NewDistributionForm.txtUpperBound.Text = odistribution.ubound * 100
                        NewDistributionForm.txtLowerBound.Text = odistribution.lbound * 100
                        NewDistributionForm.txtMean.Text = odistribution.mean * 100
                        NewDistributionForm.txtValue.Text = odistribution.varvalue * 100
                        NewDistributionForm.txtVariance.Text = odistribution.variance * 10000
                        NewDistributionForm.txtMode.Text = odistribution.mode * 100
                        NewDistributionForm.txtAlpha.Text = odistribution.alpha
                        NewDistributionForm.txtBeta.Text = odistribution.beta
                    Case "Interior Temperature"
                        NewDistributionForm.txtUpperBound.Text = odistribution.ubound - 273
                        NewDistributionForm.txtLowerBound.Text = odistribution.lbound - 273
                        NewDistributionForm.txtMean.Text = odistribution.mean - 273
                        NewDistributionForm.txtValue.Text = odistribution.varvalue - 273
                        NewDistributionForm.txtVariance.Text = odistribution.variance
                        NewDistributionForm.txtMode.Text = odistribution.mode - 273
                        NewDistributionForm.txtAlpha.Text = odistribution.alpha
                        NewDistributionForm.txtBeta.Text = odistribution.beta
                    Case "Exterior Temperature"
                        NewDistributionForm.txtUpperBound.Text = odistribution.ubound - 273
                        NewDistributionForm.txtLowerBound.Text = odistribution.lbound - 273
                        NewDistributionForm.txtMean.Text = odistribution.mean - 273
                        NewDistributionForm.txtValue.Text = odistribution.varvalue - 273
                        NewDistributionForm.txtVariance.Text = odistribution.variance
                        NewDistributionForm.txtMode.Text = odistribution.mode - 273
                        NewDistributionForm.txtAlpha.Text = odistribution.alpha
                        NewDistributionForm.txtBeta.Text = odistribution.beta
                    Case Else
                        NewDistributionForm.txtUpperBound.Text = odistribution.ubound
                        NewDistributionForm.txtLowerBound.Text = odistribution.lbound
                        NewDistributionForm.txtMean.Text = odistribution.mean
                        NewDistributionForm.txtValue.Text = odistribution.varvalue
                        NewDistributionForm.txtVariance.Text = odistribution.variance
                        NewDistributionForm.txtMode.Text = odistribution.mode
                        NewDistributionForm.txtAlpha.Text = odistribution.alpha
                        NewDistributionForm.txtBeta.Text = odistribution.beta
                End Select

            End If
        Next

        NewDistributionForm.ShowDialog()

    End Sub
  

    Private Sub ExportFromDumpFileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportFromDumpFileToolStripMenuItem.Click
        Try
            Dim thisroom, room, startit, endit As Integer
            Dim Message, dDefault, MyValue, title As String

            title = "Select Room"   ' Set title.
            Message = "Enter room number"   ' Set prompt.
            dDefault = fireroom.ToString   ' Set default.
            ' Display message, title, and default value.
            MyValue = InputBox(Message, title, dDefault)
            If Not IsNumeric(MyValue) Then
                MsgBox("You have not entered a valid room number.", MsgBoxStyle.Exclamation)
                Exit Sub
            End If
            thisroom = CInt(MyValue)

            title = "Export Data from Iteration?"   ' Set title.
            Message = "Enter start iteration"   ' Set prompt.
            dDefault = 1   ' Set default.
            ' Display message, title, and default value.
            MyValue = InputBox(Message, title, dDefault)
            If Not IsNumeric(MyValue) Then
                MsgBox("You have not entered a valid iteration number.", MsgBoxStyle.Exclamation)
                Exit Sub
            End If
            startit = CInt(MyValue)

            title = "Export Data to Iteration?"   ' Set title.
            Message = "Enter end iteration"   ' Set prompt.
            dDefault = IterationsCompleted   ' Set default.
            ' Display message, title, and default value.
            MyValue = InputBox(Message, title, dDefault)
            If Not IsNumeric(MyValue) Then
                MsgBox("You have not entered a valid iteration number.", MsgBoxStyle.Exclamation)
                Exit Sub
            End If
            endit = CInt(MyValue)

            Dim s As String
            Dim k, j, count As Integer
            Dim dummystring As String
            Dim dummyint As Integer, ifireroom As Integer, inumberrooms As Integer
            Dim inumbertimesteps As Integer, inumbersprinklers As Integer
            Dim SaveBox As New SaveFileDialog()

            'dialogbox title
            SaveBox.Title = "Export Data to Excel File"

            'Set filters
            SaveBox.Filter = "All Files (*.*)|*.*|xlsx Files (*.xlsx)|*.xlsx|xls Files (*.xls)|*.xls"

            'Specify default filter
            SaveBox.FilterIndex = 2
            SaveBox.RestoreDirectory = True


            'default filename
            If ProjectDirectory = "" Then ProjectDirectory = RiskDataDirectory
            SaveBox.InitialDirectory = ProjectDirectory

            'default filename
            Dim getname As String = ProjectDirectory & "excel_dump_R" & thisroom.ToString & "_" & startit.ToString & "_" & endit.ToString & "_" & Convert.ToString(txtBaseName.Text)

            SaveBox.FileName = Mid(getname, 1, Len(getname))

            If FileInUse(SaveBox.FileName) = True Then
                MsgBox("That file is in use. Please close it and try again.", MsgBoxStyle.Exclamation)
                Me.ToolStripStatusLabel1.Text = ""
                Exit Sub
            End If

            Dim nrow As Integer = Timestep

            Dim binfile As String = RiskDataDirectory & "dumpdata.dat"
            Dim binaryin As New BinaryReader(New FileStream(binfile, FileMode.Open, FileAccess.Read))

            Dim oExcel As Object
            Dim oBook As Object
            Dim oSheet As Object

            'Start a new workbook in Excel
            oExcel = CreateObject("Excel.Application")

            oBook = oExcel.Workbooks.Add

            Dim i As Integer = 0
            For Each oSheet In oBook.Sheets
                i += 1
                If i = 1 Then
                    Continue For
                Else
                    oSheet.Delete()
                End If
            Next

            oSheet = oBook.Worksheets(1)

            oSheet.name = startit.ToString 'iteration
            oSheet.Move(, oBook.Worksheets(oBook.Worksheets.Count))

            s = "0.000E+00"

            Dim rowcount As Short
            Me.ToolStripStatusLabel1.Text = "Saving to Excel ... Please Wait. "

            If IterationsCompleted = 0 Then IterationsCompleted = endit

            For count = 1 To IterationsCompleted

                'read in data from binary file
                dummystring = binaryin.ReadString
                dummystring = binaryin.ReadString
                Dim ver As String = dummystring

                If InStrRev(ver, "201") = 0 Then
                    'old dump file with version data
                Else
                    dummyint = binaryin.ReadInt32
                End If

                inumbersprinklers = binaryin.ReadInt32
                inumbertimesteps = binaryin.ReadInt32

                Dim DataArray(0 To inumbertimesteps + 2, 0 To 53) As Object

                inumberrooms = binaryin.ReadInt32

                If thisroom > inumberrooms Then
                    binaryin.Close()
                    MsgBox("You have not entered a valid room number.", MsgBoxStyle.Exclamation)
                    Me.ToolStripStatusLabel1.Text = ""
                    Exit Sub
                End If

                ifireroom = binaryin.ReadInt32

                DataArray(0, 0) = "Time (sec)"
                DataArray(0, 1) = "Layer (m)"
                DataArray(0, 2) = "Upper Layer Temp (C)"
                DataArray(0, 3) = "HRR (kW)"
                DataArray(0, 4) = "Mass (kg/s)"
                DataArray(0, 5) = "Plume (kg/s)"
                DataArray(0, 6) = "Vent Fire (kW)"

                DataArray(0, 7) = "CO2 Upper Mass Fraction"

                DataArray(0, 8) = "CO Upper Mass Fraction"

                DataArray(0, 9) = "O2 Upper Mass Fraction"

                DataArray(0, 10) = "CO2 Lower Mass Fraction"

                DataArray(0, 11) = "CO Lower Mass Fraction"

                DataArray(0, 12) = "O2 Lower Mass Fraction"
                DataArray(0, 13) = ""
                DataArray(0, 14) = "Upper Wall Temp (C)"
                DataArray(0, 15) = "Ceiling Temp (C)"
                DataArray(0, 16) = "Rad on Floor (kW/m2)"
                DataArray(0, 17) = "Lower Layer Temp (C)"
                DataArray(0, 18) = "Lower Wall Temp (C)"
                DataArray(0, 19) = "Floor Temp (C)"
                DataArray(0, 20) = "Y Pyrolysis Front (m)"
                DataArray(0, 21) = "X Pyrolysis Front (m)"
                DataArray(0, 22) = "Z Pyrolysis Front (m)"
                DataArray(0, 23) = "Upward Velocity (m/s)"
                DataArray(0, 24) = "Lateral Velocity (m/s)"
                DataArray(0, 25) = "Pressure (Pa)"
                DataArray(0, 26) = "Visibility (m)"
                DataArray(0, 27) = "Vent Flow to Upper Layer (kg/s)"
                DataArray(0, 28) = "Vent Flow to Lower Layer (kg/s)"
                DataArray(0, 29) = "Rad on Target (kW/m2)"
                DataArray(0, 30) = ""
                DataArray(0, 31) = "OD upper (1/m)"
                DataArray(0, 32) = "OD lower (1/m)"
                DataArray(0, 33) = "k upper (1/m)"
                DataArray(0, 34) = "k lower (1/m)"
                DataArray(0, 35) = "Vent Flow to Outside (m3/s)"
                
                DataArray(0, 36) = "HCN Upper Mass Fraction"
                DataArray(0, 37) = "HCN Lower Mass Fraction"
                DataArray(0, 38) = "SPR (m2/kg)"
                DataArray(0, 39) = "Unexposed Upper Wall Temp (C)"
                DataArray(0, 40) = "Unexposed Lower Wall Temp (C)"
                DataArray(0, 41) = "Unexposed Ceiling Temp (C)"
                DataArray(0, 42) = "Unexposed Floor Temp (C)"
                DataArray(0, 43) = "Upper Layer Emissivity (-)"
                DataArray(0, 53) = "Normalised Heat Load (s1/2K)"

                If thisroom = ifireroom Then
                    DataArray(0, 13) = "FED gases - for specified egress path"
                    DataArray(0, 30) = "FED thermal - for specified egress path"

                    DataArray(0, 44) = "Ceiling Jet Temp(C)"
                    DataArray(0, 45) = "Max Ceil Jet Temp(C)"
                    DataArray(0, 46) = "GER"
                    DataArray(0, 47) = "Smoke Detect OD-out (1/m)"
                    DataArray(0, 48) = "Smoke Detect OD-in (1/m)"
                    DataArray(0, 49) = "Spr1 Link Temp (C)"
                    DataArray(0, 50) = "Ceiling Jet Velocity (m/s)"
                End If

                DataArray(0, 51) = "Vent Fire - Outside (kW)"
                DataArray(0, 52) = "Unconstrained HRR (kW)"

                If inumbertimesteps > 0 Then

                    For room = 1 To inumberrooms
                        k = 2 'row
                        For j = 1 To inumbertimesteps + 1

                            If k > DataArray.GetLength(0) Then
                                Exit For
                            End If

                            If room = thisroom Then

                                DataArray(k - 1, 0) = Format(binaryin.ReadDouble.ToString("G", CultureInfo.InvariantCulture))
                                DataArray(k - 1, 1) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 2) = VB6.Format(binaryin.ReadDouble - 273, s)

                                DataArray(k - 1, 52) = VB6.Format(binaryin.ReadDouble, s)

                                DataArray(k - 1, 3) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 4) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 5) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 6) = VB6.Format(binaryin.ReadDouble, s)

                                DataArray(k - 1, 7) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 8) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 9) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 10) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 11) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 12) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 13) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 14) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 15) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 16) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 17) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 18) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 19) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 20) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 21) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 22) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 23) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 24) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 25) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 26) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 27) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 28) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 29) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 30) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 31) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 32) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 33) = VB6.Format(2.3 * CDbl(DataArray(k - 1, 31)), s)
                                DataArray(k - 1, 34) = VB6.Format(2.3 * CDbl(DataArray(k - 1, 32)), s)
                                DataArray(k - 1, 35) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 36) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 37) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 38) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 39) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 40) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 41) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 42) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 43) = VB6.Format(binaryin.ReadDouble, s)

                                DataArray(k - 1, 53) = VB6.Format(binaryin.ReadDouble, s)

                                If room = ifireroom Then

                                    DataArray(k - 1, 44) = VB6.Format(binaryin.ReadDouble - 273, s)
                                    DataArray(k - 1, 45) = VB6.Format(binaryin.ReadDouble - 273, s)

                                    DataArray(k - 1, 50) = VB6.Format(binaryin.ReadDouble, s)

                                    DataArray(k - 1, 46) = VB6.Format(binaryin.ReadDouble, s)
                                    DataArray(k - 1, 47) = VB6.Format(binaryin.ReadDouble, s)
                                    DataArray(k - 1, 48) = VB6.Format(binaryin.ReadDouble, s)
                                    DataArray(k - 1, 49) = VB6.Format(binaryin.ReadDouble - 273, s)

                                End If

                                DataArray(k - 1, 51) = VB6.Format(binaryin.ReadDouble, s)

                            Else
                                'discard data
                                For m = 0 To 43
                                    binaryin.ReadDouble()
                                Next

                                If room = ifireroom Then
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                End If

                                Dim dummy As Double = binaryin.ReadDouble()

                            End If

                k = k + 1

            Next
                        If room = thisroom Then Exit For
                    Next

                    rowcount = k

                End If

                If count >= startit And count <= endit Then

                    'Transfer the array to the worksheet starting at cell A1
                    oSheet.Range("A1").Resize(rowcount, 54).Value = DataArray
                    DataArray.Initialize()

                    If count < endit Then
                        oBook.Worksheets.add()
                        oSheet = oBook.ActiveSheet
                        oSheet.Name = CStr(count + 1)
                    End If

                End If

            Next count

            binaryin.Close()

            'Save the Workbook and Quit Excel
            oBook.SaveAs(SaveBox.FileName)
            oExcel.Quit()

            If Err.Number = 1004 Then
                MsgBox(SaveBox.FileName & " is already Open. Please close and then try again.", MsgBoxStyle.OkOnly)
                Err.Clear()
            Else
                MsgBox("Data saved in " & SaveBox.FileName, MsgBoxStyle.Information + MsgBoxStyle.OkOnly)
            End If
            Me.ToolStripStatusLabel1.Text = ""
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Arrow

            'release the objects
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

            Exit Sub

excelerrorhandler:
            'close excel
            oBook.Close()
            oExcel.Application.Quit()

            'release the objects
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

more:
            If Err.Number <> 32755 Then MsgBox(ErrorToString(Err.Number))
            'User pressed Cancel button
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Arrow
            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb ExportFromDumpFileToolMenuItem_Click")
            Me.ToolStripStatusLabel1.Text = ""
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Arrow
        End Try

    End Sub
    Private Sub ExportFromDump()
        'test code 
        Try
            Dim thisroom, room, startit, endit As Integer
            Dim Message, dDefault, MyValue, title As String

            title = "Select Room"   ' Set title.
            Message = "Enter room number"   ' Set prompt.
            dDefault = fireroom.ToString   ' Set default.
            ' Display message, title, and default value.
            MyValue = InputBox(Message, title, dDefault)
            If Not IsNumeric(MyValue) Then
                MsgBox("You have not entered a valid room number.", MsgBoxStyle.Exclamation)
                Exit Sub
            End If
            thisroom = CInt(MyValue)

            title = "Export Data from Iteration?"   ' Set title.
            Message = "Enter start iteration"   ' Set prompt.
            dDefault = 1   ' Set default.
            ' Display message, title, and default value.
            MyValue = InputBox(Message, title, dDefault)
            If Not IsNumeric(MyValue) Then
                MsgBox("You have not entered a valid iteration number.", MsgBoxStyle.Exclamation)
                Exit Sub
            Else

                'If (MyValue > 0) And (MyValue <= IterationsCompleted) Then

                'Else
                '    MsgBox("Start iteration must be in the range 1 to " & IterationsCompleted, MsgBoxStyle.Exclamation)
                'End If
            End If
            startit = CInt(MyValue)

            title = "Export Data to Iteration?"   ' Set title.
            Message = "Enter end iteration"   ' Set prompt.
            dDefault = IterationsCompleted   ' Set default.
            ' Display message, title, and default value.
            MyValue = InputBox(Message, title, dDefault)
            If Not IsNumeric(MyValue) Then
                MsgBox("You have not entered a valid iteration number.", MsgBoxStyle.Exclamation)
                Exit Sub
            Else
                'If (MyValue >= startit) And (MyValue <= IterationsCompleted) Then

                'Else
                '    MsgBox("End iteration must be in the range " & startit & " to " & IterationsCompleted, MsgBoxStyle.Exclamation)
                'End If
            End If
            endit = CInt(MyValue)

            Dim s As String
            Dim k, j, count As Integer
            ' Dim dummydbl As Double
            Dim dummystring As String
            Dim dummyint As Integer, ifireroom As Integer, inumberrooms As Integer
            Dim inumbertimesteps As Integer, inumbersprinklers As Integer
            Dim SaveBox As New SaveFileDialog()

            'dialogbox title
            SaveBox.Title = "Export Data to Excel File"

            'Set filters
            SaveBox.Filter = "All Files (*.*)|*.*|xlsx Files (*.xlsx)|*.xlsx|xls Files (*.xls)|*.xls"

            'Specify default filter
            SaveBox.FilterIndex = 2
            SaveBox.RestoreDirectory = True


            'default filename
            If ProjectDirectory = "" Then ProjectDirectory = RiskDataDirectory
            SaveBox.InitialDirectory = ProjectDirectory

            'default filename
            Dim getname As String = ProjectDirectory & "excel_dump_R" & thisroom.ToString & "_" & startit.ToString & "_" & endit.ToString & "_" & Convert.ToString(txtBaseName.Text)
            'If Len(getname) > 0 Then
            'Else
            '    getname = ProjectDirectory & "dump.xlsx"
            'End If
            ' SaveBox.FileName = Mid(getname, 1, Len(getname)) & ".xlsx"
            SaveBox.FileName = Mid(getname, 1, Len(getname))

            If FileInUse(SaveBox.FileName) = True Then
                MsgBox("That file is in use. Please close it and try again.", MsgBoxStyle.Exclamation)
                Me.ToolStripStatusLabel1.Text = ""
                Exit Sub
            End If

            Dim nrow As Integer = Timestep

            Dim binfile As String = RiskDataDirectory & "dumpdata.dat"
            Dim binaryin As New BinaryReader(New FileStream(binfile, FileMode.Open, FileAccess.Read))

            'Create an array
            'Dim DataArray(0 To NumberTimeSteps + 2, 0 To 50) As Object

            Dim oExcel As Object
            Dim oBook As Object
            Dim oSheet As Object

            'Start a new workbook in Excel
            oExcel = CreateObject("Excel.Application")

            oBook = oExcel.Workbooks.Add

            Dim i As Integer = 0
            For Each oSheet In oBook.Sheets
                i += 1
                If i = 1 Then
                    Continue For
                Else
                    oSheet.Delete()
                End If
            Next

            oSheet = oBook.Worksheets(1)

            ' oSheet.name = "1" 'iteration
            oSheet.name = startit.ToString 'iteration
            oSheet.Move(, oBook.Worksheets(oBook.Worksheets.Count))

            'oBook.Worksheets.add()
            'oSheet = oBook.ActiveSheet
            'oSheet.Name = "1" 'iteration

            'assign values to excel cells
            'define a format string
            's = "Scientific"
            s = "0.000E+00"

            Dim rowcount As Short
            Me.ToolStripStatusLabel1.Text = "Saving to Excel ... Please Wait. "

            If IterationsCompleted = 0 Then IterationsCompleted = endit

            For count = 1 To IterationsCompleted

                'read in data from binary file
                dummystring = binaryin.ReadString
                dummystring = binaryin.ReadString
                Dim ver As String = dummystring

                If InStrRev(ver, "201") = 0 Then
                    'old dump file with version data
                Else
                    dummyint = binaryin.ReadInt32
                End If



                'dummyint = binaryin.ReadInt32
                inumbersprinklers = binaryin.ReadInt32
                inumbertimesteps = binaryin.ReadInt32

                Dim DataArray(0 To inumbertimesteps + 2, 0 To 53) As Object

                inumberrooms = binaryin.ReadInt32

                If thisroom > inumberrooms Then
                    binaryin.Close()
                    MsgBox("You have not entered a valid room number.", MsgBoxStyle.Exclamation)
                    Me.ToolStripStatusLabel1.Text = ""
                    Exit Sub
                End If

                ifireroom = binaryin.ReadInt32

                DataArray(0, 0) = "Time (sec)"
                DataArray(0, 1) = "Layer (m)"
                DataArray(0, 2) = "Upper Layer Temp (C)"
                DataArray(0, 3) = "HRR (kW)"
                DataArray(0, 4) = "Mass (kg/s)"
                DataArray(0, 5) = "Plume (kg/s)"
                DataArray(0, 6) = "Vent Fire (kW)"
                'DataArray(0, 7) = "CO2 Upper(%)"
                DataArray(0, 7) = "CO2 Upper Mass Fraction"
                'DataArray(0, 8) = "CO Upper (ppm)"
                DataArray(0, 8) = "CO Upper Mass Fraction"
                'DataArray(0, 9) = "O2 Upper (%)"
                DataArray(0, 9) = "O2 Upper Mass Fraction"
                'DataArray(0, 10) = "CO2 Lower(%)"
                DataArray(0, 10) = "CO2 Lower Mass Fraction"
                'DataArray(0, 11) = "CO Lower(ppm)"
                DataArray(0, 11) = "CO Lower Mass Fraction"
                'DataArray(0, 12) = "O2 Lower (%)"
                DataArray(0, 12) = "O2 Lower Mass Fraction"
                DataArray(0, 13) = ""
                DataArray(0, 14) = "Upper Wall Temp (C)"
                DataArray(0, 15) = "Ceiling Temp (C)"
                DataArray(0, 16) = "Rad on Floor (kW/m2)"
                DataArray(0, 17) = "Lower Layer Temp (C)"
                DataArray(0, 18) = "Lower Wall Temp (C)"
                DataArray(0, 19) = "Floor Temp (C)"
                DataArray(0, 20) = "Y Pyrolysis Front (m)"
                DataArray(0, 21) = "X Pyrolysis Front (m)"
                DataArray(0, 22) = "Z Pyrolysis Front (m)"
                DataArray(0, 23) = "Upward Velocity (m/s)"
                DataArray(0, 24) = "Lateral Velocity (m/s)"
                DataArray(0, 25) = "Pressure (Pa)"
                DataArray(0, 26) = "Visibility (m)"
                DataArray(0, 27) = "Vent Flow to Upper Layer (kg/s)"
                DataArray(0, 28) = "Vent Flow to Lower Layer (kg/s)"
                DataArray(0, 29) = "Rad on Target (kW/m2)"
                DataArray(0, 30) = ""
                DataArray(0, 31) = "OD upper (1/m)"
                DataArray(0, 32) = "OD lower (1/m)"
                DataArray(0, 33) = "k upper (1/m)"
                DataArray(0, 34) = "k lower (1/m)"
                DataArray(0, 35) = "Vent Flow to Outside (m3/s)"

                DataArray(0, 36) = "HCN Upper Mass Fraction"
                DataArray(0, 37) = "HCN Lower Mass Fraction"
                DataArray(0, 38) = "SPR (m2/kg)"
                DataArray(0, 39) = "Unexposed Upper Wall Temp (C)"
                DataArray(0, 40) = "Unexposed Lower Wall Temp (C)"
                DataArray(0, 41) = "Unexposed Ceiling Temp (C)"
                DataArray(0, 42) = "Unexposed Floor Temp (C)"
                DataArray(0, 43) = "Upper Layer Emissivity (-)"
                DataArray(0, 53) = "Normalised Heat Load (s1/2K)"

                If thisroom = ifireroom Then
                    DataArray(0, 13) = "FED gases - for specified egress path"
                    DataArray(0, 30) = "FED thermal - for specified egress path"

                    DataArray(0, 44) = "Ceiling Jet Temp(C)"
                    DataArray(0, 45) = "Max Ceil Jet Temp(C)"
                    DataArray(0, 46) = "GER"
                    DataArray(0, 47) = "Smoke Detect OD-out (1/m)"
                    DataArray(0, 48) = "Smoke Detect OD-in (1/m)"
                    DataArray(0, 49) = "Spr1 Link Temp (C)"
                    DataArray(0, 50) = "Ceiling Jet Velocity (m/s)"
                End If

                DataArray(0, 51) = "Vent Fire - Outside (kW)"
                DataArray(0, 52) = "Unconstrained HRR (kW)"

                If inumbertimesteps > 0 Then

                    For room = 1 To inumberrooms
                        k = 2 'row
                        For j = 1 To inumbertimesteps + 1
                            'If j = inumbertimesteps Then Stop
                            If k > DataArray.GetLength(0) Then
                                Exit For
                            End If


                            'count = count + 1
                            'If System.Math.Round(Int(tim(j, 1) / ExcelInterval) - tim(j, 1) / ExcelInterval, 4) = 0 Then

                            If room = thisroom Then

                                DataArray(k - 1, 0) = VB6.Format(binaryin.ReadDouble, "general number")
                                DataArray(k - 1, 1) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 2) = VB6.Format(binaryin.ReadDouble - 273, s)

                                'If CSng(ver) > CSng("2013.16") Then
                                DataArray(k - 1, 52) = VB6.Format(binaryin.ReadDouble, s)
                                'End If

                                DataArray(k - 1, 3) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 4) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 5) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 6) = VB6.Format(binaryin.ReadDouble, s)

                                DataArray(k - 1, 7) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 8) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 9) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 10) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 11) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 12) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 13) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 14) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 15) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 16) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 17) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 18) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 19) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 20) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 21) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 22) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 23) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 24) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 25) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 26) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 27) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 28) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 29) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 30) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 31) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 32) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 33) = VB6.Format(2.3 * CDbl(DataArray(k - 1, 31)), s)
                                DataArray(k - 1, 34) = VB6.Format(2.3 * CDbl(DataArray(k - 1, 32)), s)
                                DataArray(k - 1, 35) = VB6.Format(binaryin.ReadDouble, s)
                                'DataArray(k - 1, 36) = VB6.Format(binaryin.ReadDouble * 1000000, s)
                                'DataArray(k - 1, 37) = VB6.Format(binaryin.ReadDouble * 1000000, 
                                DataArray(k - 1, 36) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 37) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 38) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 39) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 40) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 41) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 42) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 43) = VB6.Format(binaryin.ReadDouble, s)

                                'If CSng(ver) > CSng("2014.13") Then
                                DataArray(k - 1, 53) = VB6.Format(binaryin.ReadDouble, s)
                                'End If

                                If room = ifireroom Then
                                    'If CSng(ver) > CSng("2012.51") Then
                                    '    DataArray(k - 1, 50) = VB6.Format(binaryin.ReadDouble, s)
                                    'End If

                                    DataArray(k - 1, 44) = VB6.Format(binaryin.ReadDouble - 273, s)
                                    DataArray(k - 1, 45) = VB6.Format(binaryin.ReadDouble - 273, s)

                                    DataArray(k - 1, 50) = VB6.Format(binaryin.ReadDouble, s)

                                    DataArray(k - 1, 46) = VB6.Format(binaryin.ReadDouble, s)
                                    DataArray(k - 1, 47) = VB6.Format(binaryin.ReadDouble, s)
                                    DataArray(k - 1, 48) = VB6.Format(binaryin.ReadDouble, s)
                                    DataArray(k - 1, 49) = VB6.Format(binaryin.ReadDouble - 273, s)

                                End If

                                DataArray(k - 1, 51) = VB6.Format(binaryin.ReadDouble, s)

                            Else
                                'discard data
                                'For m = 0 To 2
                                For m = 0 To 43
                                    binaryin.ReadDouble()
                                Next
                                'If CSng(ver) > CSng("2013.16") Then
                                '    binaryin.ReadDouble()
                                'End If
                                'For m = 1 To 43
                                '    binaryin.ReadDouble()
                                'Next
                                'If CSng(ver) > CSng("2014.13") Then
                                '    binaryin.ReadDouble()
                                'End If

                                If room = ifireroom Then
                                    'If CSng(ver) > 2012.51 Then
                                    '    binaryin.ReadDouble()
                                    'End If
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                    binaryin.ReadDouble()
                                End If

                                Dim dummy As Double = binaryin.ReadDouble()

                            End If

                            k = k + 1

                        Next
                        If room = thisroom Then Exit For
                    Next

                    rowcount = k

                End If

                If count >= startit And count <= endit Then

                    'Transfer the array to the worksheet starting at cell A1
                    oSheet.Range("A1").Resize(rowcount, 54).Value = DataArray
                    DataArray.Initialize()

                    If count < endit Then
                        oBook.Worksheets.add()
                        oSheet = oBook.ActiveSheet
                        oSheet.Name = CStr(count + 1)
                    End If

                End If

                'If count < NumberIterations Then

            Next count

            binaryin.Close()


            'Save the Workbook and Quit Excel
            'If  SaveBox.FileName
            oBook.SaveAs(SaveBox.FileName)
            oExcel.Quit()

            If Err.Number = 1004 Then
                MsgBox(SaveBox.FileName & " is already Open. Please close and then try again.", MsgBoxStyle.OkOnly)
                Err.Clear()
            Else
                MsgBox("Data saved in " & SaveBox.FileName, MsgBoxStyle.Information + MsgBoxStyle.OkOnly)
            End If
            Me.ToolStripStatusLabel1.Text = ""
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Arrow

            'release the objects
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

            Exit Sub

excelerrorhandler:
            'close excel
            ' On Error Resume Next
            oBook.Close()
            oExcel.Application.Quit()

            'release the objects
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

more:
            If Err.Number <> 32755 Then MsgBox(ErrorToString(Err.Number))
            'User pressed Cancel button
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Arrow
            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frmInputs.vb ExportFromDumpFileToolMenuItem_Click")
            Me.ToolStripStatusLabel1.Text = ""
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Arrow
        End Try

    End Sub
    Public Enum DataType As Byte
        [Byte]
        Int16
        Int32
        Int64
        [Single]
        [Double]
        [Decimal]
        [String]
        [Char]
        [Boolean]
    End Enum
    Public Function myFileInUse(ByVal sFile As String) As Boolean
        Dim thisFileInUse As Boolean = False
        If System.IO.File.Exists(sFile) Then
            Try
                Using f As New IO.FileStream(sFile, FileMode.Open, FileAccess.ReadWrite, FileShare.None)
                    ' thisFileInUse = False 
                End Using
            Catch
                thisFileInUse = True


            End Try
        End If
        Return thisFileInUse
    End Function
    Private Sub cmdDist_exteriortemp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Dim param As String = "Exterior Temperature"

        Call ShowDistributionForm(param)

    End Sub

    Private Sub cmdDist_interiortemp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Dim param As String = "Interior Temperature"

        Call ShowDistributionForm(param)

    End Sub


    Private Sub cmdDist_RH_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Dim param As String = "Relative Humidity"

        Call ShowDistributionForm(param)

    End Sub


    Private Sub cmdDist_FLED_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Dim param As String = "Fire Load Energy Density"

        Call ShowDistributionForm(param)

    End Sub

    Private Sub cmdDist_HOC_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)

        Dim param As String = "Heat of Combustion PFO"

        Call ShowDistributionForm(param)
    End Sub

    Private Sub graph_CDF(ByVal param, ByVal xtitle, ByVal mc_data)
        '*  ==========================================================
        '*  Show a graph showing the cdf
        '*  ==========================================================

        Dim MaxYValue, temp As Double
        Dim k As Integer
        Dim j As Integer
        Dim i, index As Integer
        Dim Title As String = ""

        Dim ks As OneSampleKSTest
        Dim alpha1 As Double = 0.01

        Dim id As Integer
        oDistributions = DistributionClass.GetDistributions()
        For Each oDistribution In oDistributions
            If oDistribution.varname = param Then
                id = oDistribution.id - 1
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Dim distname As String = oDistributions(id).distribution
        Dim variance As Double = CDbl(oDistributions(id).variance)
        Dim mean As Double = CDbl(oDistributions(id).mean)
        Dim ubound As Double = CDbl(oDistributions(id).ubound)
        Dim lbound As Double = CDbl(oDistributions(id).lbound)
        Dim mode As Double = CDbl(oDistributions(id).mode)
        If mode < lbound Or mode > ubound Then
            mode = (lbound + ubound) / 2
            oDistributions(id).mode = mode
        End If
        Dim alpha As Double = CDbl(oDistributions(id).alpha)
        Dim beta As Double = CDbl(oDistributions(id).beta)

        If variance <= 0 Then variance = 1 'make non-zero to avoid errors

        If distname = "None" Then
            MsgBox("No data distribution")
            Exit Sub
        End If

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False

            NumericUpDownRoom.Visible = False
            Label19.Visible = False

            IterationUpDown.Hide()
            Label40.Hide()

            'xtitle = " Preflashover Soot Yield (g/g)"
            counter = 1
            room = 1
            'DataShift = -273
            'DataMultiplier = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"

            'from theoretical CDF()
            Dim dist11 As New CenterSpace.NMath.Stats.NormalDistribution(CDbl(mean), variance)
            Dim dist12 As New CenterSpace.NMath.Stats.UniformDistribution(CDbl(lbound), CDbl(ubound))
            Dim dist13 As New CenterSpace.NMath.Stats.TriangularDistribution(CDbl(lbound), CDbl(ubound), CDbl(mode))
            Dim dist14 As New CenterSpace.NMath.Stats.LognormalDistribution(CDbl(mean), variance)

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_data(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f2}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            'need a 2-d array containing the variable value, and the percentile it represents
            For i = 0 To NumberRooms - 1

                For j = 0 To counter - 1

                    For index = 0 To 100

                        If room - 1 = i And j = counter - 1 Then

                            Select Case distname
                                Case "Normal"
                                    temp = dist11.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Log Normal"
                                    temp = dist14.InverseCDF(index / 100) '%
                                    If index > 0 And index < 100 Then Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Uniform"
                                    temp = dist12.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                                Case "Triangular"
                                    temp = dist13.InverseCDF(index / 100)
                                    Chart2.Series("theory").Points.AddXY(temp, index / 100)
                            End Select
                        End If
                    Next index

                Next j
            Next i

            Select Case distname
                Case "Normal"
                    ks = New OneSampleKSTest(tempdatain, dist11)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Log Normal"
                    ks = New OneSampleKSTest(tempdatain, dist14)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Uniform"
                    ks = New OneSampleKSTest(tempdatain, dist12)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
                Case "Triangular"
                    ks = New OneSampleKSTest(tempdatain, dist13)
                    ks.Alpha = alpha1
                    Chart2.Titles("Title3").Text = "Kolmogorov-Smirnov Test: statistic = " & ks.Statistic
            End Select


            Chart2.Series("theory").LegendText = distname

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in graph_CDF")
        End Try
    End Sub

    Private Sub graph_histogram(ByVal param, ByVal xtitle, ByVal mc_data)

        Dim distname As String = ""
        Dim odistributions As List(Of oDistribution)
        odistributions = DistributionClass.GetDistributions()
        If odistributions.Count = 0 Then
            Exit Sub
        End If

        For Each odistribution In odistributions
            If odistribution.varname = param Then
                distname = odistribution.distribution
                If distname = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
            End If
        Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        Try

            length = mc_data.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_data, tempdatain, length)

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations " & distname & " distribution"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_data(index))
            Next index

            Call show_histogram_input()

            Chart1.Show()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in graph_histogram")
        End Try
    End Sub


    Private Sub ToolStripMenuItem22_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripMenuItem22.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for preflashover co yield
        '*  ==========================================================

        Dim param As String = "CO Preflashover Yield"
        Dim xtitle As String = "CO Preflashover Yield (g/g)"

        Call graph_histogram(param, xtitle, mc_preCO)
    End Sub

    Private Sub ReliabilityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReliabilityToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for sprinkler reliability
        '*  ==========================================================

        Dim param As String = "Sprinkler Reliability"
        Dim xtitle As String = "Sprinkler Reliability (-)"

        Call graph_histogram(param, xtitle, mc_SprReliability)

    End Sub

    Private Sub ReliabilityToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReliabilityToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for sprinkler reliability
        '*  ==========================================================

        Dim param As String = "Sprinkler Reliability"
        Dim xtitle As String = "Sprinkler Reliability (-)"

        Call graph_CDF(param, xtitle, mc_SprReliability)

    End Sub

    Private Sub SuppressionProbabilityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SuppressionProbabilityToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for Sprinkler Suppression Probability
        '*  ==========================================================

        Dim param As String = "Sprinkler Suppression Probability"
        Dim xtitle As String = "Sprinkler Suppression Probability (g/g)"

        Call graph_CDF(param, xtitle, mc_SprSuppressProb)

    End Sub

    Private Sub SuppressionProbabilityToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SuppressionProbabilityToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for Sprinkler Suppression Probability
        '*  ==========================================================

        Dim param As String = "Sprinkler Suppression Probability"
        Dim xtitle As String = "Sprinkler Suppression Probability (g/g)"

        Call graph_histogram(param, xtitle, mc_SprSuppressProb)

    End Sub


    Private Sub SaveLogTortfFileToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SaveLogTortfFileToolStripMenuItem.Click
        Try
            If basefile = "" Then Exit Sub

            Dim tmp As String
            tmp = basefile.Replace(".xml", "_log.rtf")
            'If My.Computer.FileSystem.FileExists(tmp) Then
            rtb_log.SaveFile(tmp)
            'End If



        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in  SaveLogTortfFileToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub ExportOutputToCSVToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ExportOutputToCSVToolStripMenuItem.Click

        Dim s As String
        Dim room As Integer
        Dim k, j, count As Integer
        Dim dummystring As String
        Dim dummyint As Integer, ifireroom As Integer, inumberrooms As Integer
        Dim inumbertimesteps As Integer, inumbersprinklers As Integer
        Dim SaveBox As New SaveFileDialog()

        'dialogbox title
        SaveBox.Title = "Export Data to CSV File"

        'Set filters
        SaveBox.Filter = "All Files (*.*)|*.*|csv Files (*.csv)|*.csv"

        'Specify default filter
        SaveBox.FilterIndex = 2
        SaveBox.RestoreDirectory = True

        'default filename extension
        SaveBox.DefaultExt = "csv"

        'default filename
        If ProjectDirectory = "" Then ProjectDirectory = RiskDataDirectory
        SaveBox.InitialDirectory = ProjectDirectory

        'default filename
        Dim getname As String = ProjectDirectory & "output_dump_" & Convert.ToString(txtBaseName.Text)
        If Len(getname) > 4 Then
        Else
            getname = ProjectDirectory & "dump.csv"
        End If
        SaveBox.FileName = Mid(getname, 1, Len(getname)) & ".csv"

        Dim Txt As String

        'Dim myStream As Stream

        Dim nrow As Integer = Timestep

        Dim binfile As String = RiskDataDirectory & "dumpdata.dat"
        Dim binaryin As New BinaryReader(New FileStream(binfile, FileMode.Open, FileAccess.Read))

        'Create an array
        Dim DataArray(0 To NumberTimeSteps + 2, 0 To 49) As Object

        s = "0.000E+00"

        'If (myStream IsNot Nothing) Then
        DataArray(0, 0) = "Time (sec)"
        DataArray(0, 1) = "Layer (m)"
        DataArray(0, 2) = "Upper Layer Temp (C)"
        DataArray(0, 3) = "HRR (kW)"
        DataArray(0, 4) = "Mass (kg/s)"
        DataArray(0, 5) = "Plume (kg/s)"
        DataArray(0, 6) = "Vent Fire (kW)"
        DataArray(0, 7) = "CO2 Upper(%)"
        DataArray(0, 8) = "CO Upper (ppm)"
        DataArray(0, 9) = "O2 Upper (%)"
        DataArray(0, 10) = "CO2 Lower(%)"
        DataArray(0, 11) = "CO Lower(ppm)"
        DataArray(0, 12) = "O2 Lower (%)"
        DataArray(0, 13) = "FED gases(inc)"
        DataArray(0, 14) = "Upper Wall Temp (C)"
        DataArray(0, 15) = "Ceiling Temp (C)"
        DataArray(0, 16) = "Rad on Floor (kW/m2)"
        DataArray(0, 17) = "Lower Layer Temp (C)"
        DataArray(0, 18) = "Lower Wall Temp (C)"
        DataArray(0, 19) = "Floor Temp (C)"
        DataArray(0, 20) = "Y Pyrolysis Front (m)"
        DataArray(0, 21) = "X Pyrolysis Front (m)"
        DataArray(0, 22) = "Z Pyrolysis Front (m)"
        DataArray(0, 23) = "Upward Velocity (m/s)"
        DataArray(0, 24) = "Lateral Velocity (m/s)"
        DataArray(0, 25) = "Pressure (Pa)"
        DataArray(0, 26) = "Visibility (m)"
        DataArray(0, 27) = "Vent Flow to Upper Layer (kg/s)"
        DataArray(0, 28) = "Vent Flow to Lower Layer (kg/s)"
        DataArray(0, 29) = "Rad on Target (kW/m2)"
        DataArray(0, 30) = "FED thermal(inc)"
        DataArray(0, 31) = "OD upper (1/m)"
        DataArray(0, 32) = "OD lower (1/m)"
        DataArray(0, 33) = "Vent Flow to Outside (m3/s)"
        DataArray(0, 34) = "HCN Upper (ppm)"
        DataArray(0, 35) = "HCN Lower (ppm)"
        DataArray(0, 36) = "SPR (m2/kg)"
        DataArray(0, 37) = "Unexposed Upper Wall Temp (C)"
        DataArray(0, 38) = "Unexposed Lower Wall Temp (C)"
        DataArray(0, 39) = "Unexposed Ceiling Temp (C)"
        DataArray(0, 40) = "Unexposed Floor Temp (C)"
        DataArray(0, 41) = "Upper Layer Emissivity (-)"
        DataArray(0, 42) = "Ceiling Jet Temp(C)"
        DataArray(0, 43) = "Max Ceil Jet Temp(C)"
        DataArray(0, 44) = "GER"
        DataArray(0, 45) = "Smoke Detect OD-out (1/m)"
        DataArray(0, 46) = "Smoke Detect OD-in (1/m)"
        DataArray(0, 47) = "Link Temp (C)"


        Dim rowcount As Short

        'Display the Save as dialog box.
        If SaveBox.ShowDialog() = DialogResult.OK Then
            If SaveBox.CheckFileExists = False Then
                'create the file
                My.Computer.FileSystem.WriteAllText(SaveBox.FileName, "", True)
            End If
            'myStream = SaveBox.OpenFile()

            DataFile = SaveBox.FileName

            FileOpen(1, DataFile, OpenMode.Output)


            For count = 1 To IterationsCompleted

                dummystring = binaryin.ReadString
                dummyint = binaryin.ReadInt32
                inumbersprinklers = binaryin.ReadInt32
                inumbertimesteps = binaryin.ReadInt32
                inumberrooms = binaryin.ReadInt32
                ifireroom = binaryin.ReadInt32

                If inumbertimesteps > 0 Then

                    k = 2 'row
                    For j = 1 To inumbertimesteps + 1
                        If k > DataArray.GetLength(0) Then Exit For
                        For room = 1 To NumberRooms
                            DataArray(k - 1, 0) = VB6.Format(binaryin.ReadDouble, "general number")
                            Dim t = DataArray(k - 1, 0)
                            DataArray(k - 1, 1) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 2) = VB6.Format(binaryin.ReadDouble - 273, s)

                            'DataArray(k - 1, 3) = VB6.Format(binaryin.ReadDouble, s)

                            DataArray(k - 1, 3) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 4) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 5) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 6) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 7) = VB6.Format(binaryin.ReadDouble * 100, s)
                            DataArray(k - 1, 8) = VB6.Format(binaryin.ReadDouble * 1000000, s)
                            DataArray(k - 1, 9) = VB6.Format(binaryin.ReadDouble * 100, s)
                            DataArray(k - 1, 10) = VB6.Format(binaryin.ReadDouble * 100, s)
                            DataArray(k - 1, 11) = VB6.Format(binaryin.ReadDouble * 1000000, s)
                            DataArray(k - 1, 12) = VB6.Format(binaryin.ReadDouble * 100, s)
                            DataArray(k - 1, 13) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 14) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 15) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 16) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 17) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 18) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 19) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 20) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 21) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 22) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 23) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 24) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 25) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 26) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 27) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 28) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 29) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 30) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 31) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 32) = VB6.Format(binaryin.ReadDouble, s)
                            'If IsNumeric(DataArray(k - 1, 31)) Then DataArray(k - 1, 33) = VB6.Format(2.3 * CDbl(DataArray(k - 1, 31)), s)
                            'If IsNumeric(DataArray(k - 1, 32)) Then DataArray(k - 1, 34) = VB6.Format(2.3 * CDbl(DataArray(k - 1, 32)), s)
                            DataArray(k - 1, 33) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 34) = VB6.Format(binaryin.ReadDouble * 1000000, s)
                            DataArray(k - 1, 35) = VB6.Format(binaryin.ReadDouble * 1000000, s)
                            DataArray(k - 1, 36) = VB6.Format(binaryin.ReadDouble, s)
                            DataArray(k - 1, 37) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 38) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 39) = VB6.Format(binaryin.ReadDouble - 273, s)
                            DataArray(k - 1, 40) = VB6.Format(binaryin.ReadDouble - 273, s)

                            DataArray(k - 1, 41) = VB6.Format(binaryin.ReadDouble, s)

                            If room = ifireroom Then
                                DataArray(k - 1, 42) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 43) = VB6.Format(binaryin.ReadDouble - 273, s)
                                DataArray(k - 1, 44) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 45) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 46) = VB6.Format(binaryin.ReadDouble, s)
                                DataArray(k - 1, 47) = VB6.Format(binaryin.ReadDouble - 273, s)
                            End If

                            System.Windows.Forms.Application.DoEvents()
                            k = k + 1
                        Next
                    Next j

                    rowcount = k

                End If

                'Transfer the array to the worksheet starting at cell A1
                'oSheet.Range("A1").Resize(rowcount, 50).Value = DataArray


                If count < NumberIterations Then
                    'need to output this iteration to csv file
                    'oBook.Worksheets.add()
                    'oSheet = oBook.ActiveSheet
                    'oSheet.Name = CStr(count + 1)
                    Txt = "iteration " & CStr(count)
                    WriteLine(1, Txt)
                    'define a format string
                    s = "General Number"
                    For room = 1 To NumberRooms
                        Txt = "room " & CStr(room)
                        WriteLine(1, Txt)

                        Txt = "Time (sec)"
                        Txt = Txt & ",Layer (m)"
                        Txt = Txt & ",Upper Layer Temp (K)"
                        Txt = Txt & ",HRR (kW)"
                        Txt = Txt & ",Mass (kg/s)"
                        Txt = Txt & ",Plume (kg/s)"
                        Txt = Txt & ",Vent Fire (kW)"
                        Txt = Txt & ",CO2 Upper(%)"
                        Txt = Txt & ",CO Upper(ppm)"
                        Txt = Txt & ",O2 Upper (%)"
                        Txt = Txt & ",CO2 Lower(%)"
                        Txt = Txt & ",CO Lower(ppm)"
                        Txt = Txt & ",O2 Lower (%)"
                        Txt = Txt & ",FED gases(inc)"
                        Txt = Txt & ",Upper Wall Temp (K)"
                        Txt = Txt & ",Ceiling Temp (K)"
                        Txt = Txt & ",Rad on Floor (kW/m2)"
                        Txt = Txt & ",Lower Layer Temp (K)"
                        Txt = Txt & ",Lower Wall Temp (K)"
                        Txt = Txt & ",Floor Temp (K)"
                        Txt = Txt & ",Y Pyrolysis Front (m)"
                        Txt = Txt & ",X Pyrolysis Front (m)"
                        Txt = Txt & ",Z Pyrolysis Front (m)"
                        Txt = Txt & ",Upward Velocity (m/s)"
                        Txt = Txt & ",Lateral Velocity (m/s)"
                        Txt = Txt & ",Pressure (Pa)"
                        Txt = Txt & ",Visibility (m)"
                        Txt = Txt & ",Vent Flow to Upper Layer (kg/s)"
                        Txt = Txt & ",Vent Flow to Lower Layer (kg/s)"
                        Txt = Txt & ",Rad on Target (kW/m2)"
                        Txt = Txt & ",FED thermal(inc)"
                        Txt = Txt & ",OD upper (1/m)"
                        Txt = Txt & ",OD lower (1/m)"
                        Txt = Txt & ",Vent Flow to Outside (m3/s)"
                        Txt = Txt & ",HCN Upper (ppm)"
                        Txt = Txt & ",HCN Lower (ppm)"
                        Txt = Txt & ",SPR (m2/kg)"
                        Txt = Txt & ",Unexposed Upper Wall Temp (C)"
                        Txt = Txt & ",Unexposed Lower Wall Temp (C)"
                        Txt = Txt & ",Unexposed Ceiling Temp (C)"
                        Txt = Txt & ",Unexposed Floor Temp (C)"
                        Txt = Txt & ",Upper Layer Emissivity (-)"

                        If room = fireroom Then
                            Txt = Txt & ",Ceiling Jet Temp at Link (C)"
                            Txt = Txt & ",Ceiling Jet Temp Max (C)"
                            Txt = Txt & ",Global Equivalence Ratio"
                            Txt = Txt & ",Optical Density outside detector (1/m)"
                            Txt = Txt & ",Optical Density inside detector (1/m)"
                            Txt = Txt & ",Thermal Link Temp (C)"
                        End If

                        WriteLine(1, Txt)

                        If NumberTimeSteps > 0 Then
                            For j = 1 To NumberTimeSteps
                                If IsNumeric(DataArray(j, 0)) Then
                                    If Int(DataArray(j, 0) / ExcelInterval) - DataArray(j, 0) / ExcelInterval = 0 Then
                                        'If IsNumeric(DataArray(j, 7)) Then DataArray(j, 7) = DataArray(j, 7) * 100
                                        'If IsNumeric(DataArray(j, 9)) Then DataArray(j, 9) = DataArray(j, 9) * 100
                                        'If IsNumeric(DataArray(j, 10)) Then DataArray(j, 10) = DataArray(j, 10) * 100
                                        'If IsNumeric(DataArray(j, 11)) Then DataArray(j, 11) = DataArray(j, 11) * 100
                                        'If IsNumeric(DataArray(j, 12)) Then DataArray(j, 12) = DataArray(j, 12) * 100
                                        'If IsNumeric(DataArray(j, 18)) Then DataArray(j, 18) = DataArray(j, 18) - 273
                                        'If IsNumeric(DataArray(j, 19)) Then DataArray(j, 19) = DataArray(j, 19) - 273
                                        'If IsNumeric(DataArray(j, 14)) Then DataArray(j, 14) = DataArray(j, 14) - 273
                                        'If IsNumeric(DataArray(j, 15)) Then DataArray(j, 15) = DataArray(j, 15) - 273



                                        Txt = VB6.Format(DataArray(j, 0), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 1), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 2), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 3), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 4), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 5), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 6), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 7), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 8), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 9), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 10), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 11), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 12), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 13), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 14), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 15), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 16), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 17), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 18), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 19), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 20), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 21), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 22), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 23), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 24), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 25), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 26), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 27), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 28), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 29), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 30), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 31), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 32), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 33), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 34), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 35), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 36), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 37), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 38), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 39), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 40), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 41), s) & ","
                                        Txt = Txt & VB6.Format(DataArray(j, 42), s) & ","
                                        If room = fireroom Then
                                            Txt = Txt & VB6.Format(DataArray(j, 43), s) & ","
                                            Txt = Txt & VB6.Format(DataArray(j, 44), s) & ","
                                            Txt = Txt & VB6.Format(DataArray(j, 45), s) & ","
                                            Txt = Txt & VB6.Format(DataArray(j, 46), s) & ","
                                            Txt = Txt & VB6.Format(DataArray(j, 47), s) & ","
                                            Txt = Txt & VB6.Format(DataArray(j, 48), s) & ","
                                            Txt = Txt & VB6.Format(DataArray(j, 49), s)
                                        End If


                                        'Txt = VB6.Format(DataArray(j, 0), s) & "," & VB6.Format(DataArray(j, 1), s) & "," & VB6.Format(DataArray(j, 2), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 3), s) & "," & VB6.Format(DataArray(j, 4), s) & "," & VB6.Format(DataArray(j, 5), s)
                                        'Txt = Txt & "," & DataArray(j, 6).ToString & "," & DataArray(j, 7).ToString & "," & VB6.Format(DataArray(j, 8), s) & "," & VB6.Format(DataArray(j, 9), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 9), s) & "," & VB6.Format(DataArray(j, 10), s) & "," & VB6.Format(DataArray(j, 11), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 12), s) & "," & VB6.Format(DataArray(j, 13), s) & "," & VB6.Format(DataArray(j, 14), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 15), s) & "," & VB6.Format(DataArray(j, 16), s) & "," & VB6.Format(DataArray(j, 17), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 18), s) & "," & VB6.Format(DataArray(j, 19), s)
                                        'If room = fireroom Then
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 20), s) & "," & VB6.Format(DataArray(j, 21), s) & "," & VB6.Format(DataArray(j, 22), s)
                                        'Else
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 23), s) & "," & VB6.Format(0, s) & "," & VB6.Format(0, s)
                                        'End If
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 24), s) & "," & VB6.Format(DataArray(j, 25), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 26), s) & "," & VB6.Format(DataArray(j, 27), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 28), s) & "," & VB6.Format(DataArray(j, 29), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 30), s) & "," & VB6.Format(DataArray(j, 31), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 32), s) & "," & VB6.Format(DataArray(j, 33), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 34), s) & "," & VB6.Format(DataArray(j, 35), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 36), s) & "," & VB6.Format(DataArray(j, 37), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 38), s) & "," & VB6.Format(DataArray(j, 39), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 40), s) & "," & VB6.Format(DataArray(j, 41), s)
                                        'Txt = Txt & "," & VB6.Format(DataArray(j, 42), s) & "," & VB6.Format(DataArray(j, 43), s)

                                        'If room = ifireroom Then
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 44), s)
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 45), s)
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 46), s)
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 47), s)
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 48), s)
                                        '    Txt = Txt & "," & VB6.Format(DataArray(j, 49), s)
                                        'End If

                                        WriteLine(1, Txt)
                                        Txt = ""

                                    End If
                                End If
                            Next j
                        End If
                    Next room

                    ' the outside
                    'Txt = "outside "
                    'Txt = Txt & " Time (sec), Vent Fire (kW)"
                    'WriteLine(1, Txt)
                    'If NumberTimeSteps > 0 Then
                    '    For j = 1 To NumberTimeSteps
                    '        If Int(DataArray(j, 0) / ExcelInterval) - DataArray(j, 0) / ExcelInterval = 0 Then
                    '            Txt = VB6.Format(DataArray(j, 0), s)
                    '            Txt = Txt & "," & VB6.Format(DataArray(j, 34), s)
                    '            WriteLine(1, Txt)
                    '        End If
                    '    Next j
                    'End If


                End If
            Next count

            binaryin.Close()

            '-------------------------------------------
            FileClose(1)

            'myStream.Close()

            'put stuff here to save from below 

        Else
            'myStream.Close()
        End If
        'End If

        MsgBox("Data saved in " & SaveBox.FileName, MsgBoxStyle.Information + MsgBoxStyle.OkOnly)
        Exit Sub

    End Sub

    Private Sub SprinklerCoolingCoefficientToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SprinklerCoolingCoefficientToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for Sprinkler Cooling Coefficient
        '*  ==========================================================

        Dim param As String = "Sprinkler Cooling Coefficient"
        Dim xtitle As String = "Sprinkler Cooling Coefficient (-)"

        Call graph_histogram(param, xtitle, mc_SprCooling)

    End Sub

    Private Sub SprinklerCoolingCoefficientToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SprinklerCoolingCoefficientToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for Sprinkler Cooling Coefficient
        '*  ==========================================================

        Dim param As String = "Sprinkler Cooling Coefficient"
        Dim xtitle As String = "Sprinkler Cooling Coefficient (-)"

        Call graph_CDF(param, xtitle, mc_SprCooling)
    End Sub

    Private Sub FLEDactualToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FLEDactualToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for actual FLED
        '*  ==========================================================

        If mc_FLED_actual Is Nothing Then
            MsgBox("No data")
            Exit Sub
        End If

        'Dim id As Integer
        'Dim distname As String
        'oDistributions = DistributionClass.GetDistributions()
        'For Each oDistribution In oDistributions
        '    If oDistribution.varname = "Fire Load Energy Density" Then
        '        id = oDistribution.id
        '        distname = oDistribution.distribution
        '        If oDistribution.distribution = "None" Then
        '            MsgBox("No data distribution")
        '            Exit Sub
        '        End If
        '        Exit For
        '    End If
        'Next

        Dim Title As String
        Dim length As Integer
        Dim index As Integer

        Try

            length = mc_FLED_actual.GetLength(0)
            ReDim tempdatain(0 To length - 1)
            Array.Copy(mc_FLED_actual, tempdatain, length)

            xtitle = "Actual Fire Load Energy Density (MJ/m2)"

            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_FLED_actual(index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FLEDactualToolStripMenuItem")
        End Try
    End Sub

    Private Sub ActualFLEDToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ActualFLEDToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for actual fled
        '*  ==========================================================
        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""

        Dim alpha1 As Double = 0.01

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Hide()
            Label40.Hide()

            xtitle = " Actual FLED (MJ/m2)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.Series.Add("theory")
            Chart2.Series("theory").Points.Clear()
            Chart2.Series("theory").ChartType = SeriesChartType.FastLine

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_FLED_actual(k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90



        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in ActualFLEDToolStripMenuItem_Click")
        End Try
    End Sub


    Private Sub LatentHeatOfGasificationToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LatentHeatOfGasificationToolStripMenuItem.Click
        ''*  ==========================================================
        ''*  Show a graph showing the sample distribution for latent heat of gasification
        ''*  ==========================================================

        'Dim param As String = "Fuel Heat of Gasification"
        'Dim xtitle As String = "Fuel Heat of Gasification (kJ/g)"

        'Call graph_histogram(param, xtitle, mc_LHOG)
    End Sub

    Private Sub FuelHeatOfCombustionToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FuelHeatOfCombustionToolStripMenuItem.Click
        ''*  ==========================================================
        ''*  Show a graph showing the cdf for fuel heat of gasification
        ''*  ==========================================================

        'Dim param As String = "Fuel Heat of Gasification"
        'Dim xtitle As String = "Fuel Heat of Gasification (kJ/g)"

        'Call graph_CDF(param, xtitle, mc_LHOG)
    End Sub

    Private Sub FLEDActualToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FLEDActualToolStripMenuItem1.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        ToolStrip1.Visible = False
        PageToolStripMenuItem.Visible = True
        PrintPreviewToolStripMenuItem.Visible = True
        PrintToolStripMenuItem.Visible = True
        Panel1.BringToFront()

        Chart3.Series.Clear()

        Chart3.ChartAreas("ChartArea1").AxisY.Title = "FLED (Actual) MJ/m2"
        Call ExportDataToExcelToolStripMenuItem.PerformClick()
    End Sub

    Private Sub DesignFireHRRToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)


        Dim k As Integer
        Dim j As Integer
        Dim i As Integer

        Try
            counter = 1

            If IsNumeric(OutputInterval) And OutputInterval > 0 Then
                counter = Math.Ceiling((SimTime / OutputInterval))
            End If

            Dim room_id As Integer = 1
            Dim percentile(0 To 100, 0 To counter) As Integer
            For j = 0 To counter
                For k = 0 To IterationsCompleted - 1
                    tempdatain(k) = mc_HRR(room_id, j, k)
                Next k
                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                For i = 0 To 100
                    percentile(i, j) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                Next
            Next j

            '
            ' time-series plot for hrr - output
            '
            Dim DataShift As Double
            Dim DataMultiplier As Double
            'Dim k As Integer
            'Dim j As Integer
            Dim room As Integer
            Dim GraphStyle As Integer
            Dim Title As String = ""
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            'if no data exists
            If NumberTimeSteps < 1 Then
                MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
                Exit Sub
            End If

            PercentileUpDown.Minimum = 0
            PercentileUpDown.Value = 50
            PercentileUpDown.Maximum = 100
            PercentileUpDown.Show()
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            ToolStrip1.Visible = False
            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True
            Panel1.BringToFront()
            xtitle = " Time (sec)"
            'counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined

            Title = "Time-series Plot: Upper " & PercentileUpDown.Value & "th Percentile"
            Chart3.Titles("Title1").Text = Title

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = "Heat Release Rate (kW)"
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False


            'max number of time periods for which the data is available
            'If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))
            IterationUpDown.Visible = False
            NumericUpDown1.Visible = False
            PercentileUpDown.Visible = True
            Label2.Visible = True
            Label4.Visible = False
            Label5.Visible = False
            Label18.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()

            'Label40.Show()
            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double

            Chart3.Series.Clear()
            room = 1

            For k = 1 To 1

                Chart3.Series.Add(CStr(k))
                Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

                For j = 0 To counter
                    'ydata(j) = mc_HRR(1, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                    ydata(j) = percentile(PercentileUpDown.Value, j) 'xth percentile
                    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
                Next

            Next k

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in HeatReleaseRateToolStripMenuItem1_Click")
        End Try

    End Sub

    Private Sub PercentileUpDown_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles PercentileUpDown.ValueChanged
        If Chart3.Visible Then Call Update_timeseries_percentile(1, 0)
    End Sub
    Private Sub include_percentiletimeseries(ByVal ytitle As String, ByVal percentile(,) As Double)

        Dim title As String
        NumericUpDown_Bins.Hide()
        Label45.Hide()
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        Chart3.Visible = True 'time-series plots
        ToolStrip1.Visible = False
        PageToolStripMenuItem.Visible = True
        PrintPreviewToolStripMenuItem.Visible = True
        PrintToolStripMenuItem.Visible = True
        Panel1.BringToFront()
        IterationUpDown.Visible = False
        NumericUpDown1.Visible = False
        PercentileUpDown.Visible = True
        Label2.Visible = True
        Label4.Visible = False
        Label5.Visible = False
        Label18.Visible = False
        Label19.Visible = True
        NumericUpDownRoom.Minimum = 1
        NumericUpDownRoom.Maximum = NumberRooms
        NumericUpDownRoom.Increment = 1
        NumericUpDownRoom.Value = 1
        NumericUpDownRoom.Show()

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        xtitle = " Time (sec)"

        PercentileUpDown.Minimum = 0
        PercentileUpDown.Value = 50
        PercentileUpDown.Maximum = 100
        PercentileUpDown.Show()

        title = "Time-series Plot: Upper " & PercentileUpDown.Value & "th Percentile"
        Chart3.Titles("Title1").Text = title

        Chart3.Legends("Legend1").Enabled = False
        Chart3.Dock = DockStyle.Fill
        Chart3.ChartAreas("ChartArea1").BorderWidth = 1
        Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
        Chart3.ChartAreas("ChartArea1").AxisY.Title = ytitle
        Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0.0"
        Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
        Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
        Chart3.ChartAreas("ChartArea1").AxisX.Title = "Time (sec)"
        Chart3.ChartAreas("ChartArea1").AxisY.Title = ytitle
        Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False

        '*  ====================================================================
        '*  takes data for a variable from a two-dimensional array
        '*  and displays it in a graph
        '*  ====================================================================

        Dim ydata(0 To counter + 1) As Double

        Chart3.Series.Clear()
        room = 1

        For k = 1 To 1

            Chart3.Series.Add(CStr(k))
            Chart3.Series(CStr(k)).ChartType = SeriesChartType.FastLine

            For j = 0 To counter
                ydata(j) = percentile(PercentileUpDown.Value, j) 'xth percentile
                Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval, ydata(j))
            Next

        Next k

    End Sub

    Private Sub RateOfHeatReleaseToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RateOfHeatReleaseToolStripMenuItem1.Click
        'graph a time series that represents the specified upper percentile curve

        Dim yTitle As String = "Heat Release Rate (kW)"

        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim room As Integer
        Dim GraphStyle As Integer

        Try
            'if no data exists
            If NumberTimeSteps < 1 Then
                MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
                Exit Sub
            End If

            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            counter = 1

            If IsNumeric(OutputInterval) And OutputInterval > 0 Then
                counter = Math.Ceiling((SimTime / OutputInterval))
            End If

            Dim room_id As Integer = 1
            Dim percentile(0 To 100, 0 To counter) As Double
            For j = 0 To counter
                For k = 0 To IterationsCompleted - 1
                    tempdatain(k) = mc_HRR(room_id, j, k)
                Next k
                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                For i = 0 To 100
                    percentile(i, j) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                Next
            Next j

            include_percentiletimeseries(yTitle, percentile)

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RateofHeatReleaseToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub UpperLayerTemperatureToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UpperLayerTemperatureToolStripMenuItem1.Click
        'graph a time series that represents the specified upper percentile curve

        Dim yTitle As String = "Upper Layer Temperature (C)"

        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim room As Integer
        Dim GraphStyle As Integer

        Try
            'if no data exists
            If NumberTimeSteps < 1 Then
                MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
                Exit Sub
            End If

            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            counter = 1

            If IsNumeric(OutputInterval) And OutputInterval > 0 Then
                counter = Math.Ceiling((SimTime / OutputInterval))
            End If

            Dim room_id As Integer = 1
            Dim percentile(0 To 100, 0 To counter) As Double
            For j = 0 To counter
                For k = 0 To IterationsCompleted - 1
                    tempdatain(k) = mc_ULTemp(room_id, j, k)
                Next k
                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                For i = 0 To 100
                    percentile(i, j) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                Next
            Next j

            include_percentiletimeseries(yTitle, percentile)

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in UpperLayerTemperatureToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub LowerLayerTemperatureToolStripMenuItem1_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LowerLayerTemperatureToolStripMenuItem1.Click
        'graph a time series that represents the specified upper percentile curve

        Dim yTitle As String = "Lower Layer Temperature (C)"

        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim room As Integer
        Dim GraphStyle As Integer

        Try
            'if no data exists
            If NumberTimeSteps < 1 Then
                MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
                Exit Sub
            End If
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            counter = 1

            If IsNumeric(OutputInterval) And OutputInterval > 0 Then
                counter = Math.Ceiling((SimTime / OutputInterval))
            End If

            Dim room_id As Integer = 1
            Dim percentile(0 To 100, 0 To counter) As Double
            For j = 0 To counter
                For k = 0 To IterationsCompleted - 1
                    tempdatain(k) = mc_LLTemp(room_id, j, k)
                Next k
                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                For i = 0 To 100
                    percentile(i, j) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                Next
            Next j

            include_percentiletimeseries(yTitle, percentile)

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LowerLayerTemperatureToolStripMenuItem1_Click_1")
        End Try
    End Sub

    Private Sub FEDGasesToolStripMenuItem1_Click_1(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FEDGasesToolStripMenuItem1.Click
        'graph a time series that represents the specified upper percentile curve

        Dim yTitle As String = "FED gases (-)"

        Dim k As Integer
        Dim j As Integer
        Dim i As Integer
        Dim DataShift As Double
        Dim DataMultiplier As Double
        Dim room As Integer
        Dim GraphStyle As Integer

        Try
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            counter = 1

            If IsNumeric(OutputInterval) And OutputInterval > 0 Then
                counter = Math.Ceiling((SimTime / OutputInterval))
            End If

            Dim room_id As Integer = 1
            Dim percentile(0 To 100, 0 To counter) As Double
            For j = 0 To counter
                For k = 0 To IterationsCompleted - 1
                    tempdatain(k) = mc_FEDgas(room_id, j, k)
                Next k
                tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
                For i = 0 To 100
                    percentile(i, j) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                Next
            Next j

            include_percentiletimeseries(yTitle, percentile)

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FEDGasesToolStripMenuItem1_Click_1")
        End Try
    End Sub


    Private Sub PowerLawDesignFireAlphaToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PowerLawDesignFireAlphaToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the fire alpha T coefficient
        '*  ==========================================================

        Dim param As String = "Fire Growth Alpha Coefficient"
        Dim xtitle As String = "Fire Growth Alpha Coefficient (kW/s2)"

        Call graph_histogram(param, xtitle, mc_AlphaT)
    End Sub

    Private Sub PowerLawDesignFirePeakHRRToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PowerLawDesignFirePeakHRRToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the fire peak hrr for power law design fire
        '*  ==========================================================

        Dim param As String = "Power Law Design Fire - Peak HRR"
        Dim xtitle As String = "Power Law Design Fire - Peak HRR (kW)"

        Call graph_histogram(param, xtitle, mc_PeakHRR)
    End Sub

    Private Sub PowerLawToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PowerLawToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for alpha
        '*  ==========================================================

        'Dim param As String = "Power Law Design Fire - Alpha Coefficient"
        Dim param As String = "Alpha T"
        Dim xtitle As String = "Power Law Design Fire - Alpha Coefficient (kW/s2)"

        Call graph_CDF(param, xtitle, mc_AlphaT)
    End Sub

    Private Sub PowerLawDesignFirePeakHRRToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PowerLawDesignFirePeakHRRToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for peak hrr
        '*  ==========================================================

        Dim param As String = "Peak HRR"
        Dim xtitle As String = "Power Law Design Fire - Peak HRR (kW)"

        Call graph_CDF(param, xtitle, mc_PeakHRR)
    End Sub

    Private Sub FireGrowthCoefficientfittedToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FireGrowthCoefficientfittedToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots
        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        ToolStrip1.Visible = False
        PageToolStripMenuItem.Visible = True
        PrintPreviewToolStripMenuItem.Visible = True
        PrintToolStripMenuItem.Visible = True
        Panel1.BringToFront()

        Chart3.Series.Clear()
        Chart3.ChartAreas("ChartArea1").AxisY.Title = "Fire Growth Alpha Coefficient Fitted (kW/s2)"

        Call ExportDataToExcelToolStripMenuItem.PerformClick()
        Call CloseGraphToolStripMenuItem.PerformClick()
    End Sub

    Private Sub txtSimTime_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtSimTime.LostFocus
        If IsNumeric(txtSimTime.Text) Then
            SimTime = CInt(txtSimTime.Text)
        End If
    End Sub

    Private Sub txtSimTime_Validated(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtSimTime.Validated
        ErrorProvider1.Clear()
        SimTime = CInt(txtSimTime.Text)
    End Sub

    Private Sub txtSimTime_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtSimTime.Validating
        If IsNumeric(txtSimTime.Text) Then
            If (CInt(txtSimTime.Text) > 0) Then
                'okay
                Exit Sub
            End If
        End If

        ' Cancel the event moving off of the control.
        e.Cancel = True

        ' Select the offending text.
        txtSimTime.Select(0, txtSimTime.Text.Length)

        ' Give the ErrorProvider the error message to
        ' display.
        ErrorProvider1.SetError(txtSimTime, "Invalid Entry. Simulation time must be greater than 0 sec.")

    End Sub

    Private Sub txtNumberIterations_Validated(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtNumberIterations.Validated
        ErrorProvider1.Clear()
        NumberIterations = CInt(txtNumberIterations.Text)
    End Sub

    Private Sub txtNumberIterations_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtNumberIterations.Validating
        If IsNumeric(txtNumberIterations.Text) Then
            If (CInt(txtNumberIterations.Text) > 0) Then
                'okay
                Exit Sub
            End If
        End If

        ' Cancel the event moving off of the control.
        e.Cancel = True

        ' Select the offending text.
        txtNumberIterations.Select(0, txtNumberIterations.Text.Length)

        ' Give the ErrorProvider the error message to
        ' display.
        ErrorProvider1.SetError(txtNumberIterations, "Invalid Entry. Number of iterations must be greater than 0.")

    End Sub

    Private Sub txtExcelInterval_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtExcelInterval.LostFocus
        If IsNumeric(txtExcelInterval.Text) Then
            ExcelInterval = CInt(txtExcelInterval.Text)
        End If
    End Sub

    Private Sub txtExcelInterval_Validated(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtExcelInterval.Validated
        ErrorProvider1.Clear()
        ExcelInterval = CInt(txtExcelInterval.Text)
    End Sub

    Private Sub txtExcelInterval_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtExcelInterval.Validating
        If IsNumeric(txtExcelInterval.Text) Then
            If (CInt(txtExcelInterval.Text) > 0) Then
                'okay
                Exit Sub
            End If
        End If

        ' Cancel the event moving off of the control.
        e.Cancel = True

        ' Select the offending text.
        txtExcelInterval.Select(0, txtExcelInterval.Text.Length)

        ' Give the ErrorProvider the error message to
        ' display.
        ErrorProvider1.SetError(txtExcelInterval, "Invalid Entry. Time interval for output must be greater than 0 sec.")

    End Sub

    Private Sub txtDisplayInterval_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDisplayInterval.LostFocus
        If IsNumeric(txtDisplayInterval.Text) Then
            DisplayInterval = CInt(txtDisplayInterval.Text)
        End If
    End Sub

    Private Sub txtDisplayInterval_Validated(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtDisplayInterval.Validated
        ErrorProvider1.Clear()
        DisplayInterval = CInt(txtDisplayInterval.Text)
    End Sub

    Private Sub txtDisplayInterval_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtDisplayInterval.Validating
        If IsNumeric(txtDisplayInterval.Text) Then
            If (CInt(txtDisplayInterval.Text) >= Timestep) Then
                'okay
                Exit Sub
            End If
        End If

        ' Cancel the event moving off of the control.
        e.Cancel = True

        ' Select the offending text.
        txtDisplayInterval.Select(0, txtDisplayInterval.Text.Length)

        ' Give the ErrorProvider the error message to
        ' display.
        ErrorProvider1.SetError(txtDisplayInterval, "Invalid Entry. Time interval for displaying results must be greater than or equal to " & Timestep.ToString & " sec.")

    End Sub


    Private Sub txtSimTime_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtSimTime.TextChanged
       
    End Sub

    Private Sub txtOutputInterval_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtOutputInterval.LostFocus
        If IsNumeric(txtOutputInterval.Text) Then
            OutputInterval = CInt(txtOutputInterval.Text)
        End If
    End Sub

    Private Sub txtBaseName_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtBaseName.Leave
        Me.Validate()
    End Sub


    Private Sub txtBaseName_Validated(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtBaseName.Validated
        ErrorProvider1.Clear()
        oldbasefile = basefile
        'basefile = ""
        Exit Sub

        Dim oldfolder As String = RiskDataDirectory
        Dim getfolder As String = Convert.ToString(txtBaseName.Text)

        getfolder = getfolder.Replace(" ", "_")
        txtBaseName.Text = getfolder.ToString
        getfolder = "basemodel_" & getfolder

        If getfolder.Length > 0 Then
            'RiskDataDirectory = UserAppDataFolder & gcs_folder_ext & "\" & "riskdata\" & getfolder & "\"
            RiskDataDirectory = UserPersonalDataFolder & gcs_folder_ext & "\" & "riskdata\" & getfolder & "\"

        End If

        If My.Computer.FileSystem.DirectoryExists(RiskDataDirectory) = False Then
            'create folder
            My.Computer.FileSystem.CreateDirectory(RiskDataDirectory)
        End If

        If RiskDataDirectory <> oldfolder And basefile <> "" Then
            My.Computer.FileSystem.CopyFile(basefile, RiskDataDirectory & getfolder & ".xml", True)
        End If
        If RiskDataDirectory <> oldfolder Then
            My.Computer.FileSystem.CopyFile(oldfolder & "items.xml", RiskDataDirectory & "items.xml", True)
            My.Computer.FileSystem.CopyFile(oldfolder & "sprinklers.xml", RiskDataDirectory & "sprinklers.xml", True)
            My.Computer.FileSystem.CopyFile(oldfolder & "distributions.xml", RiskDataDirectory & "distributions.xml", True)
            My.Computer.FileSystem.CopyFile(oldfolder & "vents.xml", RiskDataDirectory & "vents.xml", True)
            My.Computer.FileSystem.CopyFile(oldfolder & "smokedets.xml", RiskDataDirectory & "smokedets.xml", True)
        End If
        If getfolder.Length > 0 Then
            basefile = RiskDataDirectory & getfolder & ".xml"
        End If
    End Sub

    Private Sub txtBaseName_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles txtBaseName.Validating

       

    End Sub

    Private Sub RadialDistanceToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadialDistanceToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for sd radial distance
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sdid As Integer
        Dim i As Integer

        sdid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_SDRadialDist.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_SDRadialDist(sdid, i - 1)
            Next

            xtitle = " Radial Distance (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Smoke Detector " & sdid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_SDRadialDist(sdid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RadialDistanceToolStripMenuItem1")
        End Try
    End Sub


    Private Sub DistanceBelowCeilingToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DistanceBelowCeilingToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for sd distance below ceiling
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sdid As Integer
        Dim i As Integer

        sdid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_SDZ.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_SDZ(sdid, i - 1)
            Next

            xtitle = " Distance Below Ceiling (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Smoke Detector " & sdid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_SDZ(sdid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DistanceBelowCeilingToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub ReliabilityToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReliabilityToolStripMenuItem2.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for spsdrinkler reliability
        '*  ==========================================================

        Dim param As String = "Smoke Detector Reliability"
        Dim xtitle As String = "Smoke Detector Reliability (-)"

        Call graph_histogram(param, xtitle, mc_SDReliability)
    End Sub

    Private Sub OpticakDensityForAlarmToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpticakDensityForAlarmToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for optical density for alarm
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sdid As Integer
        Dim i As Integer

        sdid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_SDOD.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_SDOD(sdid, i - 1)
            Next

            xtitle = " Optical Density Required for Alarm (1/m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Smoke Detector " & sdid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_SDOD(sdid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in OpticakDensityFor AlarmToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub RadialDistanceToolStripMenuItem2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles RadialDistanceToolStripMenuItem2.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for radial distance
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01

        Dim sdid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        oDistributions = SmokeDetDB.GetSDDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "sdr" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Radial Distance (m)" & " - Smoke Detector " & sdid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_SDRadialDist(sdid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in RadialDistanceToolStripMenuItem2_Click")
        End Try
    End Sub

    Private Sub DistanceBelowCeilingToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles DistanceBelowCeilingToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for distance below ceiling
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sdid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SmokeDetDB.GetSDDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "sdz" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Distance below ceiling (m)" & " - Smoke Detector " & sdid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_SDZ(sdid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in DistanceBelowCeilingToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub ReliabilityToolStripMenuItem3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ReliabilityToolStripMenuItem3.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for sd reliability
        '*  ==========================================================

        Dim param As String = "Smoke Detector Reliability"
        Dim xtitle As String = "Smoke Detector Reliability (-)"

        Call graph_CDF(param, xtitle, mc_SDReliability)
    End Sub

    Private Sub OpticalDensityAtAlarmToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpticalDensityAtAlarmToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for OD for alarm
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sdid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SmokeDetDB.GetSDDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "OD" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Optical Density for Alarm (m)" & " - Smoke Detector " & sdid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_SDOD(sdid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in OpticalDensityAtAlarmToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub CharacteristicLengthToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CharacteristicLengthToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for characteristic length
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim sdid As Integer
        Dim i As Integer

        sdid = 0

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_SDcharlength.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_SDcharlength(sdid, i - 1)
            Next

            xtitle = " Characteristic Length (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Smoke Detector " & sdid + 1
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_SDcharlength(sdid, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in CharacteristicLengthToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub CharacteristicLengthToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CharacteristicLengthToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for characteristic length
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim sdid As Integer = 0

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = SmokeDetDB.GetSDDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "charlength" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False

            xtitle = " Characteristic Length (m)" & " - Smoke Detector " & sdid + 1
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.0"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_SDcharlength(sdid, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in CharacteristicLengthToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub txtBaseName_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtBaseName.TextChanged
        'basefile = CStr(txtBaseName.Text)

    End Sub


    Private Sub FlowRateToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FlowRateToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for fan flow rate
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim fanid As Integer
        Dim i As Integer

        'fanid = 1
        fanid = NumericUpDownCounter.Value
        NumericUpDownCounter.Maximum = NumFans
        NumericUpDownCounter.Visible = True
        Label3.Visible = True
        Label3.Text = "Fan ID"

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_fanflowrate.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_fanflowrate(fanid - 1, i - 1)
            Next

            xtitle = " Fan Flow Rate (m3/s)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Fan " & fanid
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_fanflowrate(fanid - 1, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FlowRateToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub StartTimeToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StartTimeToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for fan start time
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim fanid As Integer
        Dim i As Integer

        fanid = NumericUpDownCounter.Value
        NumericUpDownCounter.Maximum = NumFans
        NumericUpDownCounter.Visible = True
        Label3.Visible = True
        Label3.Text = "Fan ID"
        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_fanstarttime.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_fanstarttime(fanid - 1, i - 1)
            Next

            xtitle = " Fan Start Time (s)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Fan " & fanid
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_fanstarttime(fanid - 1, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in StartTimeToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub PressureLimitToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PressureLimitToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for fan pressure limit
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim fanid As Integer
        Dim i As Integer

        fanid = NumericUpDownCounter.Value
        NumericUpDownCounter.Maximum = NumFans
        NumericUpDownCounter.Visible = True
        Label3.Visible = True
        Label3.Text = "Fan ID"
        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_fanpressurelimit.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_fanpressurelimit(fanid - 1, i - 1)
            Next

            xtitle = " Fan Max Pressure Diff (Pa)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Fan " & fanid
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_fanpressurelimit(fanid - 1, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in PressureLimitToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub SystemReliabilityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SystemReliabilityToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for fan system reliability
        '*  ==========================================================

        Dim param As String = "Mechanical Ventilation Reliability"
        xtitle = "Mechanical Ventilation System Reliability (-)"
        NumericUpDownCounter.Visible = False
        Label3.Visible = False

        Call graph_histogram(param, xtitle, mc_FanReliability)

    End Sub

    Private Sub FlowRateToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FlowRateToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for fan flow rate
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim fanid As Integer

        fanid = NumericUpDownCounter.Value
       
        Label3.Visible = True
        Label3.Text = "Fan ID"
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = FanDB.GetFanDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "fanflowrate" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False
            NumericUpDownCounter.Minimum = 1
            NumericUpDownCounter.Maximum = NumFans
            NumericUpDownCounter.Visible = True
            Label3.Visible = True
            Label3.Text = "Fan ID"
            xtitle = " Fan Flow Rate (m3/s)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle & " - Fan " & fanid, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_fanflowrate(fanid - 1, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FlowRateToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub NumericUpDownCounter_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles NumericUpDownCounter.ValueChanged

        If Chart1.Visible = True Then
            Select Case xtitle
                Case " Fan Flow Rate (m3/s)"
                    FlowRateToolStripMenuItem.PerformClick()
                Case " Fan Start Time (s)"
                    StartTimeToolStripMenuItem.PerformClick()
                Case " Fan Max Pressure Diff (Pa)"
                    PressureLimitToolStripMenuItem.PerformClick()
                Case " Mechanical Ventilation System Reliability (-)"
                    SystemReliabilityToolStripMenuItem.PerformClick()
                Case " Fan Reliability (-)"
                    FanReliabilityToolStripMenuItem1.PerformClick()
            End Select
        End If
        If Chart2.Visible = True Then
            Select Case xtitle
                Case " Fan Flow Rate (m3/s)"
                    FlowRateToolStripMenuItem1.PerformClick()
                Case " Fan Start Time (s)"
                    StartTimeToolStripMenuItem1.PerformClick()
                Case " Fan Max Pressure Diff (Pa)"
                    PressureLimitToolStripMenuItem1.PerformClick()
                Case " Fan Reliability (-)"
                    FanReliabilityToolStripMenuItem.PerformClick()
                Case " Mechanical Ventilation System Reliability (-)"
                    SystemReliabiityToolStripMenuItem.PerformClick()
            End Select
        End If
    End Sub

    Private Sub PressureLimitToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles PressureLimitToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for cross-fan pressure limit
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim fanid As Integer

        fanid = NumericUpDownCounter.Value

        Label3.Visible = True
        Label3.Text = "Fan ID"
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = FanDB.GetFanDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "fanpressurelimit" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False
            NumericUpDownCounter.Minimum = 1
            NumericUpDownCounter.Maximum = NumFans
            NumericUpDownCounter.Visible = True
            Label3.Visible = True
            Label3.Text = "Fan ID"
            xtitle = " Fan Max Pressure Diff (Pa)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle & " - Fan " & fanid, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_fanpressurelimit(fanid - 1, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in PressureLimitToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub StartTimeToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StartTimeToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for fan start time
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim fanid As Integer

        fanid = NumericUpDownCounter.Value

        Label3.Visible = True
        Label3.Text = "Fan ID"
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = FanDB.GetFanDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "fanstarttime" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False
            NumericUpDownCounter.Minimum = 1
            NumericUpDownCounter.Maximum = NumFans
            NumericUpDownCounter.Visible = True
            Label3.Visible = True
            Label3.Text = "Fan ID"
            xtitle = " Fan Start Time (s)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle & " - Fan " & fanid, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_fanstarttime(fanid - 1, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in StartTimeToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub SystemReliabiityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SystemReliabiityToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for mech vent system reliability
        '*  ==========================================================

        Dim param As String = "Mechanical Ventilation Reliability"
        Dim xtitle As String = "Mechanical Ventilation System Reliability (-)"

        Call graph_CDF(param, xtitle, mc_FanReliability)

        NumericUpDownRoom.Visible = False
        Label19.Visible = False

    End Sub

    Private Sub FanReliabilityToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FanReliabilityToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for fan reliability
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim fanid As Integer

        fanid = NumericUpDownCounter.Value

        Label3.Visible = True
        Label3.Text = "Fan ID"
        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = FanDB.GetFanDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "fanreliability" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False
            NumericUpDownCounter.Minimum = 1
            NumericUpDownCounter.Maximum = NumFans
            NumericUpDownCounter.Visible = True
            Label3.Visible = True
            Label3.Text = "Fan ID"
            xtitle = " Fan Reliability (-)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle & " - Fan " & fanid, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_fanIDreliability(fanid - 1, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FanReliabilityToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub FanReliabilityToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FanReliabilityToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for fan reliability
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim fanid As Integer
        Dim i As Integer

        fanid = NumericUpDownCounter.Value
        NumericUpDownCounter.Maximum = NumFans
        NumericUpDownCounter.Visible = True
        Label3.Visible = True
        Label3.Text = "Fan ID"
        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_fanIDreliability.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_fanIDreliability(fanid - 1, i - 1)
            Next

            xtitle = " Fan Reliability (-)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Fan " & fanid
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_fanIDreliability(fanid - 1, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in FanReliabilityToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub ClearLogToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClearLogToolStripMenuItem.Click
        Try

            rtb_log.Clear()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb ClearLogToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub txtBaseName_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtBaseName.LostFocus

    End Sub

    Private Sub LengthToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LengthToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for room length
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim roomid As Integer
        Dim i As Integer

        roomid = NumericUpDownCounter.Value
        NumericUpDownCounter.Maximum = NumberRooms
        NumericUpDownCounter.Visible = True
        Label3.Visible = True
        Label3.Text = "Room ID"

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_room_length.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_room_length(roomid - 1, i - 1)
            Next

            xtitle = " Room Length (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Room " & roomid
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_room_length(roomid - 1, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LengthToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub WidthToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WidthToolStripMenuItem.Click
        '*  ==========================================================
        '*  Show a graph showing the sample distribution for room length
        '*  ==========================================================

        Dim Title As String
        Dim length As Integer
        Dim index As Integer
        Dim roomid As Integer
        Dim i As Integer

        roomid = NumericUpDownCounter.Value
        NumericUpDownCounter.Maximum = NumberRooms
        NumericUpDownCounter.Visible = True
        Label3.Visible = True
        Label3.Text = "Room ID"

        Try

            'changed to 2d array, copy to 1D array needs fixing. 
            length = mc_room_width.GetLength(1)
            ReDim tempdatain(0 To length - 1)

            For i = 1 To NumberIterations
                tempdatain(i - 1) = mc_room_width(roomid - 1, i - 1)
            Next

            xtitle = " Room Width (m)"

            'define variables
            Title = "Input Data - Frequency Plot: " & IterationsCompleted & " iterations "
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle & " - Room " & roomid
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(mc_room_width(roomid - 1, index))
            Next index

            Call show_histogram_input()

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in WidthToolStripMenuItem_Click")
        End Try
    End Sub

    Private Sub LengthToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LengthToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for fan flow rate
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim roomid As Integer

        roomid = NumericUpDownCounter.Value

        Label3.Visible = True
        Label3.Text = "Room ID"

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = RoomDB.GetRoomDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "length" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False
            NumericUpDownCounter.Minimum = 1
            NumericUpDownCounter.Maximum = NumberRooms
            NumericUpDownCounter.Visible = True
            Label3.Visible = True
            Label3.Text = "Room ID"
            xtitle = " Length (m)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle & " - Room " & roomid, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_room_length(roomid - 1, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in LengthToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub WidthToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles WidthToolStripMenuItem1.Click
        '*  ==========================================================
        '*  Show a graph showing the cdf for fan flow rate
        '*  ==========================================================

        Dim MaxYValue As Double
        Dim k As Integer
        Dim Title As String = ""
        Dim alpha As Double = 0.01
        Dim roomid As Integer

        roomid = NumericUpDownCounter.Value

        Label3.Visible = True
        Label3.Text = "Room ID"

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If
        oDistributions = RoomDB.GetRoomDistributions
        If oDistributions.Count = 0 Then
            MsgBox("No data distribution")
            Exit Sub
        End If
        For Each oDistribution In oDistributions
            If oDistribution.varname = "width" Then
                If oDistribution.distribution = "None" Then
                    MsgBox("No data distribution")
                    Exit Sub
                End If
                Exit For
            End If
        Next

        Try
            NumericUpDown1.Visible = False
            Label18.Visible = False
            NumericUpDownRoom.Visible = False
            Label19.Visible = False
            IterationUpDown.Visible = False
            Label40.Visible = False
            NumericUpDownCounter.Minimum = 1
            NumericUpDownCounter.Maximum = NumberRooms
            NumericUpDownCounter.Visible = True
            Label3.Visible = True
            Label3.Text = "Room ID"
            xtitle = " Width (m)"
            counter = 1
            room = 1
            MaxYValue = 0

            'sets various properties for displaying the CDF plot
            Call cdf_include_input(xtitle & " - Room " & roomid, Title, MaxYValue, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.000"

            ReDim tempdatain(0 To IterationsCompleted - 1)
            For k = 0 To IterationsCompleted - 1
                tempdatain(k) = mc_room_width(roomid - 1, k)
            Next

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            Dim p90 As String = String.Format("{0:f3}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in WidthToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub TimeEquivNHLCeilingToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivNHLCeilingToolStripMenuItem.Click

        If (timeequiv Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        ' Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            'length = mc_sprnum.GetLength(0) * mc_sprnum.GetLength(1) * mc_sprnum.GetLength(2)
            ' Array.Copy(mc_sprnum, tempdata, length)

            xtitle = " Time Equivalent (minutes) - NHL Ceiling"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(timeequiv(1, index))
            Next index

            'NumericUpDown1.Minimum = OutputInterval
            'NumericUpDown1.Maximum = mc_sprnum.GetLength(1) - 2
            'NumericUpDown1.Value = mc_sprnum.GetLength(1) - 2
            Call show_histogram_output()

            'Chart1.ChartAreas("ChartArea1").AxisX.Minimum = 0
            'Chart1.ChartAreas("ChartArea1").AxisX.Maximum = NumSprinklers + 1
            NumericUpDown1.Visible = False
            Label18.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLCeilingToolStripMenuItem2")
        End Try
    End Sub

    Private Sub TimeEquivNHLCeilingToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivNHLCeilingToolStripMenuItem1.Click

        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        'Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False

            xtitle = " Time Equivalent (minutes) - NHL Ceiling"
            'counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumberRooms
            i = fireroom

            'For j = 1 To counter
            'j = counter
            For k = 0 To IterationsCompleted - 1
                'tempdatain(k) = CInt(mc_sprnum(i, j, k))
                tempdatain(k) = timeequiv(1, k)
            Next k

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
            Chart2.Series("Room " & room).Points.Clear()

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            'Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty
            NumericUpDown1.Visible = True
            Label18.Visible = True
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLCeilingToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub TimeEquivNHLWallToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivNHLWallToolStripMenuItem.Click
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        ' Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False

            xtitle = " Time Equivalent (minutes) - NHL Wall"
            'counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumberRooms
            i = fireroom

            'For j = 1 To counter
            'j = counter
            For k = 0 To IterationsCompleted - 1
                'tempdatain(k) = CInt(mc_sprnum(i, j, k))
                tempdatain(k) = timeequiv(2, k)
            Next k

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
            Chart2.Series("Room " & room).Points.Clear()

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            'Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty
            NumericUpDown1.Visible = True
            Label18.Visible = True
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLWallToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub TimeEquivNHLFloorToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivNHLFloorToolStripMenuItem.Click
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        ' Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False

            xtitle = " Time Equivalent (minutes) - NHL Floor"
            'counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumberRooms
            i = fireroom

            'For j = 1 To counter
            'j = counter
            For k = 0 To IterationsCompleted - 1
                'tempdatain(k) = CInt(mc_sprnum(i, j, k))
                tempdatain(k) = timeequiv(4, k)
            Next k

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
            Chart2.Series("Room " & room).Points.Clear()

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            'Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty
            NumericUpDown1.Visible = True
            Label18.Visible = True
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLFloorToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub TimeEquivNHLWallToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivNHLWallToolStripMenuItem1.Click
        If (timeequiv Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        ' Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            'length = mc_sprnum.GetLength(0) * mc_sprnum.GetLength(1) * mc_sprnum.GetLength(2)
            ' Array.Copy(mc_sprnum, tempdata, length)

            xtitle = " Time Equivalent (minutes) - NHL Wall"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(timeequiv(2, index))
            Next index

            'NumericUpDown1.Minimum = OutputInterval
            'NumericUpDown1.Maximum = mc_sprnum.GetLength(1) - 2
            'NumericUpDown1.Value = mc_sprnum.GetLength(1) - 2
            Call show_histogram_output()

            'Chart1.ChartAreas("ChartArea1").AxisX.Minimum = 0
            'Chart1.ChartAreas("ChartArea1").AxisX.Maximum = NumSprinklers + 1
            NumericUpDown1.Visible = False
            Label18.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLWallToolStripMenuItem2")
        End Try
    End Sub

    Private Sub TimeEquivNHLFloorToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivNHLFloorToolStripMenuItem1.Click
        If (timeequiv Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        ' Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            'length = mc_sprnum.GetLength(0) * mc_sprnum.GetLength(1) * mc_sprnum.GetLength(2)
            ' Array.Copy(mc_sprnum, tempdata, length)

            xtitle = " Time Equivalent (minutes) - NHL Floor"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(timeequiv(4, index))
            Next index

            'NumericUpDown1.Minimum = OutputInterval
            'NumericUpDown1.Maximum = mc_sprnum.GetLength(1) - 2
            'NumericUpDown1.Value = mc_sprnum.GetLength(1) - 2
            Call show_histogram_output()

            'Chart1.ChartAreas("ChartArea1").AxisX.Minimum = 0
            'Chart1.ChartAreas("ChartArea1").AxisX.Maximum = NumSprinklers + 1
            NumericUpDown1.Visible = False
            Label18.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLFloorToolStripMenuItem2")
        End Try
    End Sub

    Private Sub TimeEquivVM2ToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivVM2ToolStripMenuItem.Click
        If (timeequiv Is Nothing) Then
            MsgBox("No data")
            Exit Sub
        End If

        Dim Title As String
        ' Dim length As Integer
        Dim index As Integer

        room = 1

        Try

            'length = mc_sprnum.GetLength(0) * mc_sprnum.GetLength(1) * mc_sprnum.GetLength(2)
            ' Array.Copy(mc_sprnum, tempdata, length)

            xtitle = " Time Equivalent (minutes) - VM"

            'define variables
            Title = "Output Data - Frequency Plot: " & IterationsCompleted & " iterations"
            Chart1.ChartAreas("ChartArea1").AxisX.Title = xtitle
            Chart1.Titles("Title1").Text = Title
            Chart1.Series.Clear()
            Chart1.Series.Add("Series1")

            For index = 0 To IterationsCompleted - 1
                Chart1.Series("Series1").Points.AddY(timeequiv(0, index))
            Next index

            'NumericUpDown1.Minimum = OutputInterval
            'NumericUpDown1.Maximum = mc_sprnum.GetLength(1) - 2
            'NumericUpDown1.Value = mc_sprnum.GetLength(1) - 2
            Call show_histogram_output()

            'Chart1.ChartAreas("ChartArea1").AxisX.Minimum = 0
            'Chart1.ChartAreas("ChartArea1").AxisX.Maximum = NumSprinklers + 1
            NumericUpDown1.Visible = False
            Label18.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivVM2ToolStripMenuItem2")
        End Try
    End Sub

    Private Sub TimeEquivVMToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TimeEquivVMToolStripMenuItem.Click
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier As Double
        Dim k As Integer
        'Dim j As Integer
        Dim i As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = True 'cdf plots
            Chart3.Visible = False
            Label4.Visible = False
            Label5.Visible = False

            xtitle = " Time Equivalent (minutes) - VM"
            'counter = 1
            room = 1
            DataShift = 0
            DataMultiplier = 1
            MaxYValue = 0

            Call cdf_include_output(xtitle, Title, DataShift, DataMultiplier, MaxYValue, counter, room)

            Chart2.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0"

            'For i = 1 To NumberRooms
            i = fireroom

            'For j = 1 To counter
            'j = counter
            For k = 0 To IterationsCompleted - 1
                'tempdatain(k) = CInt(mc_sprnum(i, j, k))
                tempdatain(k) = timeequiv(0, k)
            Next k

            tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)
            Chart2.Series("Room " & room).Points.Clear()

            For k = 0 To IterationsCompleted - 1

                cdftempdata(0, 0, k) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, k / (IterationsCompleted - 1)) 'value at given percentile
                Chart2.Series("Room " & room).Points.AddXY(tempdatain(k), CDbl(k / (IterationsCompleted - 1)))

            Next k

            'Next j
            'Next i

            Dim p90 As String = String.Format("{0:f1}", CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, 0.9))
            Chart2.Titles("Title2").Text = "90-percentile for sample = " & p90

            Chart2.Titles("Title3").Text = Empty
            NumericUpDown1.Visible = True
            Label18.Visible = True
            Label3.Visible = False
            NumericUpDownCounter.Visible = False

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in TimeEquivNHLCeilingToolStripMenuItem1_Click")
        End Try
    End Sub

    Public Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles EvacTimer.Tick
        'check for new EVACNZ data
        Try
2000:
            Dim xmlfile As String = RiskDataDirectory & "evacnz.xml"

            Dim myXmlDocument As New XmlDocument
            Dim myNodes As XmlNodeList

            If FileInUse(xmlfile) = True Then
                GoTo 2000
            End If

            myXmlDocument.Load(xmlfile)

            myNodes = myXmlDocument.GetElementsByTagName("ENZ_simtime")
            For Each n As XmlNode In myNodes
                If n.Name = "ENZ_simtime" Then
                    enzsimtime = n.InnerText
                    Exit For
                End If
            Next

        Catch ex As Exception
            If Err.Description = "Root element is missing." Then
                EvacTimer.Enabled = False
                MsgBox(Err.Description, MsgBoxStyle.OkOnly, "We have a problem, Houston. " & Err.Description)
            End If

            'MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb EvacTimer_Tick")
            GoTo 2000
        End Try

    End Sub
    Public Function FileInUse(ByVal sFile As String) As Boolean
        Dim thisFileInUse As Boolean = False
        If System.IO.File.Exists(sFile) Then
            Try
                Using f As New IO.FileStream(sFile, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite)
                    ' thisFileInUse = False
                End Using
            Catch
                thisFileInUse = True
            End Try
        End If
        Return thisFileInUse
    End Function
    Public Sub save_evacnz_xml2(ByRef ventstatus() As Boolean)
        'save simulation output to xml file
        'this subroutine writes to the evacnz.xml file
        'called by subroutine DIFFEQN, MainProgram2 once per timestep

        Try

1020:
            Dim outputfile As String = RiskDataDirectory & "brisk2evac.xml"
            Dim room As Integer

            Dim myXmlDocument As New XmlDocument
            Dim myNodes, MyChildren As XmlNodeList
            Dim node(4) As XmlNode

            myXmlDocument.Load(outputfile)
            myNodes = myXmlDocument.GetElementsByTagName("BRISK_simtime")
            For Each n As XmlNode In myNodes
                If n.Name = "BRISK_simtime" Then
                    n.InnerText = brisksimtime
                    Exit For
                End If
            Next

            myNodes = myXmlDocument.GetElementsByTagName("Room")
            For Each n As XmlNode In myNodes
                If n.Name = "Room" Then
                    MyChildren = n.ChildNodes
                    For Each n1 As XmlNode In MyChildren
                        If n1.Name = "ID" Then
                            room = n1.InnerText
                            Exit For
                        End If
                    Next
                    For Each n1 As XmlNode In MyChildren
                        If n1.Name = "Layer" Then
                            n1.InnerText = String.Format("{0:f3}", layerheight(room, stepcount))
                        ElseIf n1.Name = "OD_upper" Then
                            n1.InnerText = String.Format("{0:f3}", OD_upper(room, stepcount))
                        ElseIf n1.Name = "OD_lower" Then
                            n1.InnerText = String.Format("{0:f3}", OD_lower(room, stepcount))
                        ElseIf n1.Name = "Alarm" Then

                            If HaveSD(room) Then
                                If SDTime(room) < tim(stepcount, 1) Then
                                    If SDTime(room) > 0 Then
                                        n1.InnerText = True 'smoke detector has operated
                                    Else
                                        n1.InnerText = False 'smoke detector has not operated
                                    End If
                                Else
                                    n1.InnerText = False 'smoke detector has not operated
                                End If
                            End If

                        End If
                    Next
                End If
            Next
            myXmlDocument.Save(outputfile)

        Catch ex As Exception
            'MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb save_evacnz_xml2")
            GoTo 1020
        End Try
    End Sub

    Public Sub save_evacnz_xml(ByRef ventstatus() As Boolean)
        'save simulation output to xml file
        'this subroutine writes to the evacnz.xml file
        'called by subroutine DIFFEQN, MainProgram2 once per timestep

2010:
        Dim outputfile As String = RiskDataDirectory & "evacnz.xml"
        If FileInUse(outputfile) = True Then
            GoTo 2010
        End If

        Try

            Dim xmlFile As IO.FileStream = New IO.FileStream(outputfile, IO.FileMode.Create, FileAccess.Write)
            Dim DFW As New XmlTextWriter(xmlFile, System.Text.Encoding.Default)
            Dim room As Integer

            With DFW
                .Formatting = Formatting.Indented
                .Indentation = 3
                .IndentChar = CChar(" ")
                .WriteStartDocument()
                .WriteStartElement("Shared")
                .WriteElementString("ENZ_simtime", enzsimtime)
                .WriteElementString("BRISK_simtime", brisksimtime)

                'evacnz writes to the vent element
                .WriteStartElement("Vents")
                For vent = 1 To number_vents
                    .WriteStartElement("Vent")
                    .WriteElementString("ID", vent)
                    'B-RISK is writing back the current status of vent
                    'but not relevant as evacuationz will update
                    .WriteElementString("ENZ_open", ventstatus(vent))
                    .WriteEndElement() 'vent
                Next
                .WriteEndElement() 'vents

                'brisk writes to the room element
                .WriteStartElement("Rooms")
                For room = 1 To NumberRooms
                    .WriteStartElement("Room")
                    .WriteElementString("ID", room)
                    .WriteElementString("Layer", String.Format("{0:f3}", layerheight(room, stepcount)))
                    .WriteElementString("OD_upper", String.Format("{0:f3}", OD_upper(room, stepcount)))
                    .WriteElementString("OD_lower", String.Format("{0:f3}", OD_lower(room, stepcount)))

                    If HaveSD(room) Then
                        If SDTime(room) < tim(stepcount, 1) Then
                            If SDTime(room) > 0 Then
                                .WriteElementString("Alarm", True) 'smoke detector has operated
                            Else
                                .WriteElementString("Alarm", False) 'smoke detector has not operated
                            End If
                        Else
                            .WriteElementString("Alarm", False) 'smoke detector has not operated
                        End If
                    End If

                    .WriteEndElement() 'room
                Next

                .WriteEndElement() 'rooms
                .WriteEndElement() 'shared
            End With

            DFW.Close()
            xmlFile.Close()

        Catch ex As Exception
            If Err.Description = "Root element is missing." Then
                MsgBox(Err.Description, MsgBoxStyle.OkOnly, "We have a problem, Houston. " & Err.Description)
            End If

            'MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb save_evascnz_xml")
            GoTo 2010

        End Try

    End Sub
    Public Sub read_evacnz_xml2(ByRef ventstatus() As Boolean)
        'this subroutine reads from the evacnz.xml file and read/writes to the vents.xml file
        'called by subroutine DIFFEQN, MainProgram2 once per timestep
        Try
101:

            Dim xmlfile As String = RiskDataDirectory & "evac2brisk.xml"
            Dim ventfile As String = RiskDataDirectory & "vents.xml"
            Dim myXmlDocument As New XmlDocument
            Dim myNodes As XmlNodeList
            Dim node(4) As XmlNode
            Dim statusmessage As String = tim(stepcount, 1) & " sec. "

            Do Until enzsimtime >= tim(stepcount, 1)
                'wait for evacuatioNZ to catch up

                myXmlDocument.Load(xmlfile)
                myNodes = myXmlDocument.GetElementsByTagName("ENZ_simtime")
                For Each n As XmlNode In myNodes
                    If n.Name = "ENZ_simtime" Then
                        enzsimtime = n.InnerText
                        Exit For
                    End If
                Next

                If enzsimtime < brisksimtime Then MDIFrmMain.ToolStripStatusLabel4.Text = statusmessage & "Waiting for EvacuatioNZ ..."

            Loop

            'if B-RISK is beind evacuatioNZ then keep running
            MDIFrmMain.ToolStripStatusLabel4.Text = statusmessage

        Catch ex As Exception
            'MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb read_evac_xml2")
            GoTo 101 'try again
        End Try

    End Sub

    Public Sub read_evacnz_xml(ByRef ventstatus() As Boolean)
        'this subroutine reads from the evacnz.xml file and read/writes to the vents.xml file
        'called by subroutine DIFFEQN, MainProgram2 once per timestep

        Dim xmlfile As String = RiskDataDirectory & "evacnz.xml"
        Dim ventfile As String = RiskDataDirectory & "vents.xml"
        Dim myXmlDocument As New XmlDocument
        Dim myNodes, myChildren As XmlNodeList
        Dim node(4) As XmlNode
        Dim ID As Integer
        Dim ENZ_open As Boolean
        Dim statusmessage As String = tim(stepcount, 1) & " sec. "
        Try
2010:
            'get the time that evacuatioNZ last wrote to the exchange file
            If FileInUse(xmlfile) = True Then
                GoTo 2010
            End If

            myXmlDocument.Load(xmlfile)
            myNodes = myXmlDocument.GetElementsByTagName("ENZ_simtime")
            For Each n As XmlNode In myNodes
                If n.Name = "ENZ_simtime" Then
                    enzsimtime = n.InnerText
                    Exit For
                End If
            Next

            EvacTimer.Enabled = True
            Do Until enzsimtime >= tim(stepcount, 1)
                'wait for evacuatioNZ to catch up
                Application.DoEvents() 'run evactimer_tick every 100 ms

                If enzsimtime <= brisksimtime Then MDIFrmMain.ToolStripStatusLabel4.Text = statusmessage & "Waiting for EvacuatioNZ ..."

                'timer interval = 100 ms
                'at each interval the vents.xml file will be checked for new data 
                'see timer1_tick event
            Loop

            'if B-RISK is beind evacuatioNZ then keep running
            'EvacTimer.Enabled = False
            MDIFrmMain.ToolStripStatusLabel4.Text = statusmessage
        Catch ex As Exception
            GoTo 2010
            ' MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb read_evacnz_xml")
        Finally
            EvacTimer.Enabled = False
        End Try

        Try
2020:
            'extract the vent status from the exchange file
            If FileInUse(xmlfile) = True Then
                GoTo 2020
            End If
            myXmlDocument.Load(xmlfile)
            myNodes = myXmlDocument.GetElementsByTagName("Vent")
            For Each n As XmlNode In myNodes
                If n.Name = "Vent" Then
                    myChildren = n.ChildNodes
                    For Each n1 As XmlNode In myChildren
                        If n1.Name = "ID" Then
                            ID = n1.InnerText
                        End If
                        If n1.Name = "ENZ_open" Then
                            ENZ_open = n1.InnerText
                        End If
                    Next
                    ventstatus(ID) = ENZ_open
                End If
            Next

            'create a vent object and recall data for existing vents
            Dim ovents As New List(Of oVent)
            Dim oventdistributions As New List(Of oDistribution)
            ovents = VentDB.GetVents
            oventdistributions = VentDB.GetVentDistributions
            number_vents = ovents.Count

            Dim ventcount(0 To MaxNumberRooms + 1, 0 To MaxNumberRooms + 1) As Integer

            Dim x As Integer
            myXmlDocument.Load(ventfile)
            myNodes = myXmlDocument.GetElementsByTagName("Vent")

            For Each n As XmlNode In myNodes
                If n.Name = "Vent" Then
                    myChildren = n.ChildNodes
                    For Each n1 As XmlNode In myChildren
                        If n1.Name = "id" Then
                            x = n1.InnerText
                            Dim oVent = CType(ovents(x - 1), oVent)
                            oVent.enzopen = ventstatus(x)
                            ventcount(oVent.fromroom, oVent.toroom) = ventcount(oVent.fromroom, oVent.toroom) + 1
                            'b-risk uses the breakflag to open/close vents in door_open subroutine
                            enzbreakflag(oVent.fromroom, oVent.toroom, ventcount(oVent.fromroom, oVent.toroom)) = ventstatus(x)
                            Exit For

                        End If
                    Next
                End If
            Next

            'save the updated vents to the vents.xml file
            VentDB.SaveVents(ovents, oventdistributions)

        Catch ex As Exception
            If Err.Description = "Root element is missing." Then
                EvacTimer.Enabled = False
                'MsgBox(Err.Description, MsgBoxStyle.OkOnly, "We have a problem, Houston. " & Err.Description)
            End If

            'MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb EvacTimer_Tick")
            GoTo 2020
        Finally
            EvacTimer.Enabled = False
        End Try

    End Sub


    Private Sub TestToolStripMenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 
        '
        ' sensitivity plot for upper layer temperature - output
        '
        Dim DataShift, MaxYValue As Double
        Dim DataMultiplier, XMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()

            ToolStrip1.Visible = False

            xtitle = " Time (s)"
            ytitle = "Time for ULT > 500 C (s)"

            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            MaxYValue = 900
            XMultiplier = 1 'time multipier

            Title = "Output Data - Sensitivity Plot: " & "Room " & NumericUpDownRoom.Value & ". " & IterationsCompleted & " iterations"
            Chart3.Titles("Title1").Text = Title

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = ytitle
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0"
            Chart3.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Vent Width (m)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False


            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label18.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            'plot multiple series
            Chart3.Series.Add(CStr(1))
            Chart3.Series(CStr(1)).ChartType = SeriesChartType.Point
            Dim Yval As Double = 0
            Dim Xval As Double = 0
            Dim ventid As Integer = 1

            For k = 1 To IterationsCompleted

                Xval = mc_vent_width(ventid - 1, k - 1)

                'find when gas temp > 500C
                For j = 0 To counter
                    If mc_ULTemp(room, j, k - 1) > 500 And j > 1 Then
                        Yval = j * OutputInterval * XMultiplier 'time
                        Exit For
                    Else
                        Yval = 0
                    End If
                Next
                Chart3.Series(CStr(1)).Points.AddXY(Xval, Yval)

                'For j = 0 To counter
                '    If mc_ULTemp(room, j, k - 1) = 0 And j > 1 Then Exit For
                '    ydata(j) = mc_ULTemp(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                '    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval * XMultiplier, ydata(j))
                'Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb TestToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub UpperLayerTempToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles UpperLayerTempToolStripMenuItem.Click

        If OutputInterval = 0 Then Exit Sub
        Dim i, j, k As Integer
        Dim tcounter As Integer = Ceiling(SimTime / OutputInterval)

        Dim oExcel As Object
        Dim oBook As Object
        Dim oSheet As Object

        Try
            Dim getname As String = ""
            Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                Case "Upper Layer Temperature (C)"
                    getname = RiskDataDirectory & "excel_UT_" & Convert.ToString(txtBaseName.Text)
                Case "Heat Release Rate (kW)"
                    getname = RiskDataDirectory & "excel_HRR_" & Convert.ToString(txtBaseName.Text)
                Case "Lower Layer Temperature (C)"
                    getname = RiskDataDirectory & "excel_LT_" & Convert.ToString(txtBaseName.Text)
                Case "Layer Height (m)"
                    getname = RiskDataDirectory & "excel_LH_" & Convert.ToString(txtBaseName.Text)
                Case "FED gases (-)"
                    getname = RiskDataDirectory & "excel_FEDGases_" & Convert.ToString(txtBaseName.Text)
                Case "FED thermal (-)"
                    getname = RiskDataDirectory & "excel_FEDThermal_" & Convert.ToString(txtBaseName.Text)
                Case "Visibility (m)"
                    getname = RiskDataDirectory & "excel_Visi_" & Convert.ToString(txtBaseName.Text)
                Case "No. Sprinklers Activated"
                    getname = RiskDataDirectory & "excel_SPR_" & Convert.ToString(txtBaseName.Text)
                Case "FLED (Actual) MJ/m2"
                    getname = RiskDataDirectory & "excel_FLEDactual_" & Convert.ToString(txtBaseName.Text)
                Case "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                    getname = RiskDataDirectory & "excel_misc_" & Convert.ToString(txtBaseName.Text)
            End Select

            'Start a new workbook in Excel
            oExcel = CreateObject("Excel.Application")
            oBook = oExcel.Workbooks.Add

            If InStr(Chart3.Titles("Title1").Text, "Time-series Plot: Upper") Then
                Dim DataArray2(0 To tcounter + 1, 0 To 101) As Object
                Dim room_id = 1
                '    'Dim percentile(0 To 100, 0 To tcounter) As Double
                'Add headers to the worksheet on row 1
                oSheet = oBook.Worksheets(1)
                oSheet.Range("A1").Value = "time (sec)"
                oSheet.Range("B1").Value = "percentiles --->"
                For j = 0 To 100
                    DataArray2(0, j + 1) = j
                Next
                For j = 0 To tcounter
                    'If j = tcounter Then Stop

                    For k = 0 To IterationsCompleted - 1
                        Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                            Case "Upper Layer Temperature (C)"
                                tempdatain(k) = mc_ULTemp(room_id, j, k)
                            Case "Heat Release Rate (kW)"
                                tempdatain(k) = mc_HRR(room_id, j, k)
                            Case "Lower Layer Temperature (C)"
                                tempdatain(k) = mc_LLTemp(room_id, j, k)
                            Case "FED gases (-)"
                                tempdatain(k) = mc_FEDgas(room_id, j, k)
                        End Select

                    Next k
                    tempdatain = CenterSpace.NMath.Stats.StatsFunctions.Sort(tempdatain, SortingType.Ascending)

                    For i = 0 To 100
                        DataArray2(j + 1, i + 1) = CenterSpace.NMath.Stats.StatsFunctions.Percentile(tempdatain, i / 100)
                    Next
                    DataArray2(j + 1, 0) = OutputInterval * j
                Next j
                oSheet.Range("A2").Resize(tcounter + 2, 102).Value = DataArray2
                getname = getname & "_percentile"
                If Not IsNullOrEmpty(getname) Then oBook.SaveAs(getname)
                oBook.Close(SaveChanges:=False)
                oExcel.Quit()
                oExcel = Nothing
                oBook = Nothing
                oSheet = Nothing

                MsgBox("File " & getname & " saved.", MsgBoxStyle.Information)
                Exit Sub
            End If


            'Create an array
            Dim DataArray(0 To tcounter + 4, 0 To NumberIterations + 1) As Object

            For i = 1 To NumberRooms
                'i = 1


                'Add headers to the worksheet on row 1
                oSheet = oBook.Worksheets(i)

                oSheet.Range("A1").Value = "time (sec)"
                oSheet.Range("B1").Value = "iterations --->"

                oSheet.name = "Room " & i.ToString

                For j = 0 To tcounter + 1
                    For k = 1 To IterationsCompleted
                        DataArray(j + 1, 0) = OutputInterval * j
                        DataArray(0, k) = k

                        Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                            Case "Upper Layer Temperature (C)"
                                DataArray(j + 1, k) = mc_ULTemp(i, j, k - 1)
                            Case "Heat Release Rate (kW)"
                                DataArray(j + 1, k) = mc_HRR(i, j, k - 1)

                            Case "Lower Layer Temperature (C)"
                                DataArray(j + 1, k) = mc_LLTemp(i, j, k - 1)
                            Case "Layer Height (m)"
                                DataArray(j + 1, k) = mc_LayerHeight(i, j, k - 1)
                            Case "FED gases (-)"
                                DataArray(j + 1, k) = mc_FEDgas(i, j, k - 1)
                            Case "FED thermal (-)"
                                DataArray(j + 1, k) = mc_FEDheat(i, j, k - 1)
                            Case "Visibility (m)"
                                DataArray(j + 1, k) = mc_visi(i, j, k - 1)
                            Case "No. Sprinklers Activated"
                                DataArray(j + 1, k) = mc_sprnum(i, j, k - 1)
                            Case "FLED (Actual) MJ/m2"
                                DataArray(1, k) = mc_FLED_actual(k - 1)
                            Case "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                                DataArray(1, k) = alphaTfitted(0, k - 1)
                                DataArray(2, k) = alphaTfitted(1, k - 1)
                                DataArray(3, k) = alphaTfitted(2, k - 1)
                                DataArray(4, k) = alphaTfitted(3, k - 1)
                                DataArray(5, k) = alphaTfitted(4, k - 1)
                                DataArray(1, 0) = "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                                DataArray(2, 0) = "HRR at Flashover (kW)"
                                DataArray(3, 0) = "Time at Flashover (sec)"
                                DataArray(4, 0) = "Ventilation Limit (kW)"
                                DataArray(5, 0) = "Time at Ventilation Limit (sec)"

                                oSheet.Range("A1").Value = ""

                        End Select

                    Next
                    If Chart3.ChartAreas("ChartArea1").AxisY.Title = "Fire Growth Alpha Coefficient Fitted (kW/s2)" Then

                        'Check through the entire set to find the highest value
                        Dim intFoundOutter As Integer
                        Dim intFoundInner As Integer


                        For intInnnerIndex As Integer = 0 To mc_HRR.GetUpperBound(2)  'each iteration
                            Dim intCurrentHighestValue As Integer = -1
                            For intIndex As Integer = 0 To mc_HRR.GetUpperBound(1) 'each timestep
                                If mc_HRR(i, intIndex, intInnnerIndex) > intCurrentHighestValue Then
                                    intCurrentHighestValue = mc_HRR(i, intIndex, intInnnerIndex)
                                    intFoundOutter = intIndex
                                    intFoundInner = intInnnerIndex
                                End If
                            Next
                            DataArray(6, intInnnerIndex + 1) = intCurrentHighestValue
                            DataArray(6, 0) = "Peak HRR (kW)"
                            DataArray(7, intInnnerIndex + 1) = intFoundOutter * OutputInterval
                            DataArray(7, 0) = "Time at Peak HRR (sec)"
                        Next

                        Exit For

                    End If

                Next

                Select Case Chart3.ChartAreas("ChartArea1").AxisY.Title
                    Case "FLED (actual) MJ/m2"
                        oSheet.Range("A2").Resize(2, NumberIterations + 1).Value = DataArray
                    Case "Fire Growth Alpha Coefficient Fitted (kW/s2)"
                        oSheet.Range("A2").Resize(8, NumberIterations + 1).Value = DataArray
                    Case Else
                        'Transfer the array to the worksheet starting at cell A2
                        oSheet.Range("A2").Resize(tcounter + 2, NumberIterations + 1).Value = DataArray
                End Select
                oBook.worksheets.add()
            Next

            'On Error GoTo L1
            'Save the Workbook and Quit Excel
            If Not IsNullOrEmpty(getname) Then oBook.SaveAs(getname)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

            MsgBox("File " & getname & " saved.", MsgBoxStyle.Information)
            Exit Sub

        Catch ex As Exception

            MsgBox(Err.Description, MsgBoxStyle.Critical)
            oBook.Close(SaveChanges:=False)
            oExcel.Quit()
            oExcel = Nothing
            oBook = Nothing
            oSheet = Nothing

        End Try

    End Sub

    Private Sub NormalisedHeatLoadToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 
        '
        ' sensitivity plot for NHL - output
        '
        Dim DataShift As Double
        Dim DataMultiplier, XMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()

            ToolStrip1.Visible = False

            xtitle = " Time (s)"
            ytitle = "Max Normalised Heat Load on ceiling"

            counter = 1
            room = fireroom
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            'MaxYValue = 900
            XMultiplier = 1 'time multipier

            Title = "Output Data - Sensitivity Plot: " & "Room " & NumericUpDownRoom.Value & ". " & IterationsCompleted & " iterations"
            Chart3.Titles("Title1").Text = Title

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = ytitle
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0"
            Chart3.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Vent Width (m)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False


            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label18.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            'plot multiple series
            Chart3.Series.Add(CStr(1))
            Chart3.Series(CStr(1)).ChartType = SeriesChartType.Point
            Dim Yval As Double = 0
            Dim Xval As Double = 0
            Dim ventid As Integer = 1

            For k = 1 To IterationsCompleted

                Xval = mc_vent_width(ventid - 1, k - 1)

                'find when gas temp > 500C
                For j = 0 To counter
                    If mc_ULTemp(room, j, k - 1) > 500 And j > 1 Then
                        Yval = j * OutputInterval * XMultiplier 'time
                        Exit For
                    Else
                        Yval = 0
                    End If
                Next
                Chart3.Series(CStr(1)).Points.AddXY(Xval, Yval)

                'For j = 0 To counter
                '    If mc_ULTemp(room, j, k - 1) = 0 And j > 1 Then Exit For
                '    ydata(j) = mc_ULTemp(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                '    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval * XMultiplier, ydata(j))
                'Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb TestToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub MaxUpperLayerTempToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) 
        '
        ' sensitivity plot for max upper layer temperature - output
        '
        Dim DataShift As Double
        Dim DataMultiplier, XMultiplier As Double
        Dim k As Integer
        Dim j As Integer
        Dim room As Integer
        Dim GraphStyle As Integer
        Dim Title As String = ""

        'if no data exists
        If NumberTimeSteps < 1 Then
            MsgBox("There is no data to plot, please run the simulation first.", vbExclamation)
            Exit Sub
        End If

        Try
            Chart1.Visible = False 'histograms
            Chart2.Visible = False 'cdf plots
            Chart3.Visible = True 'time-series plots
            Label4.Visible = False
            Label5.Visible = False
            Panel1.BringToFront()

            ToolStrip1.Visible = False

            xtitle = " Time (s)"
            ytitle = "Max upper layer temp (C)"

            counter = 1
            room = 1
            DataMultiplier = 1
            DataShift = 0
            GraphStyle = 4 '2=user-defined
            'MaxYValue = 900
            XMultiplier = 1 'time multipier

            Title = "Output Data - Sensitivity Plot: " & "Room " & NumericUpDownRoom.Value & ". " & IterationsCompleted & " iterations"
            Chart3.Titles("Title1").Text = Title

            Chart3.Legends("Legend1").Enabled = False
            Chart3.Dock = DockStyle.Fill
            Chart3.ChartAreas("ChartArea1").BorderWidth = 1
            Chart3.ChartAreas("ChartArea1").BorderDashStyle = ChartDashStyle.Solid
            Chart3.ChartAreas("ChartArea1").AxisY.Title = ytitle
            Chart3.ChartAreas("ChartArea1").AxisY.LabelStyle.Format = "0"
            Chart3.ChartAreas("ChartArea1").AxisX.LabelStyle.Format = "0.00"
            Chart3.ChartAreas("ChartArea1").AxisX.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisY.Maximum = [Double].NaN
            Chart3.ChartAreas("ChartArea1").AxisX.Title = "Vent Width (m)"
            Chart3.ChartAreas("ChartArea1").AxisX.IsMarginVisible = False


            'max number of time periods for which the data is available
            If IsNumeric(OutputInterval) And OutputInterval > 0 Then counter = Math.Ceiling((SimTime / OutputInterval))

            NumericUpDown1.Visible = False
            PercentileUpDown.Visible = False
            Label2.Visible = False
            Label18.Visible = False
            Label4.Visible = False
            Label5.Visible = False
            Label19.Visible = True
            NumericUpDownRoom.Minimum = 1
            NumericUpDownRoom.Maximum = NumberRooms
            NumericUpDownRoom.Increment = 1
            NumericUpDownRoom.Value = 1
            NumericUpDownRoom.Show()
            IterationUpDown.Show()
            IterationUpDown.Value = 0
            IterationUpDown.Maximum = NumberIterations
            Label40.Show()

            '-------------
            '*  ====================================================================
            '*  This function takes data for a variable from a two-dimensional array
            '*  and displays it in a graph
            '*  ====================================================================

            Dim ydata(0 To counter + 1) As Double
            NumericUpDown_Bins.Hide()
            Label45.Hide()
            Chart3.Series.Clear()
            room = 1

            ' For k = 1 To NumberIterations
            'plot multiple series
            Chart3.Series.Add(CStr(1))
            Chart3.Series(CStr(1)).ChartType = SeriesChartType.Point
            Dim Yval As Double = 0
            Dim Xval As Double = 0
            Dim ventid As Integer = 1

            For k = 1 To IterationsCompleted

                Xval = mc_vent_width(ventid - 1, k - 1)

                'find when gas temp 
                Yval = 0
                For j = 0 To counter
                    If mc_ULTemp(room, j, k - 1) > Yval Then
                        Yval = mc_ULTemp(room, j, k - 1)
                    End If
                Next
                Chart3.Series(CStr(1)).Points.AddXY(Xval, Yval)

                'For j = 0 To counter
                '    If mc_ULTemp(room, j, k - 1) = 0 And j > 1 Then Exit For
                '    ydata(j) = mc_ULTemp(room, j, k - 1) * DataMultiplier + DataShift 'data to be plotted
                '    Chart3.Series(CStr(k)).Points.AddXY(j * OutputInterval * XMultiplier, ydata(j))
                'Next

            Next k

            Chart3.Visible = True

            PageToolStripMenuItem.Visible = True
            PrintPreviewToolStripMenuItem.Visible = True
            PrintToolStripMenuItem.Visible = True

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in frminputs.vb TestToolStripMenuItem1_Click")
        End Try
    End Sub

    Private Sub SensitivityNewToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SensitivityNewToolStripMenuItem.Click

        frmSensitivity.Show()

    End Sub

    Public Sub readytorun()

        'start monte carlo simulations
        Dim numit As Integer = Convert.ToInt16(Me.txtNumberIterations.Text - 1)

        Dim sprfailcount As Integer = 0
        Dim oldfolder As String = RiskDataDirectory

        ReDim mc_InteriorTemp(0 To numit)
        ReDim mc_ExteriorTemp(0 To numit)
        ReDim mc_RelativeHumidity(0 To numit)
        ReDim mc_FLED(0 To numit)
        ReDim mc_FLED_actual(0 To numit)
        ReDim mc_HoC_fuel(0 To numit)
        ReDim mc_presoot(0 To numit)
        ReDim mc_preCO(0 To numit)
        ReDim mc_SprReliability(0 To numit)
        ReDim mc_SDReliability(0 To numit)
        ReDim mc_FanReliability(0 To numit)
        ReDim mc_SprSuppressProb(0 To numit)
        ReDim mc_SprCooling(0 To numit)
        ReDim mc_PeakHRR(0 To numit)
        ReDim mc_AlphaT(0 To numit)

        ReDim itemcount(0 To numit)
        ReDim sprmode_store(0 To numit)
        ReDim alphaTfitted(0 To 4, 0 To numit)
        ReDim timeequiv(0 To 4, 0 To numit)
        Dim sprink_mode_save As Integer = sprink_mode
        Dim oSprinklers As New List(Of oSprinkler)
        Dim osprdistributions As New List(Of oDistribution)
        Dim oSmokeDets As New List(Of oSmokeDet)
        Dim oSDdistributions As New List(Of oDistribution)
        Dim oItemDistributions As New List(Of oDistribution)
        Dim oItems As List(Of oItem)
        Dim oVentDistributions As New List(Of oDistribution)
        Dim oVents As List(Of oVent)
        Dim ocVentDistributions As New List(Of oDistribution)
        Dim ocVents As List(Of oCVent)
        Dim oFanDistributions As New List(Of oDistribution)
        Dim oFans As List(Of oFan)
        Dim oRoomDistributions As New List(Of oDistribution)
        Dim oRooms As List(Of oRoom)
        Dim response As Short
        Dim start As Double

        ReDim Item1X(0 To NumberIterations - 1)
        ReDim Item1Y(0 To NumberIterations - 1)
        ReDim itime(0 To n_max)
        ReDim ignmode(0 To n_max)

        Try

            'seek confirmation from the user that they want to run the simulation
            'response = MsgBox("Do you want to run the simulation now?", MB_YESNO + MB_ICONQUESTION, ProgramTitle)
            'If response = IDNO Then Exit Sub

            mc_go = True
            upgrade = False
            enzsimtime = 0
            brisksimtime = 0

            'MDIFrmMain.SaveBaseToolStripMenuItem.PerformClick()

            'note start time of simulation
            start = VB.Timer()
            MDIFrmMain.Timer1.Enabled = True

            Dim abc As Double = 0
            Dim getfolder As String


            terminate_fo = chkTerminateFlashover.Checked
            terminate_fuelgone = chkTerminateFuel.Checked

            ToolStripStatusLabel3.Text = "Saving parameters ... please wait."
            Cursor = Cursors.WaitCursor

            Chart1.Hide()
            Chart2.Hide()
            NumericUpDown1.Hide()
            NumericUpDownRoom.Hide()
            IterationUpDown.Hide()

            If basefile = "" Then
                'basefile = UserAppDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_default\basemodel_default.xml"
                basefile = UserPersonalDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_default\basemodel_default.xml"
            End If

            getfolder = Convert.ToString(txtBaseName.Text)
            getfolder = getfolder.Replace(" ", "_")
            txtBaseName.Text = getfolder.ToString
            getfolder = "basemodel_" & getfolder



            ProjectDirectory = RiskDataDirectory

            NumberIterations = Convert.ToInt16(Me.txtNumberIterations.Text)

            'Call Save_BaseFile_xml(basefile)

            'If Not My.Computer.FileSystem.FileExists(basefile) Then
            '    'create the file
            '    My.Computer.FileSystem.WriteAllText(basefile, "", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "items.xml") Then
            '    My.Computer.FileSystem.CopyFile(oldfolder & "items.xml", RiskDataDirectory & "items.xml", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "sprinklers.xml") Then
            '    My.Computer.FileSystem.CopyFile(oldfolder & "sprinklers.xml", RiskDataDirectory & "sprinklers.xml", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "distributions.xml") Then
            '    My.Computer.FileSystem.CopyFile(oldfolder & "distributions.xml", RiskDataDirectory & "distributions.xml", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "vents.xml") Then
            '    My.Computer.FileSystem.CopyFile(oldfolder & "vents.xml", RiskDataDirectory & "vents.xml", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "cvents.xml") Then
            '    My.Computer.FileSystem.CopyFile(oldfolder & "cvents.xml", RiskDataDirectory & "cvents.xml", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "smokedets.xml") Then
            '    My.Computer.FileSystem.CopyFile(oldfolder & "smokedets.xml", RiskDataDirectory & "smokedets.xml", True)
            'End If
            'If Not My.Computer.FileSystem.FileExists(RiskDataDirectory & "fans.xml") Then
            '    If My.Computer.FileSystem.FileExists(oldfolder & "fans.xml") Then
            '        My.Computer.FileSystem.CopyFile(oldfolder & "fans.xml", RiskDataDirectory & "fans.xml", True)
            '    Else
            '        'My.Computer.FileSystem.CopyFile(UserAppDataFolder & gcs_folder_ext & "\" & "riskdata\basemodel_default\fans.xml", RiskDataDirectory & "fans.xml", True)
            '        My.Computer.FileSystem.CopyFile(DataFolder & "fans.xml", RiskDataDirectory & "fans.xml", True)
            '    End If
            'End If

            'check to see if EvacuatioNZ is used
            If MDIFrmMain.TalkToEVACNZToolStripMenuItem.Checked = True Then
                TalkToEVACNZ = True
            Else
                TalkToEVACNZ = False
            End If

            'load room data
            oRoomDistributions = RoomDB.GetRoomDistributions
            oRooms = RoomDB.GetRooms
            NumberRooms = oRooms.Count
            If NumberRooms > 0 Then
                ReDim mc_room_length(0 To NumberRooms - 1, 0 To numit)
                ReDim mc_room_width(0 To NumberRooms - 1, 0 To numit)
            End If
            SampleRoomData_LHS(oRooms, oRoomDistributions)

            'load wall vent data
            oVentDistributions = VentDB.GetVentDistributions
            oVents = VentDB.GetVents
            NumVents = oVents.Count
            If NumVents > 0 Then
                ReDim mc_vent_height(0 To NumVents - 1, 0 To numit)
                ReDim mc_vent_width(0 To NumVents - 1, 0 To numit)
                ReDim mc_ventprob(0 To NumVents - 1, 0 To numit)
                ReDim mc_HOreliability(0 To NumVents - 1, 0 To numit)
                ReDim mc_integrity(0 To NumVents - 1, 0 To numit)
                ReDim mc_maxopening(0 To NumVents - 1, 0 To numit)
                ReDim mc_maxopeningtime(0 To NumVents - 1, 0 To numit)
                ReDim mc_gastemp(0 To NumVents - 1, 0 To numit)
            End If
            SampleVentData_LHS2(oVents, oVentDistributions)

            'load ceiling vent data
            ocVentDistributions = VentDB.GetCVentDistributions
            ocVents = VentDB.GetCVents
            NumCVents = ocVents.Count
            If NumCVents > 0 Then
                ReDim mc_vent_area(0 To NumCVents - 1, 0 To numit)
                ReDim mc_integrity2(0 To NumCVents - 1, 0 To numit)
                ReDim mc_maxopening2(0 To NumCVents - 1, 0 To numit)
                ReDim mc_maxopeningtime2(0 To NumCVents - 1, 0 To numit)
                ReDim mc_gastemp2(0 To NumCVents - 1, 0 To numit)
            End If
            SampleCVentData_LHS(ocVents, ocVentDistributions)

            'read and store sprinkler data for use in the simulatioms
            osprdistributions = SprinklerDB.GetSprDistributions
            oSprinklers = SprinklerDB.GetSprinklers2
            NumSprinklers = oSprinklers.Count

            'sprinkler parameters - change to 2D array to hold multiple sprinklers
            If NumSprinklers > 0 Then
                ReDim CJetTemp(0 To NumberTimeSteps, 2, NumSprinklers - 1)
                ReDim mc_RadialDist(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_RTI(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_cfactor(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_acttemp(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_dist(0 To NumSprinklers - 1, 0 To numit)
                ReDim mc_waterdensity(0 To NumSprinklers - 1, 0 To numit)
            Else
                ReDim CJetTemp(0 To NumberTimeSteps, 2, 0)
                ReDim mc_RadialDist(0, 0 To numit)
                ReDim mc_RTI(0, 0 To numit)
                ReDim mc_cfactor(0, 0 To numit)
                ReDim mc_acttemp(0, 0 To numit)
                ReDim mc_dist(0, 0 To numit)
                ReDim mc_waterdensity(0, 0 To numit)
            End If

            'read and store smoke detector data for use in the simulatioms
            oSDdistributions = SmokeDetDB.GetSDDistributions
            oSmokeDets = SmokeDetDB.GetSmokDets
            NumSmokeDetectors = oSmokeDets.Count

            'sd parameters - change to 2D array to hold multiple sd
            If NumSmokeDetectors > 0 Then
                ReDim mc_SDRadialDist(0 To NumSmokeDetectors - 1, 0 To numit)
                ReDim mc_SDOD(0 To NumSmokeDetectors - 1, 0 To numit)
                ReDim mc_SDZ(0 To NumSmokeDetectors - 1, 0 To numit)
                ReDim mc_SDcharlength(0 To NumSmokeDetectors - 1, 0 To numit)
            Else
                ReDim mc_SDRadialDist(0, 0 To numit)
                ReDim mc_SDOD(0, 0 To numit)
                ReDim mc_SDZ(0, 0 To numit)
                ReDim mc_SDcharlength(0, 0 To numit)
            End If

            'read and store fan data for use in the simulatioms
            oFanDistributions = FanDB.GetFanDistributions
            oFans = FanDB.GetFans
            NumFans = oFans.Count

            'fan parameters - change to 2D array to hold multiple fans
            If NumFans > 0 Then
                ReDim mc_fanflowrate(0 To NumFans - 1, 0 To numit)
                ReDim mc_fanstarttime(0 To NumFans - 1, 0 To numit)
                ReDim mc_fanpressurelimit(0 To NumFans - 1, 0 To numit)
                ReDim mc_fanIDreliability(0 To NumFans - 1, 0 To numit)
            Else
                ReDim mc_fanflowrate(0, 0 To numit)
                ReDim mc_fanstarttime(0, 0 To numit)
                ReDim mc_fanpressurelimit(0, 0 To numit)
                ReDim mc_fanIDreliability(0, 0 To numit)
            End If

            ToolStripStatusLabel3.Text = "Cleaning up old files ... please wait."
            If My.Computer.FileSystem.DirectoryExists(RiskDataDirectory) = True Then
                If My.Computer.FileSystem.FileExists(RiskDataDirectory & "input1.xml") = True Then
                    Kill(RiskDataDirectory & "*put*.xml")
                    Kill(RiskDataDirectory & "*.dat")
                End If

            Else
                If batch = False Then MsgBox("Folder " & RiskDataDirectory & " does not exist.")
            End If

            Dim filename As String

            ToolStripStatusLabel2.Text = ""

            'read and store item distribution data for use in simulations
            oItemDistributions = ItemDB.GetItemDistributions
            oItems = ItemDB.GetItemsv2
            NumberObjects = oItems.Count

            If NumberObjects > 0 Then
                ReDim mc_item_hoc(0 To NumberObjects, 0 To numit)
                ReDim mc_item_soot(0 To NumberObjects, 0 To numit)
                ReDim mc_item_co2(0 To NumberObjects, 0 To numit)
                ReDim mc_item_lhog(0 To NumberObjects, 0 To numit)
                ReDim mc_item_RLF(0 To NumberObjects, 0 To numit)
                ReDim mc_item_hrrua(0 To NumberObjects, 0 To numit)
            End If

            ToolStripStatusLabel3.Text = "Sampling distributions ... please wait."
            Call SampleAllData_LHS2() 'from distributions.xml file

            Call SampleFireData_LHS2(oItems, oItemDistributions) 'from items.xml file, for each unique object in the item list

            Call SampleSprinklerData_LHS2(oSprinklers, osprdistributions) 'from sprinklers.xml file

            Call SampleSmokeDetData_LHS2(oSmokeDets, oSDdistributions) 'from smokedets.xml file

            Call SampleFanData_LHS2(oFans, oFanDistributions) 'from fans.xml file


            'to do: develop some code to check convergence to enable early termination of runs.
            ToolStripProgressBar1.Visible = True
            StopToolStripButton1.Visible = True
            StartToolStripLabel1.Visible = False
            counter = 1
            FlagSimStop = False
            rtb_log.Text = ""

            Dim PeakHRRsave As Single = PeakHRR
            Dim AlphaTsave = AlphaT

            Do
                itcounter = counter
                Dim fireload_count As Double = 0 'MJ
                Dim firemass_count As Double = 0 'kg

                ReDim fandata(0 To NumFans, 0 To 8)
                For Each oFan In oFans
                    fandata(oFan.fanid, 0) = oFan.fanroom
                    fandata(oFan.fanid, 1) = mc_fanflowrate(oFan.fanid - 1, itcounter - 1)
                    fandata(oFan.fanid, 2) = mc_fanpressurelimit(oFan.fanid - 1, itcounter - 1)
                    fandata(oFan.fanid, 3) = mc_fanstarttime(oFan.fanid - 1, itcounter - 1)
                    fandata(oFan.fanid, 4) = CSng(oFan.fanmanual)
                    fandata(oFan.fanid, 5) = oFan.fancurve
                    fandata(oFan.fanid, 6) = oFan.fanelevation
                    fandata(oFan.fanid, 7) = oFan.fanextract
                    fandata(oFan.fanid, 8) = oFan.fanreliability
                Next

                Dim randrel As Single
                Dim Ru As New RandGenUniform(0, 1) 'uniform distribution to generate random numbers between 0 and 1 - use Ru.next to generate the next number

                ReDim FANactive(0 To NumFans)
                For k = 1 To NumFans
                    FANactive(k) = True
                    randrel = Ru.Next 'gets random number 0-1
                    If randrel >= fandata(k, 8) Then
                        FANactive(k) = False
                    End If
                Next

                InitialFuelMass = 0

                rtb_log.Text = "Iteration " & itcounter.ToString & Chr(13) & rtb_log.Text
                VentilationLimitFlag = False
                SprinklerFlag = 0
                HDFlag = 0

                'find vent parameters for this iteration
                Call wallventarrays(oVents, oVentDistributions, itcounter)
                'use vent probability reliability to determine if vent is open/closed initally 

                'find ceiling vent parameters for this iteration
                Call ceilingventarrays(ocVents, ocVentDistributions, itcounter)

                For i = 1 To NumberRooms

                    RoomLength(i) = mc_room_length(i - 1, itcounter - 1)
                    RoomWidth(i) = mc_room_width(i - 1, itcounter - 1)

                    For j = 2 To NumberRooms + 1
                        For k = 1 To NumberVents(i, j)
                            randrel = Ru.Next 'gets random number 0-1
                            If randrel >= VentProb(i, j, k) Then
                                ' vent is open

                            Else
                                'vent is closed
                                VentCD(i, j, k) = 0
                            End If

                            randrel = Ru.Next 'gets random number 0-1
                            If randrel >= HOReliability(i, j, k) Then
                                HOactive(i, j, k) = False
                            Else
                                HOactive(i, j, k) = True
                            End If
                        Next
                    Next
                Next

                InteriorTemp = mc_InteriorTemp(counter - 1)
                ExteriorTemp = mc_ExteriorTemp(counter - 1)
                RelativeHumidity = CSng(mc_RelativeHumidity(counter - 1))

                FLED = CSng(mc_FLED(counter - 1))

                HoC_fuel = CDbl(mc_HoC_fuel(counter - 1))
                preSoot = CSng(mc_presoot(counter - 1))
                preCO = CSng(mc_preCO(counter - 1))
                SDReliability = mc_SDReliability(counter - 1)
                FanReliability = mc_FanReliability(counter - 1)
                SprReliability = mc_SprReliability(counter - 1)
                SprSuppressionProb = mc_SprSuppressProb(counter - 1)
                SprCooling = mc_SprCooling(counter - 1)
                PeakHRR = mc_PeakHRR(counter - 1)
                AlphaT = mc_AlphaT(counter - 1)

                If usepowerlawdesignfire = False Then

                    If autopopulate = True Then
                        'populate the room with fire objects
                        Call populate_items(n_max, counter, fireload_count, firemass_count)
                    Else
                        'what to do if auto room population module turned off
                        'manually place items in the room
                        Call populate_items_manual(n_max, counter, fireload_count, firemass_count)
                    End If

                    mc_FLED_actual(counter - 1) = fireload_count / RoomLength(fireroom) / RoomWidth(fireroom)

                    InitialFuelMass = firemass_count
                    If frmOptions1.optPostFlashover.Checked = False Then FLED = mc_FLED_actual(counter - 1)
                    'If g_post = False Then FLED = mc_FLED_actual(counter - 1)

                    If ISD_windspeed > 0 Then
                        'will call later
                    Else
                        Call Target_distance()
                    End If


                Else
                    'this is using power law fire
                    n_max = 1
                    NumberObjects = 1
                    mc_FLED_actual(counter - 1) = mc_FLED(counter - 1)

                    '===================
                    If autopopulate = True Then
                        'populate the room with fire objects
                        Call populate_items(n_max, counter, fireload_count, firemass_count)
                    Else
                        'what to do if auto room population module turned off
                        'manually place items in the room
                        Call populate_items_manual(n_max, counter, fireload_count, firemass_count)
                    End If
                    mc_FLED_actual(counter - 1) = fireload_count / RoomLength(fireroom) / RoomWidth(fireroom)

                    InitialFuelMass = firemass_count
                    If frmOptions1.optPostFlashover.Checked = False Then FLED = mc_FLED_actual(counter - 1)
                    ' If g_post = False Then FLED = mc_FLED_actual(counter - 1)

                    If ISD_windspeed > 0 Then
                        'will call later
                    Else
                        Call Target_distance()
                    End If
                    '====================
                    EnergyYield(1) = CSng(mc_item_hoc(0, counter - 1))
                    SootYield(1) = CSng(mc_item_soot(0, counter - 1))
                    CO2Yield(1) = CSng(mc_item_co2(0, counter - 1))
                    ObjectLHoG(1) = CSng(mc_item_lhog(0, counter - 1))
                    ObjectRLF(1) = CSng(mc_item_RLF(0, counter - 1))
                    ObjectMLUA(2, 1) = CSng(mc_item_hrrua(0, counter - 1))

                End If

                'n_max holds number of items in this iteration
                itemcount(counter - 1) = n_max

                'sprinkler radial distance calculations if auto room population is ON
                'need sprinkler x,y coordinates
                'need first item location centre coordinates
                'calculate radial distance between item and sprinkler
                For Each oSprinkler In oSprinklers
                    oSprinkler.responsetime = 0
                    If calc_sprdist = True Then
                        mc_RadialDist(oSprinkler.sprid - 1, itcounter - 1) = Sqrt((oSprinkler.sprx - Item1X(itcounter - 1)) ^ 2 + (oSprinkler.spry - Item1Y(itcounter - 1)) ^ 2)
                    End If
                    oSprinkler.sprr = mc_RadialDist(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.rti = mc_RTI(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.cfactor = mc_cfactor(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.sprz = mc_dist(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.sprdensity = mc_waterdensity(oSprinkler.sprid - 1, itcounter - 1)
                    oSprinkler.acttemp = mc_acttemp(oSprinkler.sprid - 1, itcounter - 1)
                Next

                For Each oSmokeDet In oSmokeDets
                    oSmokeDet.responsetime = 0
                    If calc_sddist = True Then
                        mc_SDRadialDist(oSmokeDet.sdid - 1, itcounter - 1) = Sqrt((oSmokeDet.sdx - Item1X(itcounter - 1)) ^ 2 + (oSmokeDet.sdy - Item1Y(itcounter - 1)) ^ 2)
                    End If
                    oSmokeDet.sdr = mc_SDRadialDist(oSmokeDet.sdid - 1, itcounter - 1)
                    oSmokeDet.od = mc_SDOD(oSmokeDet.sdid - 1, itcounter - 1)
                    oSmokeDet.sdz = mc_SDZ(oSmokeDet.sdid - 1, itcounter - 1)
                    oSmokeDet.charlength = mc_SDcharlength(oSmokeDet.sdid - 1, itcounter - 1)
                Next

                For Each oFan In oFans
                    oFan.fanreliability = mc_fanIDreliability(oFan.fanid - 1, itcounter - 1)
                    oFan.fanflowrate = mc_fanflowrate(oFan.fanid - 1, itcounter - 1)
                    oFan.fanstarttime = mc_fanstarttime(oFan.fanid - 1, itcounter - 1)
                    oFan.fanpressurelimit = mc_fanpressurelimit(oFan.fanid - 1, itcounter - 1)
                Next

                'save mc data to sampledata.dat file
                Call save_sampledata()

                'use sd reliability to determine if sd failure occurs 
                'system failure not individual detector
                sd_mode = True  'sd can operate
                randrel = Ru.Next 'gets random number 0-1
                If randrel > mc_SDReliability(itcounter - 1) Then
                    sd_mode = False 'sd inactive
                End If

                mv_mode = True  'mech vent system can operate
                randrel = Ru.Next 'gets random number 0-1
                If randrel > mc_FanReliability(itcounter - 1) Then
                    mv_mode = False 'mv system inactive
                End If

                'use sprinkler reliability to determine if sprinkler failure occurs 
                randrel = Ru.Next 'gets random number 0-1
                If randrel > mc_SprReliability(itcounter - 1) Then
                    sprink_mode = 0 'sprinkler has no effect on HRR
                Else
                    'sprinkler can operate
                    randrel = Ru.Next 'gets another random number 0-1
                    If randrel > mc_SprSuppressProb(itcounter - 1) Then
                        sprink_mode = 1 'sprinkler can control fire only
                    Else
                        sprink_mode = 2 'sprinkler can suppress fire
                    End If
                End If

                'number of sprinklers required for suppression/control
                randrel = Ru.Next() 'get a random  number between 0 and 1
                If randrel <= sprnum_prob(0) Then
                    NumOperatingSpr = 1
                ElseIf randrel <= sprnum_prob(0) + sprnum_prob(1) Then
                    NumOperatingSpr = 2
                ElseIf randrel <= sprnum_prob(0) + sprnum_prob(1) + sprnum_prob(2) Then
                    NumOperatingSpr = 3
                Else
                    NumOperatingSpr = 4
                End If

                If frmOptions1.optQuintiere.Checked = True Then
                    BurnerWidth = (ObjLength(1) + ObjWidth(1)) / 2
                End If

                'save input data file for current iteration
                filename = RiskDataDirectory & "input" & counter & ".xml"
                Call Save_File_xml(filename, counter, oSprinklers, oSmokeDets, oFans)

                'run the iteration
                DataFile = Dir(filename)
                ToolStripStatusLabel2.Text = DataFile
                ToolStripStatusLabel3.Text = "Iterations started: " & counter

                Call RunOnce(DataFile, counter, oSprinklers, osprdistributions, oSmokeDets, oSDdistributions, oFans, oFanDistributions)

                sprmode_store(counter - 1) = sprink_mode

                ToolStripProgressBar1.Value = 100 * (counter / CInt(txtNumberIterations.Text))

                'save the results from the iteration
                save_dumpfile(counter)

                'lblCompleted.Text = "Iterations completed: " & counter
                ToolStripStatusLabel3.Text = "Iterations completed: " & counter
                IterationsCompleted = counter
                counter = counter + 1

                If sprink_mode = 0 Then sprfailcount = sprfailcount + 1
                sprink_mode = sprink_mode_save

                'save results to pdf
                If autosavepdf = True Then
                    Call create_pdf()
                End If

                'save results to excel
                If autosaveXL = True Then
                    Call create_excel()
                End If

                If FlagSimStop = True Then Exit Do

                'Next counter
            Loop Until counter > numit + 1

            PeakHRR = PeakHRRsave
            AlphaT = AlphaTsave
            If batch = True Then basefile = opendatafile

            Call Read_OutputFile_xml(basefile)
            FlagSimStop = True

            If NumSprinklers > 0 Then
                Dim x As Single = (IterationsCompleted - sprfailcount) / IterationsCompleted
                x = FormatNumber(x, 3)
                rtb_log.Text = "Sprinkler Effectiveness " & x.ToString & Chr(13) & rtb_log.Text
            End If

            If NumberTimeSteps > 1 Then
                MDIFrmMain.mnuExcel.Enabled = True
            Else
                MDIFrmMain.mnuExcel.Enabled = False
            End If

            Call createsmokeviewdata()

            If batch = False Then MsgBox("Iterations completed.", , )
            ToolStripStatusLabel2.Text = "Iterations Completed"
            rtb_log.Text = "Simulation Finished. " & Chr(13) & rtb_log.Text
            ToolStripProgressBar1.Value = 0
            ToolStripProgressBar1.Visible = False
            StopToolStripButton1.Visible = False
            StartToolStripLabel1.Visible = True
            Cursor = Cursors.Default
            mc_go = False

            'note end time of simulation
            runtime = VB.Timer() - start
            MDIFrmMain.Timer1.Enabled = False
            EvacTimer.Enabled = False
            MDIFrmMain.mnuExcel.Enabled = True
            Exit Sub

        Catch ex As Exception
            MsgBox(Err.Description, MsgBoxStyle.OkOnly, "Exception in MDIFRMMA.vb eadytorun")

            ToolStripStatusLabel2.Text = "Iterations Completed with Errors"
            rtb_log.Text = "Simulation Finished. " & Chr(13) & rtb_log.Text
            ToolStripProgressBar1.Value = 0
            ToolStripProgressBar1.Visible = False
            StopToolStripButton1.Visible = False
            StartToolStripLabel1.Visible = True
            Cursor = Cursors.Default
            MDIFrmMain.Timer1.Enabled = False
            EvacTimer.Enabled = False
            mc_go = False
        End Try

    End Sub

    Private Sub Chart2_VisibleChanged(sender As Object, e As EventArgs) Handles Chart2.VisibleChanged
        If Chart2.Visible = True Then

            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
        End If
        If Chart2.Visible = False Then

            ChkAutosavePdf.Visible = True
            chkAutosaveXL.Visible = True
        End If
    End Sub

    Private Sub Chart1_VisibleChanged(sender As Object, e As EventArgs) Handles Chart1.VisibleChanged
        If Chart1.Visible = True Then

            ChkAutosavePdf.Visible = False
            chkAutosaveXL.Visible = False
        End If
        If Chart1.Visible = False Then

            ChkAutosavePdf.Visible = True
            chkAutosaveXL.Visible = True
        End If
    End Sub

    Private Sub SprinklerResponseTimeToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SprinklerResponseTimeToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots

        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Call ExportDataToExcel_SRT()


    End Sub

    Private Sub SmokeDetectorResponseTimeToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles SmokeDetectorResponseTimeToolStripMenuItem.Click
        Chart1.Visible = False 'histograms
        Chart2.Visible = False 'cdf plots

        Chart3.Visible = True 'time-series plots
        Label4.Visible = False
        Label5.Visible = False
        Call ExportDataToExcel_SDRT()
    End Sub
End Class